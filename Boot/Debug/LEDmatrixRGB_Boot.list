
LEDmatrixRGB_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000983c  080002b0  080002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08009aec  08009aec  0000aaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b50  08009b50  0000b030  2**0
                  CONTENTS
  4 .ARM          00000008  08009b50  08009b50  0000ab50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b58  08009b58  0000b030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b58  08009b58  0000ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b5c  08009b5c  0000ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  24000000  08009b60  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  24000030  08009b90  0000b030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  0000c000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be42  00000000  00000000  0000b05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c6  00000000  00000000  00026ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0002a368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0d  00000000  00000000  0002b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032cb2  00000000  00000000  0002c195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e97  00000000  00000000  0005ee47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013bd35  00000000  00000000  00078cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b4a13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045dc  00000000  00000000  001b4a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001b9034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000030 	.word	0x24000030
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009ad4 	.word	0x08009ad4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000034 	.word	0x24000034
 80002ec:	08009ad4 	.word	0x08009ad4

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_EXTMEM_MANAGER_Init>:
/**
  * Init External memory manager
  * @retval None
  */
void MX_EXTMEM_MANAGER_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */

  /* USER CODE END MX_EXTMEM_Init_PreTreatment */
  HAL_RCCEx_EnableClockProtection(RCC_CLOCKPROTECT_XSPI);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f004 fff7 	bl	80055d8 <HAL_RCCEx_EnableClockProtection>

  /* Initialization of the memory parameters */
  memset(extmem_list_config, 0x0, sizeof(extmem_list_config));
 80005ea:	22ac      	movs	r2, #172	@ 0xac
 80005ec:	2100      	movs	r1, #0
 80005ee:	480b      	ldr	r0, [pc, #44]	@ (800061c <MX_EXTMEM_MANAGER_Init+0x3c>)
 80005f0:	f009 fa36 	bl	8009a60 <memset>

  /* EXTMEMORY_1 */
  extmem_list_config[0].MemType = EXTMEM_NOR_SFDP;
 80005f4:	4b09      	ldr	r3, [pc, #36]	@ (800061c <MX_EXTMEM_MANAGER_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
  extmem_list_config[0].Handle = (void*)&hxspi2;
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <MX_EXTMEM_MANAGER_Init+0x3c>)
 80005fc:	4a08      	ldr	r2, [pc, #32]	@ (8000620 <MX_EXTMEM_MANAGER_Init+0x40>)
 80005fe:	605a      	str	r2, [r3, #4]
  extmem_list_config[0].ConfigType = EXTMEM_LINK_CONFIG_8LINES;
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <MX_EXTMEM_MANAGER_Init+0x3c>)
 8000602:	2203      	movs	r2, #3
 8000604:	721a      	strb	r2, [r3, #8]

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI2));
 8000606:	2004      	movs	r0, #4
 8000608:	f003 fca6 	bl	8003f58 <HAL_RCCEx_GetPeriphCLKFreq>
 800060c:	4603      	mov	r3, r0
 800060e:	4619      	mov	r1, r3
 8000610:	2000      	movs	r0, #0
 8000612:	f006 fe39 	bl	8007288 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2400015c 	.word	0x2400015c
 8000620:	2400005c 	.word	0x2400005c

08000624 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPION_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_GPIO_Init+0x2c>)
 800062c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000630:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <MX_GPIO_Init+0x2c>)
 8000632:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000636:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800063a:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <MX_GPIO_Init+0x2c>)
 800063c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	58024400 	.word	0x58024400

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800065a:	f000 f91f 	bl	800089c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800065e:	4b4f      	ldr	r3, [pc, #316]	@ (800079c <main+0x148>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000666:	2b00      	cmp	r3, #0
 8000668:	d11b      	bne.n	80006a2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800066a:	f3bf 8f4f 	dsb	sy
}
 800066e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000670:	f3bf 8f6f 	isb	sy
}
 8000674:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000676:	4b49      	ldr	r3, [pc, #292]	@ (800079c <main+0x148>)
 8000678:	2200      	movs	r2, #0
 800067a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800067e:	f3bf 8f4f 	dsb	sy
}
 8000682:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000684:	f3bf 8f6f 	isb	sy
}
 8000688:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800068a:	4b44      	ldr	r3, [pc, #272]	@ (800079c <main+0x148>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a43      	ldr	r2, [pc, #268]	@ (800079c <main+0x148>)
 8000690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000694:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000696:	f3bf 8f4f 	dsb	sy
}
 800069a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069c:	f3bf 8f6f 	isb	sy
}
 80006a0:	e000      	b.n	80006a4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006a2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006a4:	4b3d      	ldr	r3, [pc, #244]	@ (800079c <main+0x148>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d138      	bne.n	8000722 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006b0:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <main+0x148>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006b8:	f3bf 8f4f 	dsb	sy
}
 80006bc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006be:	4b37      	ldr	r3, [pc, #220]	@ (800079c <main+0x148>)
 80006c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80006c4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	0b5b      	lsrs	r3, r3, #13
 80006ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006ce:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	08db      	lsrs	r3, r3, #3
 80006d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006d8:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	015a      	lsls	r2, r3, #5
 80006de:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80006e2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006e8:	492c      	ldr	r1, [pc, #176]	@ (800079c <main+0x148>)
 80006ea:	4313      	orrs	r3, r2
 80006ec:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	1e5a      	subs	r2, r3, #1
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1ef      	bne.n	80006da <main+0x86>
    } while(sets-- != 0U);
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	1e5a      	subs	r2, r3, #1
 80006fe:	60ba      	str	r2, [r7, #8]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1e5      	bne.n	80006d0 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800070a:	4b24      	ldr	r3, [pc, #144]	@ (800079c <main+0x148>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a23      	ldr	r2, [pc, #140]	@ (800079c <main+0x148>)
 8000710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000714:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000716:	f3bf 8f4f 	dsb	sy
}
 800071a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800071c:	f3bf 8f6f 	isb	sy
}
 8000720:	e000      	b.n	8000724 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000722:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f000 fcf8 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f83c 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f7ff ff7a 	bl	8000624 <MX_GPIO_Init>
  MX_SBS_Init();
 8000730:	f000 f8ff 	bl	8000932 <MX_SBS_Init>
  MX_XSPI2_Init();
 8000734:	f000 f998 	bl	8000a68 <MX_XSPI2_Init>
  MX_EXTMEM_MANAGER_Init();
 8000738:	f7ff ff52 	bl	80005e0 <MX_EXTMEM_MANAGER_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fa85 	bl	8000c4c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 fa82 	bl	8000c4c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000748:	2002      	movs	r0, #2
 800074a:	f000 fa7f 	bl	8000c4c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800074e:	2101      	movs	r1, #1
 8000750:	2000      	movs	r0, #0
 8000752:	f000 faf7 	bl	8000d44 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <main+0x14c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800075c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <main+0x14c>)
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <main+0x14c>)
 8000766:	2200      	movs	r2, #0
 8000768:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <main+0x14c>)
 800076c:	2200      	movs	r2, #0
 800076e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000770:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <main+0x14c>)
 8000772:	2200      	movs	r2, #0
 8000774:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000776:	490a      	ldr	r1, [pc, #40]	@ (80007a0 <main+0x14c>)
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fbaf 	bl	8000edc <BSP_COM_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <main+0x134>
  {
    Error_Handler();
 8000784:	f000 f8cf 	bl	8000926 <Error_Handler>
  }

  /* Launch the application */
  if (BOOT_OK != BOOT_Application())
 8000788:	f006 fcb6 	bl	80070f8 <BOOT_Application>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d002      	beq.n	8000798 <main+0x144>
  {
    Error_Handler();
 8000792:	f000 f8c8 	bl	8000926 <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <main+0x144>
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	2400004c 	.word	0x2400004c

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b0b0      	sub	sp, #192	@ 0xc0
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	229c      	movs	r2, #156	@ 0x9c
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f009 f954 	bl	8009a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2220      	movs	r2, #32
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f009 f94e 	bl	8009a60 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80007c4:	2001      	movs	r0, #1
 80007c6:	f001 fa11 	bl	8001bec <HAL_PWREx_ControlVoltageScaling>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x30>
  {
    Error_Handler();
 80007d0:	f000 f8a9 	bl	8000926 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2340      	movs	r3, #64	@ 0x40
 80007e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLM = 32;
 80007ec:	2320      	movs	r3, #32
 80007ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL1.PLLN = 300;
 80007f0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80007f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLP = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL1.PLLQ = 2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL1.PLLR = 2;
 80007fe:	2302      	movs	r3, #2
 8000800:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL1.PLLS = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL1.PLLT = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLLSOURCE_HSI;
 8000812:	2300      	movs	r3, #0
 8000814:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL2.PLLM = 4;
 8000816:	2304      	movs	r3, #4
 8000818:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL2.PLLN = 25;
 800081a:	2319      	movs	r3, #25
 800081c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL2.PLLP = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLQ = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL2.PLLR = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL2.PLLS = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL2.PLLT = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL2.PLLFractional = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
 8000842:	2300      	movs	r3, #0
 8000844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fa05 	bl	8001c5c <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000858:	f000 f865 	bl	8000926 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	233f      	movs	r3, #63	@ 0x3f
 800085e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK4|RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2303      	movs	r3, #3
 8000862:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000868:	2308      	movs	r3, #8
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800086c:	2304      	movs	r3, #4
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000870:	2340      	movs	r3, #64	@ 0x40
 8000872:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000878:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV2;
 800087a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800087e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2137      	movs	r1, #55	@ 0x37
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fd23 	bl	80022d0 <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000890:	f000 f849 	bl	8000926 <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	37c0      	adds	r7, #192	@ 0xc0
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

static void MPU_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ae:	f000 fe9f 	bl	80015f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008b2:	2301      	movs	r3, #1
 80008b4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008be:	231f      	movs	r3, #31
 80008c0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008c2:	2387      	movs	r3, #135	@ 0x87
 80008c4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008ca:	2300      	movs	r3, #0
 80008cc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008de:	463b      	mov	r3, r7
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fea3 	bl	800162c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x70000000;
 80008ea:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80008ee:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80008f0:	231a      	movs	r3, #26
 80008f2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80008fc:	2303      	movs	r3, #3
 80008fe:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000904:	2301      	movs	r3, #1
 8000906:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000908:	2301      	movs	r3, #1
 800090a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800090c:	2301      	movs	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000910:	463b      	mov	r3, r7
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fe8a 	bl	800162c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000918:	2004      	movs	r0, #4
 800091a:	f000 fe47 	bl	80015ac <HAL_MPU_Enable>

}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092a:	b672      	cpsid	i
}
 800092c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092e:	bf00      	nop
 8000930:	e7fd      	b.n	800092e <Error_Handler+0x8>

08000932 <MX_SBS_Init>:

/* USER CODE END 0 */

/* SBS init function */
void MX_SBS_Init(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE END SBS_Init 1 */
  /* USER CODE BEGIN SBS_Init 2 */

  /* USER CODE END SBS_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0a8      	sub	sp, #160	@ 0xa0
 8000944:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	229c      	movs	r2, #156	@ 0x9c
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f009 f887 	bl	8009a60 <memset>

  /* Configure the system Power Supply */

  if (HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY) != HAL_OK)
 8000952:	2002      	movs	r0, #2
 8000954:	f001 f8f8 	bl	8001b48 <HAL_PWREx_ConfigSupply>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_MspInit+0x22>
  {
    /* Initialization error */
    Error_Handler();
 800095e:	f7ff ffe2 	bl	8000926 <Error_Handler>

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SBS_CLK_ENABLE();
 8000962:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <HAL_MspInit+0x8c>)
 8000964:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000968:	4a18      	ldr	r2, [pc, #96]	@ (80009cc <HAL_MspInit+0x8c>)
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <HAL_MspInit+0x8c>)
 8000974:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Enable the XSPIM_P2 interface */
  HAL_PWREx_EnableXSPIM2();
 800097c:	f001 f95e 	bl	8001c3c <HAL_PWREx_EnableXSPIM2>

  /* The CSI is used by the compensation cells and must be enabled before enabling the
     compensation cells.
     For more details refer to RM0477 [SBS I/O compensation cell management] chapter.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000980:	2310      	movs	r3, #16
 8000982:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000984:	2380      	movs	r3, #128	@ 0x80
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f001 f966 	bl	8001c5c <HAL_RCC_OscConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_MspInit+0x5a>
  {
    Error_Handler();
 8000996:	f7ff ffc6 	bl	8000926 <Error_Handler>
  }

  /* Configure the compensation cell */
  HAL_SBS_ConfigCompensationCell(SBS_IO_XSPI2_CELL, SBS_IO_CELL_CODE, 0U, 0U);
 800099a:	2300      	movs	r3, #0
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2010      	movs	r0, #16
 80009a2:	f000 fc8b 	bl	80012bc <HAL_SBS_ConfigCompensationCell>

  /* Enable compensation cell */
  HAL_SBS_EnableCompensationCell(SBS_IO_XSPI2_CELL);
 80009a6:	2010      	movs	r0, #16
 80009a8:	f000 fc5e 	bl	8001268 <HAL_SBS_EnableCompensationCell>

  /* wait ready before enabled IO */
  while(HAL_SBS_GetCompensationCellReadyStatus(SBS_IO_XSPI2_CELL_READY) != 1U);
 80009ac:	bf00      	nop
 80009ae:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80009b2:	f000 fc6d 	bl	8001290 <HAL_SBS_GetCompensationCellReadyStatus>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d1f8      	bne.n	80009ae <HAL_MspInit+0x6e>

  /* high speed low voltage config */
  HAL_SBS_EnableIOSpeedOptimize(SBS_IO_XSPI2_HSLV);
 80009bc:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80009c0:	f000 fcd0 	bl	8001364 <HAL_SBS_EnableIOSpeedOptimize>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	37a0      	adds	r7, #160	@ 0xa0
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58024400 	.word	0x58024400

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <NMI_Handler+0x4>

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <MemManage_Handler+0x4>

080009e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a26:	f000 fbcb 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 fa40 	bl	8000eb8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
 8000a40:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <SystemInit+0x24>)
 8000a42:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <SystemInit+0x28>)
 8000a44:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <SystemInit+0x24>)
 8000a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <SystemInit+0x24>)
 8000a4e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a52:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	08000000 	.word	0x08000000

08000a68 <MX_XSPI2_Init>:

XSPI_HandleTypeDef hxspi2;

/* XSPI2 init function */
void MX_XSPI2_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  hxspi2.Instance = XSPI2;
 8000a78:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000a7a:	4a27      	ldr	r2, [pc, #156]	@ (8000b18 <MX_XSPI2_Init+0xb0>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 4;
 8000a7e:	4b25      	ldr	r3, [pc, #148]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000a80:	2204      	movs	r2, #4
 8000a82:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
 8000a84:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
 8000a8a:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000a8c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a90:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_32GB;
 8000a92:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000a94:	221f      	movs	r2, #31
 8000a96:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 2;
 8000a98:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 3;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
 8000adc:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000ade:	f005 fbeb 	bl	80062b8 <HAL_XSPI_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_XSPI2_Init+0x84>
  {
    Error_Handler();
 8000ae8:	f7ff ff1d 	bl	8000926 <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8000aec:	2310      	movs	r3, #16
 8000aee:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
 8000af0:	2301      	movs	r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <MX_XSPI2_Init+0xac>)
 8000afe:	f005 ffd7 	bl	8006ab0 <HAL_XSPIM_Config>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_XSPI2_Init+0xa4>
  {
    Error_Handler();
 8000b08:	f7ff ff0d 	bl	8000926 <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2400005c 	.word	0x2400005c
 8000b18:	5200a000 	.word	0x5200a000

08000b1c <HAL_XSPI_MspInit>:

void HAL_XSPI_MspInit(XSPI_HandleTypeDef* xspiHandle)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	2284      	movs	r2, #132	@ 0x84
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f008 ff8f 	bl	8009a60 <memset>
  if(xspiHandle->Instance==XSPI2)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a29      	ldr	r2, [pc, #164]	@ (8000bec <HAL_XSPI_MspInit+0xd0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d14a      	bne.n	8000be2 <HAL_XSPI_MspInit+0xc6>

  /* USER CODE END XSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_PLL2S;
 8000b50:	2340      	movs	r3, #64	@ 0x40
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 faf9 	bl	8003150 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_XSPI_MspInit+0x4c>
    {
      Error_Handler();
 8000b64:	f7ff fedf 	bl	8000926 <Error_Handler>
    }

    /* XSPI2 clock enable */
    __HAL_RCC_XSPIM_CLK_ENABLE();
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <HAL_XSPI_MspInit+0xd4>)
 8000b6a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000b6e:	4a20      	ldr	r2, [pc, #128]	@ (8000bf0 <HAL_XSPI_MspInit+0xd4>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b74:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000b78:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <HAL_XSPI_MspInit+0xd4>)
 8000b7a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_XSPI2_CLK_ENABLE();
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <HAL_XSPI_MspInit+0xd4>)
 8000b84:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000b88:	4a19      	ldr	r2, [pc, #100]	@ (8000bf0 <HAL_XSPI_MspInit+0xd4>)
 8000b8a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b8e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
 8000b92:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <HAL_XSPI_MspInit+0xd4>)
 8000b94:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPION_CLK_ENABLE();
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <HAL_XSPI_MspInit+0xd4>)
 8000b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba2:	4a13      	ldr	r2, [pc, #76]	@ (8000bf0 <HAL_XSPI_MspInit+0xd4>)
 8000ba4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ba8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <HAL_XSPI_MspInit+0xd4>)
 8000bae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    PN6     ------> XSPIM_P2_CLK
    PN8     ------> XSPIM_P2_IO4
    PN4     ------> XSPIM_P2_IO2
    PN5     ------> XSPIM_P2_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_11
 8000bb6:	f640 737f 	movw	r3, #3967	@ 0xf7f
 8000bba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
 8000bd0:	2309      	movs	r3, #9
 8000bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
 8000bd6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <HAL_XSPI_MspInit+0xd8>)
 8000bde:	f000 fe45 	bl	800186c <HAL_GPIO_Init>

  /* USER CODE BEGIN XSPI2_MspInit 1 */

  /* USER CODE END XSPI2_MspInit 1 */
  }
}
 8000be2:	bf00      	nop
 8000be4:	37b0      	adds	r7, #176	@ 0xb0
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	5200a000 	.word	0x5200a000
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	58023400 	.word	0x58023400

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bfc:	f7ff ff1e 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	@ (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c26:	f008 ff23 	bl	8009a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fd13 	bl	8000654 <main>

08000c2e <LoopForever>:

LoopForever:
  b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   r0, =_estack
 8000c30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c38:	24000030 	.word	0x24000030
  ldr r2, =_sidata
 8000c3c:	08009b60 	.word	0x08009b60
  ldr r2, =_sbss
 8000c40:	24000030 	.word	0x24000030
  ldr r4, =_ebss
 8000c44:	24000390 	.word	0x24000390

08000c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_2_IRQHandler>
	...

08000c4c <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	@ 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef GPIO_Init = {0};
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d10d      	bne.n	8000c8c <BSP_LED_Init+0x40>
  {
    LD1_GPIO_CLK_ENABLE();
 8000c70:	4b24      	ldr	r3, [pc, #144]	@ (8000d04 <BSP_LED_Init+0xb8>)
 8000c72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c76:	4a23      	ldr	r2, [pc, #140]	@ (8000d04 <BSP_LED_Init+0xb8>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c80:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <BSP_LED_Init+0xb8>)
 8000c82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	e01d      	b.n	8000cc8 <BSP_LED_Init+0x7c>
  }
  else if (Led == LD2)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d10d      	bne.n	8000cae <BSP_LED_Init+0x62>
  {
    LD2_GPIO_CLK_ENABLE();
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <BSP_LED_Init+0xb8>)
 8000c94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c98:	4a1a      	ldr	r2, [pc, #104]	@ (8000d04 <BSP_LED_Init+0xb8>)
 8000c9a:	f043 0308 	orr.w	r3, r3, #8
 8000c9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ca2:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <BSP_LED_Init+0xb8>)
 8000ca4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	e00c      	b.n	8000cc8 <BSP_LED_Init+0x7c>
  }
  else /* Led == LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <BSP_LED_Init+0xb8>)
 8000cb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cb4:	4a13      	ldr	r2, [pc, #76]	@ (8000d04 <BSP_LED_Init+0xb8>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <BSP_LED_Init+0xb8>)
 8000cc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4a0f      	ldr	r2, [pc, #60]	@ (8000d08 <BSP_LED_Init+0xbc>)
 8000ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <BSP_LED_Init+0xc0>)
 8000ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce6:	f107 0218 	add.w	r2, r7, #24
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fdbd 	bl	800186c <HAL_GPIO_Init>

  /* By default, turn off LED */
  (void) BSP_LED_Off(Led);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f80b 	bl	8000d10 <BSP_LED_Off>
  return ret;
 8000cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3730      	adds	r7, #48	@ 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	58024400 	.word	0x58024400
 8000d08:	24000004 	.word	0x24000004
 8000d0c:	2400000c 	.word	0x2400000c

08000d10 <BSP_LED_Off>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <BSP_LED_Off+0x2c>)
 8000d1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <BSP_LED_Off+0x30>)
 8000d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f000 fef3 	bl	8001b18 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2400000c 	.word	0x2400000c
 8000d40:	24000004 	.word	0x24000004

08000d44 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	@ 0x38
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4613      	mov	r3, r2
 8000d52:	71bb      	strb	r3, [r7, #6]
  int32_t               status = BSP_ERROR_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef      GPIO_Init = {0};
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  uint32_t              BSP_BUTTON_IT_PRIO[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
 8000d68:	230f      	movs	r3, #15
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t              BUTTON_EXTI_LINE[BUTTONn]   = {BUTTON_USER_EXTI_LINE};
 8000d6c:	4b45      	ldr	r3, [pc, #276]	@ (8000e84 <BSP_PB_Init+0x140>)
 8000d6e:	61bb      	str	r3, [r7, #24]
  BSP_EXTI_LineCallback ButtonCallback[BUTTONn]     = {BUTTON_USER_EXTI_Callback};
 8000d70:	4b45      	ldr	r3, [pc, #276]	@ (8000e88 <BSP_PB_Init+0x144>)
 8000d72:	617b      	str	r3, [r7, #20]

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000d74:	4b45      	ldr	r3, [pc, #276]	@ (8000e8c <BSP_PB_Init+0x148>)
 8000d76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d7a:	4a44      	ldr	r2, [pc, #272]	@ (8000e8c <BSP_PB_Init+0x148>)
 8000d7c:	f043 0304 	orr.w	r3, r3, #4
 8000d80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d84:	4b41      	ldr	r3, [pc, #260]	@ (8000e8c <BSP_PB_Init+0x148>)
 8000d86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

  GPIO_Init.Pin   = BUTTON_PIN[Button];
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	4a3f      	ldr	r2, [pc, #252]	@ (8000e90 <BSP_PB_Init+0x14c>)
 8000d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull  = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d10c      	bne.n	8000dc0 <BSP_PB_Init+0x7c>
  {
    /* Configure Button pin as input */
    GPIO_Init.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4a39      	ldr	r2, [pc, #228]	@ (8000e94 <BSP_PB_Init+0x150>)
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	f107 0220 	add.w	r2, r7, #32
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fd57 	bl	800186c <HAL_GPIO_Init>
 8000dbe:	e058      	b.n	8000e72 <BSP_PB_Init+0x12e>
  }
  else /* ButtonMode == BUTTON_MODE_EXTI */
  {
    /* Enable SBS clock */
    __HAL_RCC_SBS_CLK_ENABLE();
 8000dc0:	4b32      	ldr	r3, [pc, #200]	@ (8000e8c <BSP_PB_Init+0x148>)
 8000dc2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000dc6:	4a31      	ldr	r2, [pc, #196]	@ (8000e8c <BSP_PB_Init+0x148>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <BSP_PB_Init+0x148>)
 8000dd2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]

    /* Configure Button pin as input with External interrupt */
    GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 8000dda:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_Init);
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4a2c      	ldr	r2, [pc, #176]	@ (8000e94 <BSP_PB_Init+0x150>)
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de8:	f107 0220 	add.w	r2, r7, #32
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fd3c 	bl	800186c <HAL_GPIO_Init>

    if (HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) == HAL_OK)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	4a27      	ldr	r2, [pc, #156]	@ (8000e98 <BSP_PB_Init+0x154>)
 8000dfa:	441a      	add	r2, r3
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	3338      	adds	r3, #56	@ 0x38
 8000e02:	443b      	add	r3, r7
 8000e04:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	f000 fcea 	bl	80017e4 <HAL_EXTI_GetHandle>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d12a      	bne.n	8000e6c <BSP_PB_Init+0x128>
    {
      if (HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) == HAL_OK)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e98 <BSP_PB_Init+0x154>)
 8000e1c:	1898      	adds	r0, r3, r2
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	3338      	adds	r3, #56	@ 0x38
 8000e24:	443b      	add	r3, r7
 8000e26:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f000 fcbf 	bl	80017b0 <HAL_EXTI_RegisterCallback>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d115      	bne.n	8000e64 <BSP_PB_Init+0x120>
      {
        /* Enable and set Button EXTI Interrupt to the lowest priority */
        HAL_NVIC_SetPriority(BUTTON_IRQn[Button], BSP_BUTTON_IT_PRIO[Button], 0x00);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4a18      	ldr	r2, [pc, #96]	@ (8000e9c <BSP_PB_Init+0x158>)
 8000e3c:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	3338      	adds	r3, #56	@ 0x38
 8000e46:	443b      	add	r3, r7
 8000e48:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f000 fb77 	bl	8001542 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(BUTTON_IRQn[Button]);
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	4a11      	ldr	r2, [pc, #68]	@ (8000e9c <BSP_PB_Init+0x158>)
 8000e58:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fb8a 	bl	8001576 <HAL_NVIC_EnableIRQ>
 8000e62:	e006      	b.n	8000e72 <BSP_PB_Init+0x12e>
      }
      else
      {
        status = BSP_ERROR_PERIPH_FAILURE;
 8000e64:	f06f 0303 	mvn.w	r3, #3
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e6a:	e002      	b.n	8000e72 <BSP_PB_Init+0x12e>
      }
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8000e6c:	f06f 0303 	mvn.w	r3, #3
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
    }
  }

  /* Delay to avoid that possible signal rebound is taken as button release */
  HAL_Delay(1);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 f9c4 	bl	8001200 <HAL_Delay>

  return status;
 8000e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3738      	adds	r7, #56	@ 0x38
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	1600000d 	.word	0x1600000d
 8000e88:	08000f7d 	.word	0x08000f7d
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	24000018 	.word	0x24000018
 8000e94:	2400001c 	.word	0x2400001c
 8000e98:	24000150 	.word	0x24000150
 8000e9c:	24000020 	.word	0x24000020

08000ea0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <BSP_PB_IRQHandler+0x20>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fc9e 	bl	800180c <HAL_EXTI_IRQHandler>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	24000150 	.word	0x24000150

08000edc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                configuration information for the specified COM peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d103      	bne.n	8000efa <BSP_COM_Init+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8000ef2:	f06f 0301 	mvn.w	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	e037      	b.n	8000f6a <BSP_COM_Init+0x8e>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	491d      	ldr	r1, [pc, #116]	@ (8000f74 <BSP_COM_Init+0x98>)
 8000f00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f04:	491c      	ldr	r1, [pc, #112]	@ (8000f78 <BSP_COM_Init+0x9c>)
 8000f06:	2094      	movs	r0, #148	@ 0x94
 8000f08:	fb00 f303 	mul.w	r3, r0, r3
 8000f0c:	440b      	add	r3, r1
 8000f0e:	601a      	str	r2, [r3, #0]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2294      	movs	r2, #148	@ 0x94
 8000f14:	fb02 f303 	mul.w	r3, r2, r3
 8000f18:	4a17      	ldr	r2, [pc, #92]	@ (8000f78 <BSP_COM_Init+0x9c>)
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f869 	bl	8000ff4 <UART_MspInit>
    }

    if (status == BSP_ERROR_NONE)
    {
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      if (COM == COM1)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d110      	bne.n	8000f4a <BSP_COM_Init+0x6e>
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2294      	movs	r2, #148	@ 0x94
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	4a11      	ldr	r2, [pc, #68]	@ (8000f78 <BSP_COM_Init+0x9c>)
 8000f32:	4413      	add	r3, r2
 8000f34:	6839      	ldr	r1, [r7, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f828 	bl	8000f8c <MX_USART3_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d013      	beq.n	8000f6a <BSP_COM_Init+0x8e>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000f42:	f06f 0303 	mvn.w	r3, #3
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e00f      	b.n	8000f6a <BSP_COM_Init+0x8e>
        }
      }
      else /* COM = COM2 */
      {
        if (MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2294      	movs	r2, #148	@ 0x94
 8000f4e:	fb02 f303 	mul.w	r3, r2, r3
 8000f52:	4a09      	ldr	r2, [pc, #36]	@ (8000f78 <BSP_COM_Init+0x9c>)
 8000f54:	4413      	add	r3, r2
 8000f56:	6839      	ldr	r1, [r7, #0]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 f817 	bl	8000f8c <MX_USART3_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <BSP_COM_Init+0x8e>
        {
          status = BSP_ERROR_PERIPH_FAILURE;
 8000f64:	f06f 0303 	mvn.w	r3, #3
 8000f68:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    }
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return status;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	24000024 	.word	0x24000024
 8000f78:	240000bc 	.word	0x240000bc

08000f7c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff ff8d 	bl	8000ea0 <BSP_PB_Callback>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance          = COM_UART[COM1];
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <MX_USART3_Init+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate     = COM_Init->BaudRate;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode         = UART_MODE_TX_RX;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	220c      	movs	r2, #12
 8000faa:	615a      	str	r2, [r3, #20]
  huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	895b      	ldrh	r3, [r3, #10]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	891b      	ldrh	r3, [r3, #8]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	899b      	ldrh	r3, [r3, #12]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fd8:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f004 fb59 	bl	8005698 <HAL_UART_Init>
 8000fe6:	4603      	mov	r3, r0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	24000024 	.word	0x24000024

08000ff4 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(const UART_HandleTypeDef *huart)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b092      	sub	sp, #72	@ 0x48
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init = {0};
 8000ffc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  GPIO_TypeDef    *COM_TX_PORT[COMn] = {COM1_TX_GPIO_PORT};
 800100c:	4b3f      	ldr	r3, [pc, #252]	@ (800110c <UART_MspInit+0x118>)
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_TypeDef    *COM_RX_PORT[COMn] = {COM1_RX_GPIO_PORT};
 8001010:	4b3e      	ldr	r3, [pc, #248]	@ (800110c <UART_MspInit+0x118>)
 8001012:	62bb      	str	r3, [r7, #40]	@ 0x28
  const uint16_t   COM_TX_PIN[COMn]  = {COM1_TX_PIN};
 8001014:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001018:	84bb      	strh	r3, [r7, #36]	@ 0x24
  const uint16_t   COM_RX_PIN[COMn]  = {COM1_RX_PIN};
 800101a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800101e:	843b      	strh	r3, [r7, #32]
  const uint8_t    COM_TX_AF[COMn]   = {COM1_TX_AF};
 8001020:	2307      	movs	r3, #7
 8001022:	773b      	strb	r3, [r7, #28]
  const uint8_t    COM_RX_AF[COMn]   = {COM1_RX_AF};
 8001024:	2307      	movs	r3, #7
 8001026:	763b      	strb	r3, [r7, #24]
  COM_TypeDef      COM;

  /* Get COM according instance */
  if (huart->Instance == COM1_UART)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a38      	ldr	r2, [pc, #224]	@ (8001110 <UART_MspInit+0x11c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d168      	bne.n	8001104 <UART_MspInit+0x110>
  {
    COM = COM1;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    /* Enable COM and GPIO clocks */
    COM1_TX_GPIO_CLK_ENABLE();
 8001038:	4b36      	ldr	r3, [pc, #216]	@ (8001114 <UART_MspInit+0x120>)
 800103a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800103e:	4a35      	ldr	r2, [pc, #212]	@ (8001114 <UART_MspInit+0x120>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001048:	4b32      	ldr	r3, [pc, #200]	@ (8001114 <UART_MspInit+0x120>)
 800104a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
    COM1_RX_GPIO_CLK_ENABLE();
 8001052:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <UART_MspInit+0x120>)
 8001054:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001058:	4a2e      	ldr	r2, [pc, #184]	@ (8001114 <UART_MspInit+0x120>)
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001062:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <UART_MspInit+0x120>)
 8001064:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
    COM1_CLK_ENABLE();
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <UART_MspInit+0x120>)
 800106e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001072:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <UART_MspInit+0x120>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001078:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800107c:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <UART_MspInit+0x120>)
 800107e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  {
    return;
  }

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM_TX_PIN[COM];
 8001086:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	3348      	adds	r3, #72	@ 0x48
 800108e:	443b      	add	r3, r7
 8001090:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001094:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
 800109a:	2302      	movs	r3, #2
 800109c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_Init.Pull      = GPIO_PULLUP;
 800109e:	2301      	movs	r3, #1
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_Init.Alternate = COM_TX_AF[COM];
 80010a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010a6:	3348      	adds	r3, #72	@ 0x48
 80010a8:	443b      	add	r3, r7
 80010aa:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80010ae:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_GPIO_Init(COM_TX_PORT[COM], &GPIO_Init);
 80010b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	3348      	adds	r3, #72	@ 0x48
 80010b8:	443b      	add	r3, r7
 80010ba:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80010be:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fbd1 	bl	800186c <HAL_GPIO_Init>

  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM_RX_PIN[COM];
 80010ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	3348      	adds	r3, #72	@ 0x48
 80010d2:	443b      	add	r3, r7
 80010d4:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80010d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_Init.Alternate = COM_RX_AF[COM];
 80010da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010de:	3348      	adds	r3, #72	@ 0x48
 80010e0:	443b      	add	r3, r7
 80010e2:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80010e6:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_GPIO_Init(COM_RX_PORT[COM], &GPIO_Init);
 80010e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	3348      	adds	r3, #72	@ 0x48
 80010f0:	443b      	add	r3, r7
 80010f2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80010f6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fbb5 	bl	800186c <HAL_GPIO_Init>
 8001102:	e000      	b.n	8001106 <UART_MspInit+0x112>
    return;
 8001104:	bf00      	nop
}
 8001106:	3748      	adds	r7, #72	@ 0x48
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58020c00 	.word	0x58020c00
 8001110:	40004800 	.word	0x40004800
 8001114:	58024400 	.word	0x58024400

08001118 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001122:	2003      	movs	r0, #3
 8001124:	f000 fa02 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001128:	200f      	movs	r0, #15
 800112a:	f000 f80d 	bl	8001148 <HAL_InitTick>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d002      	beq.n	800113a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	e001      	b.n	800113e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800113a:	f7ff fc01 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113e:	79fb      	ldrb	r3, [r7, #7]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_InitTick+0x6c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d023      	beq.n	80011a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_InitTick+0x70>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_InitTick+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fa0d 	bl	8001592 <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10f      	bne.n	800119e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d809      	bhi.n	8001198 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f000 f9d9 	bl	8001542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001190:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_InitTick+0x74>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e007      	b.n	80011a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e004      	b.n	80011a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e001      	b.n	80011a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2400002c 	.word	0x2400002c
 80011b8:	24000000 	.word	0x24000000
 80011bc:	24000028 	.word	0x24000028

080011c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2400002c 	.word	0x2400002c
 80011e4:	24000158 	.word	0x24000158

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	24000158 	.word	0x24000158

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff ffee 	bl	80011e8 <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800121a:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffde 	bl	80011e8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2400002c 	.word	0x2400002c

08001248 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <HAL_SuspendTick+0x1c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_SuspendTick+0x1c>)
 8001252:	f023 0302 	bic.w	r3, r3, #2
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_SBS_EnableCompensationCell>:
  *            @arg SBS_IO_XSPI1_CELL Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL Compensation cell for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableCompensationCell(uint32_t Selection)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_SBS_EnableCompensationCell+0x24>)
 8001272:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001276:	4905      	ldr	r1, [pc, #20]	@ (800128c <HAL_SBS_EnableCompensationCell+0x24>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4313      	orrs	r3, r2
 800127c:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	58000400 	.word	0x58000400

08001290 <HAL_SBS_GetCompensationCellReadyStatus>:
  *            @arg SBS_IO_XSPI1_CELL_READY Compensation cell for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_CELL_READY Compensation cell for the I/O of the XSPI2
  * @retval Ready status (1 or 0)
  */
uint32_t HAL_SBS_GetCompensationCellReadyStatus(uint32_t Selection)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_COMPENSATION_CELL_READY(Selection));

  return (((SBS->CCCSR & Selection) == 0U) ? 0UL : 1UL);
 8001298:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <HAL_SBS_GetCompensationCellReadyStatus+0x28>)
 800129a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf14      	ite	ne
 80012a6:	2301      	movne	r3, #1
 80012a8:	2300      	moveq	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	58000400 	.word	0x58000400

080012bc <HAL_SBS_ConfigCompensationCell>:
  * @param  PmosValue In case SBS_IO_REGISTER_CODE is selected, it  provides the Pmos value
  *                   to apply in range 0 to 15 else this parameter is not used
  * @retval None
  */
void HAL_SBS_ConfigCompensationCell(uint32_t Selection, uint32_t Code, uint32_t NmosValue, uint32_t PmosValue)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SBS_COMPENSATION_CELL(Selection));
  assert_param(IS_SBS_IO_COMPENSATION_CODE(Code));

  if (Code == SBS_IO_REGISTER_CODE)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d121      	bne.n	8001314 <HAL_SBS_ConfigCompensationCell+0x58>
  {
    /* Check the parameters */
    assert_param(IS_SBS_IO_COMPENSATION_CELL_NMOS_VALUE(NmosValue));
    assert_param(IS_SBS_IO_COMPENSATION_CELL_PMOS_VALUE(PmosValue));

    offset = ((Selection == SBS_IO_ANALOG_CELL) ? 0U : ((Selection == SBS_IO_XSPI1_CELL) ? 8U : 16U));
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d006      	beq.n	80012e4 <HAL_SBS_ConfigCompensationCell+0x28>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d101      	bne.n	80012e0 <HAL_SBS_ConfigCompensationCell+0x24>
 80012dc:	2308      	movs	r3, #8
 80012de:	e002      	b.n	80012e6 <HAL_SBS_ConfigCompensationCell+0x2a>
 80012e0:	2310      	movs	r3, #16
 80012e2:	e000      	b.n	80012e6 <HAL_SBS_ConfigCompensationCell+0x2a>
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]

    MODIFY_REG(SBS->CCSWVALR, (0xFFU << offset), ((NmosValue << offset) | (PmosValue << (offset + 4U))));
 80012e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <HAL_SBS_ConfigCompensationCell+0xa4>)
 80012ea:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80012ee:	21ff      	movs	r1, #255	@ 0xff
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	401a      	ands	r2, r3
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	4099      	lsls	r1, r3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	3304      	adds	r3, #4
 8001304:	6838      	ldr	r0, [r7, #0]
 8001306:	fa00 f303 	lsl.w	r3, r0, r3
 800130a:	430b      	orrs	r3, r1
 800130c:	4914      	ldr	r1, [pc, #80]	@ (8001360 <HAL_SBS_ConfigCompensationCell+0xa4>)
 800130e:	4313      	orrs	r3, r2
 8001310:	f8c1 3118 	str.w	r3, [r1, #280]	@ 0x118
  }

  MODIFY_REG(SBS->CCCSR, (Selection << 1U), (Code << (POSITION_VAL(Selection) + 1U)));
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_SBS_ConfigCompensationCell+0xa4>)
 8001316:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	43db      	mvns	r3, r3
 8001320:	401a      	ands	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	613b      	str	r3, [r7, #16]
  return result;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_SBS_ConfigCompensationCell+0x80>
    return 32U;
 8001338:	2320      	movs	r3, #32
 800133a:	e003      	b.n	8001344 <HAL_SBS_ConfigCompensationCell+0x88>
  return __builtin_clz(value);
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	3301      	adds	r3, #1
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4904      	ldr	r1, [pc, #16]	@ (8001360 <HAL_SBS_ConfigCompensationCell+0xa4>)
 800134e:	4313      	orrs	r3, r2
 8001350:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 8001354:	bf00      	nop
 8001356:	3724      	adds	r7, #36	@ 0x24
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	58000400 	.word	0x58000400

08001364 <HAL_SBS_EnableIOSpeedOptimize>:
  *            @arg SBS_IO_XSPI1_HSLV High speed at low voltage for the I/O of the XSPI1
  *            @arg SBS_IO_XSPI2_HSLV High speed at low voltage for the I/O of the XSPI2
  * @retval None
  */
void HAL_SBS_EnableIOSpeedOptimize(uint32_t Selection)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_IOHSLV(Selection));

  SET_BIT(SBS->CCCSR, Selection);
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 800136e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001372:	4905      	ldr	r1, [pc, #20]	@ (8001388 <HAL_SBS_EnableIOSpeedOptimize+0x24>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4313      	orrs	r3, r2
 8001378:	f8c1 3110 	str.w	r3, [r1, #272]	@ 0x110
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	58000400 	.word	0x58000400

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	05fa0000 	.word	0x05fa0000

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	@ (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	@ (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	@ (800147c <__NVIC_SetPriority+0x50>)
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff29 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff40 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff90 	bl	8001480 <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5f 	bl	800142c <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32h7rsxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff33 	bl	80013f0 <__NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffa4 	bl	80014e8 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80015b4:	f3bf 8f5f 	dmb	sy
}
 80015b8:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
 80015ba:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <HAL_MPU_Enable+0x3c>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_MPU_Enable+0x40>)
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	4a08      	ldr	r2, [pc, #32]	@ (80015ec <HAL_MPU_Enable+0x40>)
 80015ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ce:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015d0:	f3bf 8f4f 	dsb	sy
}
 80015d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d6:	f3bf 8f6f 	isb	sy
}
 80015da:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed90 	.word	0xe000ed90
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80015f4:	f3bf 8f5f 	dmb	sy
}
 80015f8:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <HAL_MPU_Disable+0x34>)
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <HAL_MPU_Disable+0x34>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001604:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <HAL_MPU_Disable+0x38>)
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800160c:	f3bf 8f4f 	dsb	sy
}
 8001610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001612:	f3bf 8f6f 	isb	sy
}
 8001616:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	e000ed90 	.word	0xe000ed90

0800162c <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	785a      	ldrb	r2, [r3, #1]
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <HAL_MPU_ConfigRegion+0x88>)
 800163a:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <HAL_MPU_ConfigRegion+0x88>)
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <HAL_MPU_ConfigRegion+0x88>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <HAL_MPU_ConfigRegion+0x88>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	4a19      	ldr	r2, [pc, #100]	@ (80016b4 <HAL_MPU_ConfigRegion+0x88>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
 8001654:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <HAL_MPU_ConfigRegion+0x88>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7b1b      	ldrb	r3, [r3, #12]
 8001660:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7adb      	ldrb	r3, [r3, #11]
 8001666:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 8001668:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7a9b      	ldrb	r3, [r3, #10]
 800166e:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
 8001670:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7b5b      	ldrb	r3, [r3, #13]
 8001676:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
 8001678:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b9b      	ldrb	r3, [r3, #14]
 800167e:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
 8001680:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7bdb      	ldrb	r3, [r3, #15]
 8001686:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
 8001688:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7a5b      	ldrb	r3, [r3, #9]
 800168e:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
 8001690:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7a1b      	ldrb	r3, [r3, #8]
 8001696:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
 8001698:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 80016a0:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
 80016a2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
 80016a4:	6113      	str	r3, [r2, #16]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed90 	.word	0xe000ed90

080016b8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80016c0:	f7ff fd92 	bl	80011e8 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e06b      	b.n	80017a8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d008      	beq.n	80016ee <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2220      	movs	r2, #32
 80016e0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e05c      	b.n	80017a8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	695a      	ldr	r2, [r3, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0204 	orr.w	r2, r2, #4
 80016fc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2205      	movs	r2, #5
 8001702:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001706:	e020      	b.n	800174a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001708:	f7ff fd6e 	bl	80011e8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b05      	cmp	r3, #5
 8001714:	d919      	bls.n	800174a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	f043 0210 	orr.w	r2, r3, #16
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2203      	movs	r2, #3
 8001726:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800172e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800173a:	2201      	movs	r2, #1
 800173c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e02e      	b.n	80017a8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0d7      	beq.n	8001708 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0202 	orr.w	r2, r2, #2
 8001766:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2204      	movs	r2, #4
 800176c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8001778:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001792:	2201      	movs	r2, #1
 8001794:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	460b      	mov	r3, r1
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80017c2:	7afb      	ldrb	r3, [r7, #11]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d103      	bne.n	80017d0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	605a      	str	r2, [r3, #4]
      break;
 80017ce:	e002      	b.n	80017d6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	75fb      	strb	r3, [r7, #23]
      break;
 80017d4:	bf00      	nop
  }

  return status;
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e003      	b.n	8001800 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80017fe:	2300      	movs	r3, #0
  }
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	2201      	movs	r2, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	011a      	lsls	r2, r3, #4
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_EXTI_IRQHandler+0x5c>)
 8001836:	4413      	add	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4798      	blx	r3
    }
  }
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	58000088 	.word	0x58000088

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e139      	b.n	8001af0 <HAL_GPIO_Init+0x284>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 812b 	beq.w	8001aea <HAL_GPIO_Init+0x27e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b01      	cmp	r3, #1
 800189e:	d005      	beq.n	80018ac <HAL_GPIO_Init+0x40>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d130      	bne.n	800190e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e2:	2201      	movs	r2, #1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f003 0201 	and.w	r2, r3, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b03      	cmp	r3, #3
 8001918:	d017      	beq.n	800194a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d123      	bne.n	800199e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	6939      	ldr	r1, [r7, #16]
 800199a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0203 	and.w	r2, r3, #3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8085 	beq.w	8001aea <HAL_GPIO_Init+0x27e>
      {
        temp = SBS->EXTICR[position >> 2u];
 80019e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001b10 <HAL_GPIO_Init+0x2a4>)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	334c      	adds	r3, #76	@ 0x4c
 80019e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	0a9a      	lsrs	r2, r3, #10
 8001a08:	4b42      	ldr	r3, [pc, #264]	@ (8001b14 <HAL_GPIO_Init+0x2a8>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	f002 0203 	and.w	r2, r2, #3
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
 8001a1c:	493c      	ldr	r1, [pc, #240]	@ (8001b10 <HAL_GPIO_Init+0x2a4>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	334c      	adds	r3, #76	@ 0x4c
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x1e4>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x212>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8001ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f47f aebe 	bne.w	800187c <HAL_GPIO_Init+0x10>
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	58000400 	.word	0x58000400
 8001b14:	0029ff7f 	.word	0x0029ff7f

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_PWREx_ConfigSupply>:
  *        PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO and PWR_SMPS_1V8_SUPPLIES_EXT are used
  *        only for lines that supports SMPS regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Check if supply source was configured */
  if ((PWR->CSR2 & (PWR_CSR2_SDEN | PWR_CSR2_LDOEN | PWR_CSR2_BYPASS)) != (PWR_CSR2_SDEN | PWR_CSR2_LDOEN))
 8001b50:	4b25      	ldr	r3, [pc, #148]	@ (8001be8 <HAL_PWREx_ConfigSupply+0xa0>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	2b06      	cmp	r3, #6
 8001b5a:	d00a      	beq.n	8001b72 <HAL_PWREx_ConfigSupply+0x2a>
  {
    /* Check supply configuration */
    if ((PWR->CSR2 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b5c:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <HAL_PWREx_ConfigSupply+0xa0>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e038      	b.n	8001be0 <HAL_PWREx_ConfigSupply+0x98>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e036      	b.n	8001be0 <HAL_PWREx_ConfigSupply+0x98>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CSR2, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b72:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <HAL_PWREx_ConfigSupply+0xa0>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f023 021f 	bic.w	r2, r3, #31
 8001b7a:	491b      	ldr	r1, [pc, #108]	@ (8001be8 <HAL_PWREx_ConfigSupply+0xa0>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b82:	f7ff fb31 	bl	80011e8 <HAL_GetTick>
 8001b86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001b88:	e009      	b.n	8001b9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b8a:	f7ff fb2d 	bl	80011e8 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b98:	d901      	bls.n	8001b9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e020      	b.n	8001be0 <HAL_PWREx_ConfigSupply+0x98>
  while ((PWR->SR1 & PWR_SR1_ACTVOSRDY) == 0U)
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_PWREx_ConfigSupply+0xa0>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0ef      	beq.n	8001b8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b1e      	cmp	r3, #30
 8001bae:	d002      	beq.n	8001bb6 <HAL_PWREx_ConfigSupply+0x6e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b1d      	cmp	r3, #29
 8001bb4:	d113      	bne.n	8001bde <HAL_PWREx_ConfigSupply+0x96>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick();
 8001bb6:	f7ff fb17 	bl	80011e8 <HAL_GetTick>
 8001bba:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8001bbc:	e009      	b.n	8001bd2 <HAL_PWREx_ConfigSupply+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001bbe:	f7ff fb13 	bl	80011e8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bcc:	d901      	bls.n	8001bd2 <HAL_PWREx_ConfigSupply+0x8a>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e006      	b.n	8001be0 <HAL_PWREx_ConfigSupply+0x98>
    while ((PWR->CSR2 & PWR_CSR2_SDEXTRDY) == 0U)
 8001bd2:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_PWREx_ConfigSupply+0xa0>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0ef      	beq.n	8001bbe <HAL_PWREx_ConfigSupply+0x76>
      }
    }
  }
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	58024800 	.word	0x58024800

08001bec <HAL_PWREx_ControlVoltageScaling>:
  * @note When exiting from Stop mode or Standby mode, the Run mode voltage
  *       scaling is reset to the default VOS low value.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(VoltageScaling));

  /* Set the voltage range */
  MODIFY_REG(PWR->CSR4, PWR_CSR4_VOS, VoltageScaling);
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f023 0201 	bic.w	r2, r3, #1
 8001bfc:	490e      	ldr	r1, [pc, #56]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	614b      	str	r3, [r1, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c04:	f7ff faf0 	bl	80011e8 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 8001c0a:	e009      	b.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c0c:	f7ff faec 	bl	80011e8 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c1a:	d901      	bls.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x34>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e006      	b.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x42>
  while ((PWR->CSR4 & PWR_CSR4_VOSRDY) == 0U)
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ef      	beq.n	8001c0c <HAL_PWREx_ControlVoltageScaling+0x20>
    }
  }

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	58024800 	.word	0x58024800

08001c3c <HAL_PWREx_EnableXSPIM2>:
  * @note   The XSPIM_P2 supply must be stable prior to setting
            this bit.
  * @retval None.
  */
void HAL_PWREx_EnableXSPIM2(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CSR2, PWR_CSR2_EN_XSPIM2);
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_PWREx_EnableXSPIM2+0x1c>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_PWREx_EnableXSPIM2+0x1c>)
 8001c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	58024800 	.word	0x58024800

08001c5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t pllsrc;
  uint32_t pllrdy;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e328      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6e:	4b97      	ldr	r3, [pc, #604]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c76:	61fb      	str	r3, [r7, #28]
  pllsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c78:	4b94      	ldr	r3, [pc, #592]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	61bb      	str	r3, [r7, #24]
  pllrdy = RCC->CR & (RCC_CR_PLL1RDY | RCC_CR_PLL2RDY | RCC_CR_PLL3RDY);
 8001c82:	4b92      	ldr	r3, [pc, #584]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
 8001c8a:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 809c 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_OscConfig+0x50>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_OscConfig+0x5e>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSE)))
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d106      	bne.n	8001cba <HAL_RCC_OscConfig+0x5e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 808e 	bne.w	8001dd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e302      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x76>
 8001cc4:	4b81      	ldr	r3, [pc, #516]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a80      	ldr	r2, [pc, #512]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e058      	b.n	8001d84 <HAL_RCC_OscConfig+0x128>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d112      	bne.n	8001d00 <HAL_RCC_OscConfig+0xa4>
 8001cda:	4b7c      	ldr	r3, [pc, #496]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a7b      	ldr	r2, [pc, #492]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b79      	ldr	r3, [pc, #484]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a78      	ldr	r2, [pc, #480]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cec:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	4b76      	ldr	r3, [pc, #472]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a75      	ldr	r2, [pc, #468]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001cf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e041      	b.n	8001d84 <HAL_RCC_OscConfig+0x128>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d08:	d112      	bne.n	8001d30 <HAL_RCC_OscConfig+0xd4>
 8001d0a:	4b70      	ldr	r3, [pc, #448]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b6d      	ldr	r3, [pc, #436]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d1c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b6a      	ldr	r3, [pc, #424]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a69      	ldr	r2, [pc, #420]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e029      	b.n	8001d84 <HAL_RCC_OscConfig+0x128>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8001d38:	d112      	bne.n	8001d60 <HAL_RCC_OscConfig+0x104>
 8001d3a:	4b64      	ldr	r3, [pc, #400]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a63      	ldr	r2, [pc, #396]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b61      	ldr	r3, [pc, #388]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a60      	ldr	r2, [pc, #384]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b5e      	ldr	r3, [pc, #376]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a5d      	ldr	r2, [pc, #372]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e011      	b.n	8001d84 <HAL_RCC_OscConfig+0x128>
 8001d60:	4b5a      	ldr	r3, [pc, #360]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a59      	ldr	r2, [pc, #356]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b57      	ldr	r3, [pc, #348]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a56      	ldr	r2, [pc, #344]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b54      	ldr	r3, [pc, #336]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a53      	ldr	r2, [pc, #332]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001d7e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff fa30 	bl	80011e8 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d019      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x16a>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fa28 	bl	80011e8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	@ 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e28c      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da6:	4b49      	ldr	r3, [pc, #292]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x138>
 8001db2:	e00e      	b.n	8001dd2 <HAL_RCC_OscConfig+0x176>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001db4:	f7ff fa18 	bl	80011e8 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	@ 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x16a>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e27c      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 809e 	beq.w	8001f1c <HAL_RCC_OscConfig+0x2c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x196>
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d047      	beq.n	8001e7c <HAL_RCC_OscConfig+0x220>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSI)))
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d144      	bne.n	8001e7c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e260      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, calibration is allowed, divider update also unless used for any enabled PLL */
      else
      {
        /* HSI must not be used as reference clock for any enabled PLL clock source */
        tmpreg1 = (RCC->CR & RCC_CR_HSIDIV);
 8001dfe:	4b33      	ldr	r3, [pc, #204]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0318 	and.w	r3, r3, #24
 8001e06:	60fb      	str	r3, [r7, #12]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_OscConfig+0x1c6>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1c6>
            (tmpreg1 != RCC_OscInitStruct->HSIDiv))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e24e      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
        }

        assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

        /* Set the Internal High Speed oscillator new divider */
        __HAL_RCC_HSI_CONFIG(RCC_HSI_ON | RCC_OscInitStruct->HSIDiv);
 8001e22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0219 	bic.w	r2, r3, #25
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	4a26      	ldr	r2, [pc, #152]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6013      	str	r3, [r2, #0]

        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_OscConfig+0x1f6>
        {
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e3e:	4b23      	ldr	r3, [pc, #140]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	08db      	lsrs	r3, r3, #3
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	4a21      	ldr	r2, [pc, #132]	@ (8001ed0 <HAL_RCC_OscConfig+0x274>)
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <HAL_RCC_OscConfig+0x278>)
 8001e50:	6013      	str	r3, [r2, #0]
        }
        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e52:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f976 	bl	8001148 <HAL_InitTick>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e22c      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
        }
      }
      /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
      __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	061b      	lsls	r3, r3, #24
 8001e74:	4915      	ldr	r1, [pc, #84]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
 8001e7a:	e04f      	b.n	8001f1c <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d032      	beq.n	8001eea <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState | RCC_OscInitStruct->HSIDiv);
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 0219 	bic.w	r2, r3, #25
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68d9      	ldr	r1, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	4908      	ldr	r1, [pc, #32]	@ (8001ecc <HAL_RCC_OscConfig+0x270>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff f99a 	bl	80011e8 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb6:	e011      	b.n	8001edc <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff f996 	bl	80011e8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d90a      	bls.n	8001edc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1fa      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
 8001eca:	bf00      	nop
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	03d09000 	.word	0x03d09000
 8001ed4:	24000000 	.word	0x24000000
 8001ed8:	24000028 	.word	0x24000028
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001edc:	4b95      	ldr	r3, [pc, #596]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0e7      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x25c>
 8001ee8:	e018      	b.n	8001f1c <HAL_RCC_OscConfig+0x2c0>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eea:	4b92      	ldr	r3, [pc, #584]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a91      	ldr	r2, [pc, #580]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f977 	bl	80011e8 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001efe:	f7ff f973 	bl	80011e8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e1d7      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f10:	4b88      	ldr	r3, [pc, #544]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d045      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));

    /* When the CSI is used as system clock it will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d005      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2de>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2ea>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_CSI)))
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d105      	bne.n	8001f46 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if (RCC_OscInitStruct->CSIState == RCC_CSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d138      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x358>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e1bc      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d019      	beq.n	8001f82 <HAL_RCC_OscConfig+0x326>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f4e:	4b79      	ldr	r3, [pc, #484]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a78      	ldr	r2, [pc, #480]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f945 	bl	80011e8 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x318>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001f62:	f7ff f941 	bl	80011e8 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e1a5      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f74:	4b6f      	ldr	r3, [pc, #444]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x306>
 8001f80:	e018      	b.n	8001fb4 <HAL_RCC_OscConfig+0x358>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f82:	4b6c      	ldr	r3, [pc, #432]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a6b      	ldr	r2, [pc, #428]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f92b 	bl	80011e8 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001f96:	f7ff f927 	bl	80011e8 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e18b      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001fa8:	4b62      	ldr	r3, [pc, #392]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d036      	beq.n	800202e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d019      	beq.n	8001ffc <HAL_RCC_OscConfig+0x3a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fcc:	4a59      	ldr	r2, [pc, #356]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f908 	bl	80011e8 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x392>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001fdc:	f7ff f904 	bl	80011e8 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x392>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e168      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fee:	4b51      	ldr	r3, [pc, #324]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x380>
 8001ffa:	e018      	b.n	800202e <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffc:	4b4d      	ldr	r3, [pc, #308]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002000:	4a4c      	ldr	r2, [pc, #304]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff f8ee 	bl	80011e8 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002010:	f7ff f8ea 	bl	80011e8 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e14e      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002022:	4b44      	ldr	r3, [pc, #272]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	d036      	beq.n	80020a8 <HAL_RCC_OscConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d019      	beq.n	8002076 <HAL_RCC_OscConfig+0x41a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002042:	4b3c      	ldr	r3, [pc, #240]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a3b      	ldr	r2, [pc, #236]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002048:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800204c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800204e:	f7ff f8cb 	bl	80011e8 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x40c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002056:	f7ff f8c7 	bl	80011e8 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x40c>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e12b      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002068:	4b32      	ldr	r3, [pc, #200]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x3fa>
 8002074:	e018      	b.n	80020a8 <HAL_RCC_OscConfig+0x44c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002076:	4b2f      	ldr	r3, [pc, #188]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a2e      	ldr	r2, [pc, #184]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 800207c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002080:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002082:	f7ff f8b1 	bl	80011e8 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x440>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800208a:	f7ff f8ad 	bl	80011e8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e111      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800209c:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 809b 	beq.w	80021ec <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020b6:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <HAL_RCC_OscConfig+0x4dc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002138 <HAL_RCC_OscConfig+0x4dc>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c0:	6013      	str	r3, [r2, #0]

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d106      	bne.n	80020d8 <HAL_RCC_OscConfig+0x47c>
 80020ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ce:	4a19      	ldr	r2, [pc, #100]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d6:	e05a      	b.n	800218e <HAL_RCC_OscConfig+0x532>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d112      	bne.n	8002106 <HAL_RCC_OscConfig+0x4aa>
 80020e0:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e4:	4a13      	ldr	r2, [pc, #76]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f0:	4a10      	ldr	r2, [pc, #64]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020fe:	f023 0304 	bic.w	r3, r3, #4
 8002102:	6713      	str	r3, [r2, #112]	@ 0x70
 8002104:	e043      	b.n	800218e <HAL_RCC_OscConfig+0x532>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b05      	cmp	r3, #5
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x4e0>
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002112:	4a08      	ldr	r2, [pc, #32]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6713      	str	r3, [r2, #112]	@ 0x70
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211e:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002124:	6713      	str	r3, [r2, #112]	@ 0x70
 8002126:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212a:	4a02      	ldr	r2, [pc, #8]	@ (8002134 <HAL_RCC_OscConfig+0x4d8>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6713      	str	r3, [r2, #112]	@ 0x70
 8002132:	e02c      	b.n	800218e <HAL_RCC_OscConfig+0x532>
 8002134:	58024400 	.word	0x58024400
 8002138:	58024800 	.word	0x58024800
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b85      	cmp	r3, #133	@ 0x85
 8002142:	d112      	bne.n	800216a <HAL_RCC_OscConfig+0x50e>
 8002144:	4b60      	ldr	r3, [pc, #384]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	4a5f      	ldr	r2, [pc, #380]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002150:	4b5d      	ldr	r3, [pc, #372]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002154:	4a5c      	ldr	r2, [pc, #368]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800215a:	6713      	str	r3, [r2, #112]	@ 0x70
 800215c:	4b5a      	ldr	r3, [pc, #360]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002160:	4a59      	ldr	r2, [pc, #356]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	@ 0x70
 8002168:	e011      	b.n	800218e <HAL_RCC_OscConfig+0x532>
 800216a:	4b57      	ldr	r3, [pc, #348]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216e:	4a56      	ldr	r2, [pc, #344]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6713      	str	r3, [r2, #112]	@ 0x70
 8002176:	4b54      	ldr	r3, [pc, #336]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217a:	4a53      	ldr	r2, [pc, #332]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6713      	str	r3, [r2, #112]	@ 0x70
 8002182:	4b51      	ldr	r3, [pc, #324]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	4a50      	ldr	r2, [pc, #320]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002188:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800218c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d015      	beq.n	80021c2 <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7ff f827 	bl	80011e8 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x558>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff f823 	bl	80011e8 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e085      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b4:	4b44      	ldr	r3, [pc, #272]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <HAL_RCC_OscConfig+0x542>
 80021c0:	e014      	b.n	80021ec <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7ff f811 	bl	80011e8 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x584>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff f80d 	bl	80011e8 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e06f      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e0:	4b39      	ldr	r3, [pc, #228]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_OscConfig+0x56e>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if (RCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d042      	beq.n	800227a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	2b18      	cmp	r3, #24
 80021f8:	d131      	bne.n	800225e <HAL_RCC_OscConfig+0x602>
    {
      /* No PLL off possible */
      if (RCC_OscInitStruct->PLL1.PLLState == RCC_PLL_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x5aa>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e05c      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos);
 8002206:	4b30      	ldr	r3, [pc, #192]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002210:	60fb      	str	r3, [r7, #12]

        if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d02e      	beq.n	800227a <HAL_RCC_OscConfig+0x61e>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Disable PLL1FRACLE */
          __HAL_RCC_PLL1_FRACN_DISABLE();
 800221c:	4b2a      	ldr	r3, [pc, #168]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002220:	4a29      	ldr	r2, [pc, #164]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002222:	f023 0301 	bic.w	r3, r3, #1
 8002226:	62d3      	str	r3, [r2, #44]	@ 0x2c

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002228:	f7fe ffde 	bl	80011e8 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800222e:	bf00      	nop
 8002230:	f7fe ffda 	bl	80011e8 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4293      	cmp	r3, r2
 800223a:	d0f9      	beq.n	8002230 <HAL_RCC_OscConfig+0x5d4>
          {
            /* Do nothing */
          }

          /* Configure PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 800223e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002240:	4b22      	ldr	r3, [pc, #136]	@ (80022cc <HAL_RCC_OscConfig+0x670>)
 8002242:	4013      	ands	r3, r2
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002248:	00d2      	lsls	r2, r2, #3
 800224a:	491f      	ldr	r1, [pc, #124]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	634b      	str	r3, [r1, #52]	@ 0x34

          /* Enable PLL1FRACLE to latch new value . */
          __HAL_RCC_PLL1_FRACN_ENABLE();
 8002250:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	4a1c      	ldr	r2, [pc, #112]	@ (80022c8 <HAL_RCC_OscConfig+0x66c>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800225c:	e00d      	b.n	800227a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Initialize PLL1T to 1 to use common PLL initialization function */
      RCC_OscInitStruct->PLL1.PLLT = 1U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	645a      	str	r2, [r3, #68]	@ 0x44
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(RCC_OscInitStruct->PLL1)) != HAL_OK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3324      	adds	r3, #36	@ 0x24
 8002268:	4619      	mov	r1, r3
 800226a:	2000      	movs	r0, #0
 800226c:	f000 fc88 	bl	8002b80 <RCC_PLL_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e022      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL2.PLLState));

  if (RCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCC_OscConfig+0x63c>
  {
    if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(RCC_OscInitStruct->PLL2)) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	334c      	adds	r3, #76	@ 0x4c
 8002286:	4619      	mov	r1, r3
 8002288:	2001      	movs	r0, #1
 800228a:	f000 fc79 	bl	8002b80 <RCC_PLL_Config>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x63c>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL3.PLLState));

  if (RCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00e      	beq.n	80022be <HAL_RCC_OscConfig+0x662>
  {
    /* Initialize PLL3T to 1 to use common PLL initialization function */
    RCC_OscInitStruct->PLL3.PLLT = 1U;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(RCC_OscInitStruct->PLL3)) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3374      	adds	r3, #116	@ 0x74
 80022ac:	4619      	mov	r1, r3
 80022ae:	2002      	movs	r0, #2
 80022b0:	f000 fc66 	bl	8002b80 <RCC_PLL_Config>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x662>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x664>
    }
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	58024400 	.word	0x58024400
 80022cc:	ffff0007 	.word	0xffff0007

080022d0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e182      	b.n	80025ea <HAL_RCC_ClockConfig+0x31a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b8a      	ldr	r3, [pc, #552]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d910      	bls.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b87      	ldr	r3, [pc, #540]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80022fa:	4985      	ldr	r1, [pc, #532]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b83      	ldr	r3, [pc, #524]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e16a      	b.n	80025ea <HAL_RCC_ClockConfig+0x31a>
  }

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	4b7b      	ldr	r3, [pc, #492]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	429a      	cmp	r2, r3
 800232e:	d908      	bls.n	8002342 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002330:	4b78      	ldr	r3, [pc, #480]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f023 0207 	bic.w	r2, r3, #7
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4975      	ldr	r1, [pc, #468]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800233e:	4313      	orrs	r3, r2
 8002340:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	4b70      	ldr	r3, [pc, #448]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800235a:	429a      	cmp	r2, r3
 800235c:	d908      	bls.n	8002370 <HAL_RCC_ClockConfig+0xa0>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800235e:	4b6d      	ldr	r3, [pc, #436]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	496a      	ldr	r1, [pc, #424]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800236c:	4313      	orrs	r3, r2
 800236e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699a      	ldr	r2, [r3, #24]
 8002380:	4b64      	ldr	r3, [pc, #400]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002388:	429a      	cmp	r2, r3
 800238a:	d908      	bls.n	800239e <HAL_RCC_ClockConfig+0xce>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 800238c:	4b61      	ldr	r3, [pc, #388]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	495e      	ldr	r1, [pc, #376]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800239a:	4313      	orrs	r3, r2
 800239c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d010      	beq.n	80023cc <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d908      	bls.n	80023cc <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 80023ba:	4b56      	ldr	r3, [pc, #344]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4953      	ldr	r1, [pc, #332]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d010      	beq.n	80023fa <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d908      	bls.n	80023fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f023 020f 	bic.w	r2, r3, #15
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4947      	ldr	r1, [pc, #284]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d055      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    MODIFY_REG(RCC->CDCFGR, RCC_CDCFGR_CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002406:	4b43      	ldr	r3, [pc, #268]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f023 020f 	bic.w	r2, r3, #15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4940      	ldr	r1, [pc, #256]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002414:	4313      	orrs	r3, r2
 8002416:	618b      	str	r3, [r1, #24]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002420:	4b3c      	ldr	r3, [pc, #240]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d121      	bne.n	8002470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0dc      	b.n	80025ea <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002438:	4b36      	ldr	r3, [pc, #216]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d115      	bne.n	8002470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0d0      	b.n	80025ea <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002450:	4b30      	ldr	r3, [pc, #192]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0c4      	b.n	80025ea <HAL_RCC_ClockConfig+0x31a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002460:	4b2c      	ldr	r3, [pc, #176]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0bc      	b.n	80025ea <HAL_RCC_ClockConfig+0x31a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f023 0207 	bic.w	r2, r3, #7
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4925      	ldr	r1, [pc, #148]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 800247e:	4313      	orrs	r3, r2
 8002480:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002482:	f7fe feb1 	bl	80011e8 <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800248a:	f7fe fead 	bl	80011e8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0a4      	b.n	80025ea <HAL_RCC_ClockConfig+0x31a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d1eb      	bne.n	800248a <HAL_RCC_ClockConfig+0x1ba>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d208      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ce:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f023 020f 	bic.w	r2, r3, #15
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	490e      	ldr	r1, [pc, #56]	@ (8002514 <HAL_RCC_ClockConfig+0x244>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	61cb      	str	r3, [r1, #28]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d214      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80024f6:	4906      	ldr	r1, [pc, #24]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <HAL_RCC_ClockConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e06c      	b.n	80025ea <HAL_RCC_ClockConfig+0x31a>
 8002510:	52002000 	.word	0x52002000
 8002514:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_RCC_ClockConfig+0x276>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	4b32      	ldr	r3, [pc, #200]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	429a      	cmp	r2, r3
 8002532:	d208      	bcs.n	8002546 <HAL_RCC_ClockConfig+0x276>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002534:	4b2f      	ldr	r3, [pc, #188]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f023 0207 	bic.w	r2, r3, #7
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	492c      	ldr	r1, [pc, #176]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 8002542:	4313      	orrs	r3, r2
 8002544:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	4b27      	ldr	r3, [pc, #156]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800255e:	429a      	cmp	r2, r3
 8002560:	d208      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x2a4>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002562:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4921      	ldr	r1, [pc, #132]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 8002570:	4313      	orrs	r3, r2
 8002572:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699a      	ldr	r2, [r3, #24]
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800258c:	429a      	cmp	r2, r3
 800258e:	d208      	bcs.n	80025a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
 8002590:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4915      	ldr	r1, [pc, #84]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d010      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x300>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	4b10      	ldr	r3, [pc, #64]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d208      	bcs.n	80025d0 <HAL_RCC_ClockConfig+0x300>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
 80025be:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	490a      	ldr	r1, [pc, #40]	@ (80025f4 <HAL_RCC_ClockConfig+0x324>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable with the System CPU clock */
  SystemCoreClock = HAL_RCC_GetSysClockFreq();
 80025d0:	f000 f816 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4a08      	ldr	r2, [pc, #32]	@ (80025f8 <HAL_RCC_ClockConfig+0x328>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025da:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <HAL_RCC_ClockConfig+0x32c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fdb2 	bl	8001148 <HAL_InitTick>
 80025e4:	4603      	mov	r3, r0
 80025e6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80025e8:	7afb      	ldrb	r3, [r7, #11]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	58024400 	.word	0x58024400
 80025f8:	24000000 	.word	0x24000000
 80025fc:	24000028 	.word	0x24000028

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b08b      	sub	sp, #44	@ 0x2c
 8002604:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002606:	4baa      	ldr	r3, [pc, #680]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800260e:	2b18      	cmp	r3, #24
 8002610:	f200 8136 	bhi.w	8002880 <HAL_RCC_GetSysClockFreq+0x280>
 8002614:	a201      	add	r2, pc, #4	@ (adr r2, 800261c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	08002681 	.word	0x08002681
 8002620:	08002881 	.word	0x08002881
 8002624:	08002881 	.word	0x08002881
 8002628:	08002881 	.word	0x08002881
 800262c:	08002881 	.word	0x08002881
 8002630:	08002881 	.word	0x08002881
 8002634:	08002881 	.word	0x08002881
 8002638:	08002881 	.word	0x08002881
 800263c:	080026a7 	.word	0x080026a7
 8002640:	08002881 	.word	0x08002881
 8002644:	08002881 	.word	0x08002881
 8002648:	08002881 	.word	0x08002881
 800264c:	08002881 	.word	0x08002881
 8002650:	08002881 	.word	0x08002881
 8002654:	08002881 	.word	0x08002881
 8002658:	08002881 	.word	0x08002881
 800265c:	080026ad 	.word	0x080026ad
 8002660:	08002881 	.word	0x08002881
 8002664:	08002881 	.word	0x08002881
 8002668:	08002881 	.word	0x08002881
 800266c:	08002881 	.word	0x08002881
 8002670:	08002881 	.word	0x08002881
 8002674:	08002881 	.word	0x08002881
 8002678:	08002881 	.word	0x08002881
 800267c:	080026b3 	.word	0x080026b3
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002680:	4b8b      	ldr	r3, [pc, #556]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800268c:	4b88      	ldr	r3, [pc, #544]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	08db      	lsrs	r3, r3, #3
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	4a87      	ldr	r2, [pc, #540]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
 800269c:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
 800269e:	e0f2      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
      break;
 80026a4:	e0ef      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026a6:	4b84      	ldr	r3, [pc, #528]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2b8>)
 80026a8:	623b      	str	r3, [r7, #32]
      break;
 80026aa:	e0ec      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80026ac:	4b83      	ldr	r3, [pc, #524]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x2bc>)
 80026ae:	623b      	str	r3, [r7, #32]
      break;
 80026b0:	e0e9      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026b2:	4b7f      	ldr	r3, [pc, #508]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80026b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
 80026bc:	4b7c      	ldr	r3, [pc, #496]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80026be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026c6:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026c8:	4b79      	ldr	r3, [pc, #484]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80026ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
 80026d2:	4b77      	ldr	r3, [pc, #476]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80026d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d6:	08db      	lsrs	r3, r3, #3
 80026d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ea:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80c2 	beq.w	800287a <HAL_RCC_GetSysClockFreq+0x27a>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d064      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x1c6>
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	f200 8083 	bhi.w	800280a <HAL_RCC_GetSysClockFreq+0x20a>
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x112>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d038      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x182>
 8002710:	e07b      	b.n	800280a <HAL_RCC_GetSysClockFreq+0x20a>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002712:	4b67      	ldr	r3, [pc, #412]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d02d      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800271e:	4b64      	ldr	r3, [pc, #400]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	08db      	lsrs	r3, r3, #3
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	4a62      	ldr	r2, [pc, #392]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002748:	4b59      	ldr	r3, [pc, #356]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002758:	ed97 6a04 	vldr	s12, [r7, #16]
 800275c:	eddf 5a58 	vldr	s11, [pc, #352]	@ 80028c0 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002768:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800276c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
 8002778:	e069      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002780:	e065      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800278c:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>
 8002790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002794:	4b46      	ldr	r3, [pc, #280]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279c:	ee07 3a90 	vmov	s15, r3
 80027a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80027a8:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80028c0 <HAL_RCC_GetSysClockFreq+0x2c0>
 80027ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 80027c4:	e043      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	ee07 3a90 	vmov	s15, r3
 80027cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80028c8 <HAL_RCC_GetSysClockFreq+0x2c8>
 80027d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d8:	4b35      	ldr	r3, [pc, #212]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80027ec:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80028c0 <HAL_RCC_GetSysClockFreq+0x2c0>
 80027f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002804:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 8002808:	e021      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002814:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80028c4 <HAL_RCC_GetSysClockFreq+0x2c4>
 8002818:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800281c:	4b24      	ldr	r3, [pc, #144]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002824:	ee07 3a90 	vmov	s15, r3
 8002828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800282c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002830:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80028c0 <HAL_RCC_GetSysClockFreq+0x2c0>
 8002834:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002838:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800283c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002848:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
 800284c:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
 800284e:	4b18      	ldr	r3, [pc, #96]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	0a5b      	lsrs	r3, r3, #9
 8002854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002858:	3301      	adds	r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002866:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800286a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800286e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002872:	ee17 3a90 	vmov	r3, s15
 8002876:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002878:	e005      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
      break;
 800287e:	e002      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
 8002880:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2b8>)
 8002882:	623b      	str	r3, [r7, #32]
      break;
 8002884:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
 8002886:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b07      	cmp	r3, #7
 8002894:	d905      	bls.n	80028a2 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3b07      	subs	r3, #7
 800289a:	6a3a      	ldr	r2, [r7, #32]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80028a2:	6a3b      	ldr	r3, [r7, #32]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	372c      	adds	r7, #44	@ 0x2c
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	58024400 	.word	0x58024400
 80028b4:	03d09000 	.word	0x03d09000
 80028b8:	003d0900 	.word	0x003d0900
 80028bc:	016e3600 	.word	0x016e3600
 80028c0:	46000000 	.word	0x46000000
 80028c4:	4a742400 	.word	0x4a742400
 80028c8:	4bb71b00 	.word	0x4bb71b00

080028cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 80028d2:	4a10      	ldr	r2, [pc, #64]	@ (8002914 <HAL_RCC_GetHCLKFreq+0x48>)
 80028d4:	463b      	mov	r3, r7
 80028d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028da:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
 80028de:	f7ff fe8f 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80028e2:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <HAL_RCC_GetHCLKFreq+0x4c>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d909      	bls.n	8002908 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	3b08      	subs	r3, #8
 80028f8:	3310      	adds	r3, #16
 80028fa:	443b      	add	r3, r7
 80028fc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002900:	461a      	mov	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	40d3      	lsrs	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
 8002908:	68fb      	ldr	r3, [r7, #12]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	08009aec 	.word	0x08009aec
 8002918:	58024400 	.word	0x58024400

0800291c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK1 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8002922:	f7ff ffd3 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8002926:	6078      	str	r0, [r7, #4]
  /* APB1 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE1) >> RCC_APBCFGR_PPRE1_Pos;
 8002928:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_GetPCLK1Freq+0x34>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d905      	bls.n	8002944 <HAL_RCC_GetPCLK1Freq+0x28>
  {
    clock = clock >> (prescaler - 3U);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	3b03      	subs	r3, #3
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 8002944:	687b      	ldr	r3, [r7, #4]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	58024400 	.word	0x58024400

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK2 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 800295a:	f7ff ffb7 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 800295e:	6078      	str	r0, [r7, #4]
  /* APB2 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE2) >> RCC_APBCFGR_PPRE2_Pos;
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <HAL_RCC_GetPCLK2Freq+0x34>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d905      	bls.n	800297e <HAL_RCC_GetPCLK2Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	3b03      	subs	r3, #3
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 800297e:	687b      	ldr	r3, [r7, #4]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	58024400 	.word	0x58024400

0800298c <HAL_RCC_GetPCLK4Freq>:
  * @note   Each time PCLK4 changes, this function must be called to update the
  *         right PCLK4 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK4 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK4Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  /* Get HCLK source and compute PCLK4 frequency ---------------------------*/
  clock = HAL_RCC_GetHCLKFreq();
 8002992:	f7ff ff9b 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8002996:	6078      	str	r0, [r7, #4]
  /* APB4 prescaler */
  prescaler = (RCC->APBCFGR & RCC_APBCFGR_PPRE4) >> RCC_APBCFGR_PPRE4_Pos;
 8002998:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <HAL_RCC_GetPCLK4Freq+0x34>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	603b      	str	r3, [r7, #0]
  if (prescaler >= 4U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d905      	bls.n	80029b6 <HAL_RCC_GetPCLK4Freq+0x2a>
  {
    clock = clock >> (prescaler - 3U);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	607b      	str	r3, [r7, #4]
  }
  return (clock);
 80029b6:	687b      	ldr	r3, [r7, #4]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	58024400 	.word	0x58024400

080029c4 <HAL_RCC_GetPLL1QFreq>:
/**
  * @brief  Return the PLL1Q frequency.
  * @retval PLL1Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL1QFreq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL1Q divider */
  pllq = ((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVQ) >> RCC_PLL1DIVR1_DIVQ_Pos) + 1U;
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_RCC_GetPLL1QFreq+0x28>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	0c1b      	lsrs	r3, r3, #16
 80029d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d4:	3301      	adds	r3, #1
 80029d6:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL1Q one */
  return ((uint32_t)RCC_PLL1_GetVCOOutputFreq() / pllq);
 80029d8:	f000 fa28 	bl	8002e2c <RCC_PLL1_GetVCOOutputFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	58024400 	.word	0x58024400

080029f0 <HAL_RCC_GetPLL2PFreq>:
/**
  * @brief  Return the PLL2P frequency.
  * @retval PLL2P frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2PFreq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
  uint32_t pllp;

  /* PLL2P divider */
  pllp = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVP) >> RCC_PLL2DIVR1_DIVP_Pos) + 1U;
 80029f6:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <HAL_RCC_GetPLL2PFreq+0x28>)
 80029f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fa:	0a5b      	lsrs	r3, r3, #9
 80029fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a00:	3301      	adds	r3, #1
 8002a02:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2P one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllp);
 8002a04:	f000 fa98 	bl	8002f38 <RCC_PLL2_GetVCOOutputFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	58024400 	.word	0x58024400

08002a1c <HAL_RCC_GetPLL2QFreq>:
/**
  * @brief  Return the PLL2Q frequency.
  * @retval PLL2Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2QFreq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL2Q divider */
  pllq = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVQ) >> RCC_PLL2DIVR1_DIVQ_Pos) + 1U;
 8002a22:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <HAL_RCC_GetPLL2QFreq+0x28>)
 8002a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a26:	0c1b      	lsrs	r3, r3, #16
 8002a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2Q one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllq);
 8002a30:	f000 fa82 	bl	8002f38 <RCC_PLL2_GetVCOOutputFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	58024400 	.word	0x58024400

08002a48 <HAL_RCC_GetPLL2RFreq>:
/**
  * @brief  Return the PLL2R frequency.
  * @retval PLL2R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2RFreq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL2R divider */
  pllr = ((RCC->PLL2DIVR1 & RCC_PLL2DIVR1_DIVR) >> RCC_PLL2DIVR1_DIVR_Pos) + 1U;
 8002a4e:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <HAL_RCC_GetPLL2RFreq+0x28>)
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	0e1b      	lsrs	r3, r3, #24
 8002a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a58:	3301      	adds	r3, #1
 8002a5a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2R one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllr);
 8002a5c:	f000 fa6c 	bl	8002f38 <RCC_PLL2_GetVCOOutputFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	58024400 	.word	0x58024400

08002a74 <HAL_RCC_GetPLL2SFreq>:
/**
  * @brief  Return the PLL2S frequency.
  * @retval PLL2S frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2SFreq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  uint32_t plls;

  /* PLL2S divider */
  plls = ((RCC->PLL2DIVR2 & RCC_PLL2DIVR2_DIVS) >> RCC_PLL2DIVR2_DIVS_Pos) + 1U;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_RCC_GetPLL2SFreq+0x28>)
 8002a7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	3301      	adds	r3, #1
 8002a86:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2R one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / plls);
 8002a88:	f000 fa56 	bl	8002f38 <RCC_PLL2_GetVCOOutputFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	58024400 	.word	0x58024400

08002aa0 <HAL_RCC_GetPLL2TFreq>:
/**
  * @brief  Return the PLL2T frequency.
  * @retval PLL2T frequency in Hz
  */
uint32_t HAL_RCC_GetPLL2TFreq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
  uint32_t pllt;

  /* PLL2T divider */
  pllt = ((RCC->PLL2DIVR2 & RCC_PLL2DIVR2_DIVT) >> RCC_PLL2DIVR2_DIVT_Pos) + 1U;
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_RCC_GetPLL2TFreq+0x2c>)
 8002aa8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL2T one */
  return ((uint32_t)RCC_PLL2_GetVCOOutputFreq() / pllt);
 8002ab6:	f000 fa3f 	bl	8002f38 <RCC_PLL2_GetVCOOutputFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	58024400 	.word	0x58024400

08002ad0 <HAL_RCC_GetPLL3PFreq>:
/**
  * @brief  Return the PLL3P frequency.
  * @retval PLL3P frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3PFreq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  uint32_t pllp;

  /* PLL3P divider */
  pllp = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVP) >> RCC_PLL3DIVR1_DIVP_Pos) + 1U;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <HAL_RCC_GetPLL3PFreq+0x28>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	0a5b      	lsrs	r3, r3, #9
 8002adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3P one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllp);
 8002ae4:	f000 faae 	bl	8003044 <RCC_PLL3_GetVCOOutputFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	58024400 	.word	0x58024400

08002afc <HAL_RCC_GetPLL3QFreq>:
/**
  * @brief  Return the PLL3Q frequency.
  * @retval PLL3Q frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3QFreq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  uint32_t pllq;

  /* PLL3Q divider */
  pllq = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVQ) >> RCC_PLL3DIVR1_DIVQ_Pos) + 1U;
 8002b02:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <HAL_RCC_GetPLL3QFreq+0x28>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3Q one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllq);
 8002b10:	f000 fa98 	bl	8003044 <RCC_PLL3_GetVCOOutputFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	58024400 	.word	0x58024400

08002b28 <HAL_RCC_GetPLL3RFreq>:
/**
  * @brief  Return the PLL3R frequency.
  * @retval PLL3R frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3RFreq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t pllr;

  /* PLL3R divider */
  pllr = ((RCC->PLL3DIVR1 & RCC_PLL3DIVR1_DIVR) >> RCC_PLL3DIVR1_DIVR_Pos) + 1U;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <HAL_RCC_GetPLL3RFreq+0x28>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	0e1b      	lsrs	r3, r3, #24
 8002b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b38:	3301      	adds	r3, #1
 8002b3a:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3R one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / pllr);
 8002b3c:	f000 fa82 	bl	8003044 <RCC_PLL3_GetVCOOutputFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	58024400 	.word	0x58024400

08002b54 <HAL_RCC_GetPLL3SFreq>:
/**
  * @brief  Return the PLL3S frequency.
  * @retval PLL3S frequency in Hz
  */
uint32_t HAL_RCC_GetPLL3SFreq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
  uint32_t plls;

  /* PLL3S divider */
  plls = ((RCC->PLL3DIVR2 & RCC_PLL3DIVR2_DIVS) >> RCC_PLL3DIVR2_DIVS_Pos) + 1U;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <HAL_RCC_GetPLL3SFreq+0x28>)
 8002b5c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	3301      	adds	r3, #1
 8002b66:	607b      	str	r3, [r7, #4]

  /* Compute VCO output frequency and return PLL3S one */
  return ((uint32_t)RCC_PLL3_GetVCOOutputFreq() / plls);
 8002b68:	f000 fa6c 	bl	8003044 <RCC_PLL3_GetVCOOutputFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	58024400 	.word	0x58024400

08002b80 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	@ 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_divr1_reg;
  __IO uint32_t *p_rcc_pll_divr2_reg;
  __IO uint32_t *p_rcc_pll_fracr_reg;
  HAL_StatusTypeDef ret = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tickstart;
  uint32_t pllsrc;
  uint32_t pllvco;

  p_rcc_pll_divr1_reg = &(RCC->PLL1DIVR1) + (((uint32_t)0x02) * PLLnumber);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	00da      	lsls	r2, r3, #3
 8002b94:	4b9a      	ldr	r3, [pc, #616]	@ (8002e00 <RCC_PLL_Config+0x280>)
 8002b96:	4413      	add	r3, r2
 8002b98:	61fb      	str	r3, [r7, #28]
  p_rcc_pll_divr2_reg = &(RCC->PLL1DIVR2) + (((uint32_t)0x01) * PLLnumber);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	009a      	lsls	r2, r3, #2
 8002b9e:	4b99      	ldr	r3, [pc, #612]	@ (8002e04 <RCC_PLL_Config+0x284>)
 8002ba0:	4413      	add	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]

  /* Disable the post-dividers */
  CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1PEN | RCC_PLLCFGR_PLL1QEN | RCC_PLLCFGR_PLL1REN | RCC_PLLCFGR_PLL1SEN |
 8002ba4:	4b98      	ldr	r3, [pc, #608]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002ba6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	4a92      	ldr	r2, [pc, #584]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
                           0x00000200U) /* Hardcoded because no definition in CMSIS */
            << ((RCC_PLLCFGR_PLL2PEN_Pos - RCC_PLLCFGR_PLL1PEN_Pos)*PLLnumber));

  /* Ensure PLLx is disabled */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002bc4:	4b90      	ldr	r3, [pc, #576]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	498c      	ldr	r1, [pc, #560]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bdc:	f7fe fb04 	bl	80011e8 <HAL_GetTick>
 8002be0:	6178      	str	r0, [r7, #20]

  /* Wait till PLLx is disabled */
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 8002be2:	e008      	b.n	8002bf6 <RCC_PLL_Config+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002be4:	f7fe fb00 	bl	80011e8 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b32      	cmp	r3, #50	@ 0x32
 8002bf0:	d901      	bls.n	8002bf6 <RCC_PLL_Config+0x76>
    {
      return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0ff      	b.n	8002df6 <RCC_PLL_Config+0x276>
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
 8002bf6:	4b84      	ldr	r3, [pc, #528]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1eb      	bne.n	8002be4 <RCC_PLL_Config+0x64>
    }
  }

  if (pPLLInit->PLLState == RCC_PLL_ON)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	f040 80dd 	bne.w	8002dd0 <RCC_PLL_Config+0x250>
    assert_param(IS_RCC_PLLQ_VALUE(pPLLInit->PLLQ));
    assert_param(IS_RCC_PLLR_VALUE(pPLLInit->PLLR));
    assert_param(IS_RCC_PLLS_VALUE(pPLLInit->PLLS));
    assert_param(IS_RCC_PLLT_VALUE(pPLLInit->PLLT));

    pllsrc = pPLLInit->PLLSource;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	613b      	str	r3, [r7, #16]

    /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
    if (pllsrc == RCC_PLLSOURCE_HSI)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <RCC_PLL_Config+0xb6>
    {
      /* Clock source is HSI or HSI/HSIDIV */
      pllvco = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002c22:	4b79      	ldr	r3, [pc, #484]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	4a77      	ldr	r2, [pc, #476]	@ (8002e0c <RCC_PLL_Config+0x28c>)
 8002c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c34:	e007      	b.n	8002c46 <RCC_PLL_Config+0xc6>
    }
    else if (pllsrc == RCC_PLLSOURCE_HSE)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d102      	bne.n	8002c42 <RCC_PLL_Config+0xc2>
    {
      /* Clock source is HSE */
      pllvco = HSE_VALUE;
 8002c3c:	4b74      	ldr	r3, [pc, #464]	@ (8002e10 <RCC_PLL_Config+0x290>)
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c40:	e001      	b.n	8002c46 <RCC_PLL_Config+0xc6>
    }
    else
    {
      /* Clock source is CSI */
      pllvco = CSI_VALUE;
 8002c42:	4b74      	ldr	r3, [pc, #464]	@ (8002e14 <RCC_PLL_Config+0x294>)
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Compute VCO input frequency depending on M divider */
    pllvco = (pllvco / pPLLInit->PLLM);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
    assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllvco));

    if (pllvco >= RCC_PLL_INPUTRANGE2_FREQMAX)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	4a70      	ldr	r2, [pc, #448]	@ (8002e18 <RCC_PLL_Config+0x298>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d302      	bcc.n	8002c60 <RCC_PLL_Config+0xe0>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE3 | RCC_PLL_VCO_HIGH;
 8002c5a:	2318      	movs	r3, #24
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c5e:	e00f      	b.n	8002c80 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE1_FREQMAX)
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	4a6e      	ldr	r2, [pc, #440]	@ (8002e1c <RCC_PLL_Config+0x29c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d902      	bls.n	8002c6e <RCC_PLL_Config+0xee>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE2 | RCC_PLL_VCO_HIGH;
 8002c68:	2310      	movs	r3, #16
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6c:	e008      	b.n	8002c80 <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE0_FREQMAX)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	4a6b      	ldr	r2, [pc, #428]	@ (8002e20 <RCC_PLL_Config+0x2a0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d902      	bls.n	8002c7c <RCC_PLL_Config+0xfc>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE1 | RCC_PLL_VCO_HIGH;
 8002c76:	2308      	movs	r3, #8
 8002c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c7a:	e001      	b.n	8002c80 <RCC_PLL_Config+0x100>
    }
    else
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE0 | RCC_PLL_VCO_LOW;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    pllvco = (pllvco << ((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos) * PLLnumber));
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Configure PLL source and PLLM divider */
    MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | (RCC_PLLCKSELR_DIVM1 << ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))), \
 8002c94:	4b5c      	ldr	r3, [pc, #368]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002c96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	f043 0303 	orr.w	r3, r3, #3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	401a      	ands	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	4099      	lsls	r1, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	4952      	ldr	r1, [pc, #328]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	628b      	str	r3, [r1, #40]	@ 0x28
               pllsrc | (pPLLInit->PLLM << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))));

    if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) != pllsrc)
 8002cc2:	4b51      	ldr	r3, [pc, #324]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <RCC_PLL_Config+0x154>
    {
      /* There is another PLL activated with another source */
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e090      	b.n	8002df6 <RCC_PLL_Config+0x276>
    }

    /* Configure VCO input range, VCO selection and clear FRACEN */
    MODIFY_REG(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1RGE | RCC_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN) << (((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos)*PLLnumber)), \
 8002cd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002cd6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	221b      	movs	r2, #27
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	ea01 0203 	and.w	r2, r1, r3
 8002cf0:	4945      	ldr	r1, [pc, #276]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	62cb      	str	r3, [r1, #44]	@ 0x2c
               pllvco);

    /* Configure PLLN, PLLP, PLLQ, PLLR, PLLS and PLLT dividers */
    WRITE_REG(*p_rcc_pll_divr1_reg, ((pPLLInit->PLLN - 1U) |
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	1e5a      	subs	r2, r3, #1
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	025b      	lsls	r3, r3, #9
 8002d06:	431a      	orrs	r2, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	431a      	orrs	r2, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	061b      	lsls	r3, r3, #24
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLP - 1U) << RCC_PLL1DIVR1_DIVP_Pos) |
                                     ((pPLLInit->PLLQ - 1U) << RCC_PLL1DIVR1_DIVQ_Pos) |
                                     ((pPLLInit->PLLR - 1U) << RCC_PLL1DIVR1_DIVR_Pos)));
    WRITE_REG(*p_rcc_pll_divr2_reg, ((pPLLInit->PLLS - 1U) |
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	1e5a      	subs	r2, r3, #1
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLT - 1U) << RCC_PLL2DIVR2_DIVT_Pos)));

    if (PLLnumber == RCC_PLL1_CONFIG)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d105      	bne.n	8002d46 <RCC_PLL_Config+0x1c6>
    {
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1PEN);
 8002d3a:	4b33      	ldr	r3, [pc, #204]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	4a32      	ldr	r2, [pc, #200]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002d40:	f043 0320 	orr.w	r3, r3, #32
 8002d44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    if (pPLLInit->PLLFractional != 0U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01c      	beq.n	8002d88 <RCC_PLL_Config+0x208>
    {
      assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));

      p_rcc_pll_fracr_reg = &(RCC->PLL1FRACR) + (((uint32_t)0x02) * PLLnumber);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	00da      	lsls	r2, r3, #3
 8002d52:	4b34      	ldr	r3, [pc, #208]	@ (8002e24 <RCC_PLL_Config+0x2a4>)
 8002d54:	4413      	add	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

      /* Configure PLLFRACN */
      MODIFY_REG(*p_rcc_pll_fracr_reg, RCC_PLL1FRACR_FRACN, pPLLInit->PLLFractional << RCC_PLL1FRACR_FRACN_Pos);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b32      	ldr	r3, [pc, #200]	@ (8002e28 <RCC_PLL_Config+0x2a8>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d64:	00d2      	lsls	r2, r2, #3
 8002d66:	431a      	orrs	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	601a      	str	r2, [r3, #0]

      /* Enable PLLFRACLE */
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN << ((RCC_PLLCFGR_PLL2FRACEN_Pos - RCC_PLLCFGR_PLL1FRACEN_Pos)*PLLnumber));
 8002d6c:	4b26      	ldr	r3, [pc, #152]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002d6e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	4a21      	ldr	r2, [pc, #132]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002d84:	430b      	orrs	r3, r1
 8002d86:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable the PLLx */
    SET_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
 8002d88:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	491b      	ldr	r1, [pc, #108]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9e:	f7fe fa23 	bl	80011e8 <HAL_GetTick>
 8002da2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8002da4:	e008      	b.n	8002db8 <RCC_PLL_Config+0x238>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002da6:	f7fe fa1f 	bl	80011e8 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b32      	cmp	r3, #50	@ 0x32
 8002db2:	d901      	bls.n	8002db8 <RCC_PLL_Config+0x238>
      {
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e01e      	b.n	8002df6 <RCC_PLL_Config+0x276>
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
 8002db8:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0eb      	beq.n	8002da6 <RCC_PLL_Config+0x226>
 8002dce:	e010      	b.n	8002df2 <RCC_PLL_Config+0x272>
    }
  }
  else
  {
    /* Disable outputs to save power when PLLx is off */
    MODIFY_REG(RCC->PLLCKSELR, ((RCC_PLLCKSELR_DIVM1 << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber)))
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002dd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	3304      	adds	r3, #4
 8002dda:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	f043 0303 	orr.w	r3, r3, #3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	4013      	ands	r3, r2
 8002dea:	4a07      	ldr	r2, [pc, #28]	@ (8002e08 <RCC_PLL_Config+0x288>)
 8002dec:	f043 0303 	orr.w	r3, r3, #3
 8002df0:	6293      	str	r3, [r2, #40]	@ 0x28
                                | RCC_PLLCKSELR_PLLSRC), RCC_PLLSOURCE_NONE);
  }

  return ret;
 8002df2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3728      	adds	r7, #40	@ 0x28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	58024430 	.word	0x58024430
 8002e04:	580244c0 	.word	0x580244c0
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	03d09000 	.word	0x03d09000
 8002e10:	016e3600 	.word	0x016e3600
 8002e14:	003d0900 	.word	0x003d0900
 8002e18:	007a1200 	.word	0x007a1200
 8002e1c:	003d08ff 	.word	0x003d08ff
 8002e20:	001e847f 	.word	0x001e847f
 8002e24:	58024434 	.word	0x58024434
 8002e28:	ffff0007 	.word	0xffff0007

08002e2c <RCC_PLL1_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL1 VCO output frequency
  * @retval Value of PLL1 VCO output frequency
  */
static uint32_t RCC_PLL1_GetVCOOutputFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b089      	sub	sp, #36	@ 0x24
 8002e30:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL1 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 8002e32:	4b3c      	ldr	r3, [pc, #240]	@ (8002f24 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL1DIVR1;
 8002e38:	4b3a      	ldr	r3, [pc, #232]	@ (8002f24 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL1 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e46:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL1DIVR1_DIVN) + 1U;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4e:	3301      	adds	r3, #1
 8002e50:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <RCC_PLL1_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e05c      	b.n	8002f16 <RCC_PLL1_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) != 0U)
 8002e5c:	4b31      	ldr	r3, [pc, #196]	@ (8002f24 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <RCC_PLL1_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos;
 8002e68:	4b2e      	ldr	r3, [pc, #184]	@ (8002f24 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e001      	b.n	8002e7a <RCC_PLL1_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d019      	beq.n	8002eb8 <RCC_PLL1_GetVCOOutputFreq+0x8c>
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d81d      	bhi.n	8002ec4 <RCC_PLL1_GetVCOOutputFreq+0x98>
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <RCC_PLL1_GetVCOOutputFreq+0x66>
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d016      	beq.n	8002ebe <RCC_PLL1_GetVCOOutputFreq+0x92>
 8002e90:	e018      	b.n	8002ec4 <RCC_PLL1_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL1 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002e92:	4b24      	ldr	r3, [pc, #144]	@ (8002f24 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <RCC_PLL1_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002e9e:	4b21      	ldr	r3, [pc, #132]	@ (8002f24 <RCC_PLL1_GetVCOOutputFreq+0xf8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	08db      	lsrs	r3, r3, #3
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f28 <RCC_PLL1_GetVCOOutputFreq+0xfc>)
 8002eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002eae:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002eb0:	e00b      	b.n	8002eca <RCC_PLL1_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
      break;
 8002eb6:	e008      	b.n	8002eca <RCC_PLL1_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL1 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f2c <RCC_PLL1_GetVCOOutputFreq+0x100>)
 8002eba:	61fb      	str	r3, [r7, #28]
      break;
 8002ebc:	e005      	b.n	8002eca <RCC_PLL1_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL1 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8002f30 <RCC_PLL1_GetVCOOutputFreq+0x104>)
 8002ec0:	61fb      	str	r3, [r7, #28]
      break;
 8002ec2:	e002      	b.n	8002eca <RCC_PLL1_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
      break;
 8002ec8:	bf00      	nop
  }
  
  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8002ef6:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8002f34 <RCC_PLL1_GetVCOOutputFreq+0x108>
 8002efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8002f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f12:	ee17 3a90 	vmov	r3, s15
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	@ 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	58024400 	.word	0x58024400
 8002f28:	03d09000 	.word	0x03d09000
 8002f2c:	016e3600 	.word	0x016e3600
 8002f30:	003d0900 	.word	0x003d0900
 8002f34:	46000000 	.word	0x46000000

08002f38 <RCC_PLL2_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_PLL2_GetVCOOutputFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	@ 0x24
 8002f3c:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL2 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 8002f3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003030 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL2DIVR1;
 8002f44:	4b3a      	ldr	r3, [pc, #232]	@ (8003030 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f48:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL2 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	0b1b      	lsrs	r3, r3, #12
 8002f4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f52:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL2DIVR1_DIVN) + 1U;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <RCC_PLL2_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e05c      	b.n	8003022 <RCC_PLL2_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) != 0U)
 8002f68:	4b31      	ldr	r3, [pc, #196]	@ (8003030 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d006      	beq.n	8002f82 <RCC_PLL2_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN) >> RCC_PLL2FRACR_FRACN_Pos;
 8002f74:	4b2e      	ldr	r3, [pc, #184]	@ (8003030 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f78:	08db      	lsrs	r3, r3, #3
 8002f7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e001      	b.n	8002f86 <RCC_PLL2_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d019      	beq.n	8002fc4 <RCC_PLL2_GetVCOOutputFreq+0x8c>
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d81d      	bhi.n	8002fd0 <RCC_PLL2_GetVCOOutputFreq+0x98>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <RCC_PLL2_GetVCOOutputFreq+0x66>
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d016      	beq.n	8002fca <RCC_PLL2_GetVCOOutputFreq+0x92>
 8002f9c:	e018      	b.n	8002fd0 <RCC_PLL2_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL2 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8002f9e:	4b24      	ldr	r3, [pc, #144]	@ (8003030 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <RCC_PLL2_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 8002faa:	4b21      	ldr	r3, [pc, #132]	@ (8003030 <RCC_PLL2_GetVCOOutputFreq+0xf8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	08db      	lsrs	r3, r3, #3
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003034 <RCC_PLL2_GetVCOOutputFreq+0xfc>)
 8002fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fba:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 8002fbc:	e00b      	b.n	8002fd6 <RCC_PLL2_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
      break;
 8002fc2:	e008      	b.n	8002fd6 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL2 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <RCC_PLL2_GetVCOOutputFreq+0x100>)
 8002fc6:	61fb      	str	r3, [r7, #28]
      break;
 8002fc8:	e005      	b.n	8002fd6 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL2 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 8002fca:	4b1c      	ldr	r3, [pc, #112]	@ (800303c <RCC_PLL2_GetVCOOutputFreq+0x104>)
 8002fcc:	61fb      	str	r3, [r7, #28]
      break;
 8002fce:	e002      	b.n	8002fd6 <RCC_PLL2_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
      break;
 8002fd4:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8003002:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 8003040 <RCC_PLL2_GetVCOOutputFreq+0x108>
 8003006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800300a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8003016:	edd7 7a01 	vldr	s15, [r7, #4]
 800301a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800301e:	ee17 3a90 	vmov	r3, s15
}
 8003022:	4618      	mov	r0, r3
 8003024:	3724      	adds	r7, #36	@ 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	58024400 	.word	0x58024400
 8003034:	03d09000 	.word	0x03d09000
 8003038:	016e3600 	.word	0x016e3600
 800303c:	003d0900 	.word	0x003d0900
 8003040:	46000000 	.word	0x46000000

08003044 <RCC_PLL3_GetVCOOutputFreq>:
/**
  * @brief  Compute PLL3 VCO output frequency
  * @retval Value of PLL3 VCO output frequency
  */
static uint32_t RCC_PLL3_GetVCOOutputFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	@ 0x24
 8003048:	af00      	add	r7, sp, #0
  uint32_t plln;
  uint32_t pllfracn;
  float_t frequency;

  /* Get PLL3 CKSELR and DIVR register values */
  tmpreg1 = RCC->PLLCKSELR;
 800304a:	4b3c      	ldr	r3, [pc, #240]	@ (800313c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	617b      	str	r3, [r7, #20]
  tmpreg2 = RCC->PLL3DIVR1;
 8003050:	4b3a      	ldr	r3, [pc, #232]	@ (800313c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	613b      	str	r3, [r7, #16]

  /* Retrieve PLL3 multiplication factor and divider */
  pllm = (tmpreg1 & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	0d1b      	lsrs	r3, r3, #20
 800305a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800305e:	60fb      	str	r3, [r7, #12]
  plln = (tmpreg2 & RCC_PLL3DIVR1_DIVN) + 1U;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003066:	3301      	adds	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]

  if (pllm == 0U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <RCC_PLL3_GetVCOOutputFreq+0x30>
  {
    /* Prescaler disabled */
    return 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	e05c      	b.n	800312e <RCC_PLL3_GetVCOOutputFreq+0xea>
  }

  /* Check if fractional part is enable */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) != 0U)
 8003074:	4b31      	ldr	r3, [pc, #196]	@ (800313c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8003076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003078:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <RCC_PLL3_GetVCOOutputFreq+0x4a>
  {
    pllfracn = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN) >> RCC_PLL3FRACR_FRACN_Pos;
 8003080:	4b2e      	ldr	r3, [pc, #184]	@ (800313c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 8003082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003084:	08db      	lsrs	r3, r3, #3
 8003086:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	e001      	b.n	8003092 <RCC_PLL3_GetVCOOutputFreq+0x4e>
  }
  else
  {
    pllfracn = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  }

  /* determine PLL source */
  switch (tmpreg1 & RCC_PLLCKSELR_PLLSRC)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d019      	beq.n	80030d0 <RCC_PLL3_GetVCOOutputFreq+0x8c>
 800309c:	2b02      	cmp	r3, #2
 800309e:	d81d      	bhi.n	80030dc <RCC_PLL3_GetVCOOutputFreq+0x98>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <RCC_PLL3_GetVCOOutputFreq+0x66>
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d016      	beq.n	80030d6 <RCC_PLL3_GetVCOOutputFreq+0x92>
 80030a8:	e018      	b.n	80030dc <RCC_PLL3_GetVCOOutputFreq+0x98>
  {
    /* HSI used as PLL3 clock source */
    case RCC_PLLSOURCE_HSI:
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80030aa:	4b24      	ldr	r3, [pc, #144]	@ (800313c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <RCC_PLL3_GetVCOOutputFreq+0x86>
      {
        pllsrc = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
 80030b6:	4b21      	ldr	r3, [pc, #132]	@ (800313c <RCC_PLL3_GetVCOOutputFreq+0xf8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	08db      	lsrs	r3, r3, #3
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003140 <RCC_PLL3_GetVCOOutputFreq+0xfc>)
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	61fb      	str	r3, [r7, #28]
      else
      {
        /* Can't retrieve HSIDIV value */
        pllsrc = 0U;
      }
      break;
 80030c8:	e00b      	b.n	80030e2 <RCC_PLL3_GetVCOOutputFreq+0x9e>
        pllsrc = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
      break;
 80030ce:	e008      	b.n	80030e2 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* HSE used as PLL3 clock source */
    case RCC_PLLSOURCE_HSE:
      pllsrc = HSE_VALUE;
 80030d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003144 <RCC_PLL3_GetVCOOutputFreq+0x100>)
 80030d2:	61fb      	str	r3, [r7, #28]
      break;
 80030d4:	e005      	b.n	80030e2 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    /* CSI used as PLL3 clock source */
    case RCC_PLLSOURCE_CSI:
      pllsrc = CSI_VALUE;
 80030d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003148 <RCC_PLL3_GetVCOOutputFreq+0x104>)
 80030d8:	61fb      	str	r3, [r7, #28]
      break;
 80030da:	e002      	b.n	80030e2 <RCC_PLL3_GetVCOOutputFreq+0x9e>

    default:
      pllsrc = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
      break;
 80030e0:	bf00      	nop
  }

  /* Compute VCO output frequency */
  frequency = ((float_t)pllsrc / (float_t)pllm) * ((float_t)plln + ((float_t)pllfracn / (float_t)0x2000U));
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	ee07 3a90 	vmov	s15, r3
 80030e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800310e:	eddf 5a0f 	vldr	s11, [pc, #60]	@ 800314c <RCC_PLL3_GetVCOOutputFreq+0x108>
 8003112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	edc7 7a01 	vstr	s15, [r7, #4]
  
  return (uint32_t)frequency;
 8003122:	edd7 7a01 	vldr	s15, [r7, #4]
 8003126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800312a:	ee17 3a90 	vmov	r3, s15
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	@ 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	58024400 	.word	0x58024400
 8003140:	03d09000 	.word	0x03d09000
 8003144:	016e3600 	.word	0x016e3600
 8003148:	003d0900 	.word	0x003d0900
 800314c:	46000000 	.word	0x46000000

08003150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003158:	2300      	movs	r3, #0
 800315a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800315c:	2300      	movs	r3, #0
 800315e:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8081 	beq.w	8003270 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800316e:	4b8c      	ldr	r3, [pc, #560]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003176:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d029      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	429a      	cmp	r2, r3
 800318a:	d022      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800318c:	4b85      	ldr	r3, [pc, #532]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a84      	ldr	r2, [pc, #528]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003196:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003198:	4b82      	ldr	r3, [pc, #520]	@ (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
 80031a8:	e013      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031aa:	4b7d      	ldr	r3, [pc, #500]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b2:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
 80031b4:	4b7a      	ldr	r3, [pc, #488]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b8:	4a79      	ldr	r2, [pc, #484]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031be:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c0:	4b77      	ldr	r3, [pc, #476]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	4a76      	ldr	r2, [pc, #472]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ca:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
 80031cc:	4a74      	ldr	r2, [pc, #464]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d149      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e0:	d115      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fe f801 	bl	80011e8 <HAL_GetTick>
 80031e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e8:	e00b      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fd fffd 	bl	80011e8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d902      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	75fb      	strb	r3, [r7, #23]
            break;
 8003200:	e005      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003202:	4b67      	ldr	r3, [pc, #412]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ed      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
 800320e:	7dfb      	ldrb	r3, [r7, #23]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d128      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003218:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00c      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8003220:	4b5f      	ldr	r3, [pc, #380]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800322c:	0919      	lsrs	r1, r3, #4
 800322e:	4b5e      	ldr	r3, [pc, #376]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003230:	400b      	ands	r3, r1
 8003232:	495b      	ldr	r1, [pc, #364]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003234:	4313      	orrs	r3, r2
 8003236:	610b      	str	r3, [r1, #16]
 8003238:	e005      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 800323a:	4b59      	ldr	r3, [pc, #356]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	4a58      	ldr	r2, [pc, #352]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003240:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003244:	6113      	str	r3, [r2, #16]
 8003246:	4b56      	ldr	r3, [pc, #344]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003248:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800324e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003252:	4953      	ldr	r1, [pc, #332]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003254:	4313      	orrs	r3, r2
 8003256:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
 8003258:	4b51      	ldr	r3, [pc, #324]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325c:	4a50      	ldr	r2, [pc, #320]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800325e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003262:	6713      	str	r3, [r2, #112]	@ 0x70
 8003264:	e004      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	75bb      	strb	r3, [r7, #22]
 800326a:	e001      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d030      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d819      	bhi.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003284:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032bf 	.word	0x080032bf
 8003290:	0800329d 	.word	0x0800329d
 8003294:	080032ab 	.word	0x080032ab
 8003298:	080032bf 	.word	0x080032bf
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 800329c:	4b40      	ldr	r3, [pc, #256]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	4a3f      	ldr	r2, [pc, #252]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 80032a8:	e00a      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 80032aa:	4b3d      	ldr	r3, [pc, #244]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ae:	4a3c      	ldr	r2, [pc, #240]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
 80032b6:	e003      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
        break;
 80032bc:	e000      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
 80032be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032c6:	4b36      	ldr	r3, [pc, #216]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ca:	f023 0203 	bic.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4933      	ldr	r1, [pc, #204]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80032d8:	e001      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d02a      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d00c      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d811      	bhi.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d012      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d10d      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80032fe:	4b28      	ldr	r3, [pc, #160]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	4a27      	ldr	r2, [pc, #156]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003304:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003308:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 800330a:	e00a      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 800330c:	4b24      	ldr	r3, [pc, #144]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	4a23      	ldr	r2, [pc, #140]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003316:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
 8003318:	e003      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
        break;
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
 8003320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
 8003328:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800332a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	491a      	ldr	r1, [pc, #104]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003336:	4313      	orrs	r3, r2
 8003338:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800333a:	e001      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d031      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	2b80      	cmp	r3, #128	@ 0x80
 8003352:	d00c      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003354:	2b80      	cmp	r3, #128	@ 0x80
 8003356:	d811      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d012      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x232>
 800335c:	2b40      	cmp	r3, #64	@ 0x40
 800335e:	d10d      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 8003360:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	4a0e      	ldr	r2, [pc, #56]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003366:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800336a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 800336c:	e00a      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 800336e:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	4a0b      	ldr	r2, [pc, #44]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003374:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003378:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
 800337a:	e003      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
        break;
 8003380:	e000      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
 8003382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d110      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
 800338a:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800338c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	4902      	ldr	r1, [pc, #8]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003398:	4313      	orrs	r3, r2
 800339a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800339c:	e008      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
 800339e:	bf00      	nop
 80033a0:	58024400 	.word	0x58024400
 80033a4:	58024800 	.word	0x58024800
 80033a8:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80033bc:	4b93      	ldr	r3, [pc, #588]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	4990      	ldr	r1, [pc, #576]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d026      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d007      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80033e6:	e00d      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
 80033e8:	4b88      	ldr	r3, [pc, #544]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	4a87      	ldr	r2, [pc, #540]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80033f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 80033f4:	e009      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
 80033f6:	4b85      	ldr	r3, [pc, #532]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fa:	4a84      	ldr	r2, [pc, #528]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80033fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003400:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
 8003402:	e002      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	75fb      	strb	r3, [r7, #23]
        break;
 8003408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d109      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
 8003410:	4b7e      	ldr	r3, [pc, #504]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003414:	f023 0204 	bic.w	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341c:	497b      	ldr	r1, [pc, #492]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003422:	e001      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02e      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800343c:	d019      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800343e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003442:	d813      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800344c:	d007      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800344e:	e00d      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003450:	4b6e      	ldr	r3, [pc, #440]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	4a6d      	ldr	r2, [pc, #436]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800345a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 800345c:	e00a      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800345e:	4b6b      	ldr	r3, [pc, #428]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	4a6a      	ldr	r2, [pc, #424]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003464:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003468:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
 800346a:	e003      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	75fb      	strb	r3, [r7, #23]
        break;
 8003470:	e000      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
 8003472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003474:	7dfb      	ldrb	r3, [r7, #23]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800347a:	4b64      	ldr	r3, [pc, #400]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800347c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4961      	ldr	r1, [pc, #388]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800348c:	e001      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d03f      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80034a6:	d02a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80034a8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80034ac:	d824      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80034ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034b2:	d024      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80034b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034b8:	d81e      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80034ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034be:	d01e      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80034c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034c4:	d818      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80034c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034ca:	d00e      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80034cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034d0:	d812      	bhi.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d013      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80034d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034da:	d10d      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80034dc:	4b4b      	ldr	r3, [pc, #300]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	4a4a      	ldr	r2, [pc, #296]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80034e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 80034e8:	e00a      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80034ea:	4b48      	ldr	r3, [pc, #288]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ee:	4a47      	ldr	r2, [pc, #284]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80034f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
 80034f6:	e003      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	75fb      	strb	r3, [r7, #23]
        break;
 80034fc:	e000      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
 80034fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
 8003506:	4b41      	ldr	r3, [pc, #260]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350a:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	493e      	ldr	r1, [pc, #248]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003514:	4313      	orrs	r3, r2
 8003516:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003518:	e001      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351a:	7dfb      	ldrb	r3, [r7, #23]
 800351c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800352a:	4b38      	ldr	r3, [pc, #224]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800352c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4935      	ldr	r1, [pc, #212]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003538:	4313      	orrs	r3, r2
 800353a:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
 8003548:	4b30      	ldr	r3, [pc, #192]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800354a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	492d      	ldr	r1, [pc, #180]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d020      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800356e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003572:	d106      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
 8003574:	4b25      	ldr	r3, [pc, #148]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	4a24      	ldr	r2, [pc, #144]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800357a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800357e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
 8003580:	e003      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
        break;
 8003586:	e000      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
 8003588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
 8003590:	4b1e      	ldr	r3, [pc, #120]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003594:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	491b      	ldr	r1, [pc, #108]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80035a2:	e001      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d02f      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035bc:	d00e      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80035be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035c2:	d812      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80035c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035cc:	d10d      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80035ce:	4b0f      	ldr	r3, [pc, #60]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d2:	4a0e      	ldr	r2, [pc, #56]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80035d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035da:	e00a      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	4a0a      	ldr	r2, [pc, #40]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80035e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
        break;
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
 80035f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035f8:	4b04      	ldr	r3, [pc, #16]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80035fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	4901      	ldr	r1, [pc, #4]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	650b      	str	r3, [r1, #80]	@ 0x50
 800360a:	e003      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 800360c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02c      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003628:	d017      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800362a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800362e:	d811      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003634:	d011      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800363a:	d80b      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00c      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003644:	d106      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003646:	4b97      	ldr	r3, [pc, #604]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	4a96      	ldr	r2, [pc, #600]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800364c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003650:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
 8003652:	e003      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	75fb      	strb	r3, [r7, #23]
        break;
 8003658:	e000      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800365a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
 8003662:	4b90      	ldr	r3, [pc, #576]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003666:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	498d      	ldr	r1, [pc, #564]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003670:	4313      	orrs	r3, r2
 8003672:	650b      	str	r3, [r1, #80]	@ 0x50
 8003674:	e001      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003682:	2b00      	cmp	r3, #0
 8003684:	d02c      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800368e:	d017      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003690:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003694:	d811      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8003696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800369a:	d011      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800369c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a0:	d80b      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036aa:	d106      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80036ac:	4b7d      	ldr	r3, [pc, #500]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	4a7c      	ldr	r2, [pc, #496]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80036b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
 80036b8:	e003      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
        break;
 80036be:	e000      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
 80036c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
 80036c8:	4b76      	ldr	r3, [pc, #472]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d4:	4973      	ldr	r1, [pc, #460]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	650b      	str	r3, [r1, #80]	@ 0x50
 80036da:	e001      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d045      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f4:	d02a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80036f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036fa:	d824      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 80036fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003700:	d026      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003702:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003706:	d81e      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8003708:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800370c:	d022      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800370e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003712:	d818      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8003714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003718:	d00e      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800371a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800371e:	d812      	bhi.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d019      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003728:	d10d      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800372a:	4b5e      	ldr	r3, [pc, #376]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800372c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372e:	4a5d      	ldr	r2, [pc, #372]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003734:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003736:	e010      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003738:	4b5a      	ldr	r3, [pc, #360]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	4a59      	ldr	r2, [pc, #356]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800373e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003742:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003744:	e009      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	75fb      	strb	r3, [r7, #23]
        break;
 800374a:	e006      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 800374c:	bf00      	nop
 800374e:	e004      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003750:	bf00      	nop
 8003752:	e002      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003754:	bf00      	nop
 8003756:	e000      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
 8003758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003760:	4b50      	ldr	r3, [pc, #320]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003764:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376c:	494d      	ldr	r1, [pc, #308]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800376e:	4313      	orrs	r3, r2
 8003770:	650b      	str	r3, [r1, #80]	@ 0x50
 8003772:	e001      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d045      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800378c:	d02a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800378e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003792:	d824      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003798:	d026      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800379e:	d81e      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80037a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037a4:	d022      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x69c>
 80037a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037aa:	d818      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80037ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037b0:	d00e      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80037b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037b6:	d812      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d019      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 80037bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037c0:	d10d      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80037c2:	4b38      	ldr	r3, [pc, #224]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c6:	4a37      	ldr	r2, [pc, #220]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 80037ce:	e010      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 80037d0:	4b34      	ldr	r3, [pc, #208]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	4a33      	ldr	r2, [pc, #204]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80037d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
 80037dc:	e009      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	75fb      	strb	r3, [r7, #23]
        break;
 80037e2:	e006      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 80037e4:	bf00      	nop
 80037e6:	e004      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 80037e8:	bf00      	nop
 80037ea:	e002      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
 80037f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
 80037f8:	4b2a      	ldr	r3, [pc, #168]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	4927      	ldr	r1, [pc, #156]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003806:	4313      	orrs	r3, r2
 8003808:	658b      	str	r3, [r1, #88]	@ 0x58
 800380a:	e001      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d047      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003824:	d02a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003826:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800382a:	d824      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x726>
 800382c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003830:	d026      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x730>
 8003832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003836:	d81e      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003838:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800383c:	d022      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x734>
 800383e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003842:	d818      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003848:	d00e      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x718>
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800384e:	d812      	bhi.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d019      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x738>
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003858:	d10d      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 800385a:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800385c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385e:	4a11      	ldr	r2, [pc, #68]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003864:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8003866:	e010      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003868:	4b0e      	ldr	r3, [pc, #56]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	4a0d      	ldr	r2, [pc, #52]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800386e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003872:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
 8003874:	e009      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	75fb      	strb	r3, [r7, #23]
        break;
 800387a:	e006      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 800387c:	bf00      	nop
 800387e:	e004      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003880:	bf00      	nop
 8003882:	e002      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003884:	bf00      	nop
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
 8003888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800388a:	7dfb      	ldrb	r3, [r7, #23]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
 8003890:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003894:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389c:	4901      	ldr	r1, [pc, #4]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x754>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	658b      	str	r3, [r1, #88]	@ 0x58
 80038a2:	e003      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
 80038a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d034      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	2b05      	cmp	r3, #5
 80038be:	d81d      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80038c0:	a201      	add	r2, pc, #4	@ (adr r2, 80038c8 <HAL_RCCEx_PeriphCLKConfig+0x778>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	08003903 	.word	0x08003903
 80038cc:	080038e1 	.word	0x080038e1
 80038d0:	080038ef 	.word	0x080038ef
 80038d4:	08003903 	.word	0x08003903
 80038d8:	08003903 	.word	0x08003903
 80038dc:	08003903 	.word	0x08003903
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 80038e0:	4b91      	ldr	r3, [pc, #580]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	4a90      	ldr	r2, [pc, #576]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80038e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038ec:	e00a      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 80038ee:	4b8e      	ldr	r3, [pc, #568]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	4a8d      	ldr	r2, [pc, #564]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038fa:	e003      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
        break;
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
 8003902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800390a:	4b87      	ldr	r3, [pc, #540]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800390c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390e:	f023 0207 	bic.w	r2, r3, #7
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	4984      	ldr	r1, [pc, #528]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003918:	4313      	orrs	r3, r2
 800391a:	658b      	str	r3, [r1, #88]	@ 0x58
 800391c:	e001      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 800392e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003932:	4a7d      	ldr	r2, [pc, #500]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003934:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003938:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d021      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x806>
 800394e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003954:	e006      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003956:	4b74      	ldr	r3, [pc, #464]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	4a73      	ldr	r2, [pc, #460]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800395c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003960:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
 8003962:	e003      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	75fb      	strb	r3, [r7, #23]
        break;
 8003968:	e000      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800396a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
 8003972:	4b6d      	ldr	r3, [pc, #436]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800397e:	496a      	ldr	r1, [pc, #424]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003980:	4313      	orrs	r3, r2
 8003982:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003984:	e001      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d043      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800399e:	d02c      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 80039a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039a4:	d826      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80039a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039aa:	d028      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x8ae>
 80039ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039b0:	d820      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80039b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039b6:	d016      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x896>
 80039b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039bc:	d81a      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c6:	d007      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80039c8:	e014      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 80039ca:	4b57      	ldr	r3, [pc, #348]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ce:	4a56      	ldr	r2, [pc, #344]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80039d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039d6:	e013      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 80039d8:	4b53      	ldr	r3, [pc, #332]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	4a52      	ldr	r2, [pc, #328]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80039de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039e4:	e00c      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 80039e6:	4b50      	ldr	r3, [pc, #320]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	4a4f      	ldr	r2, [pc, #316]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 80039ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039f2:	e005      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
        break;
 80039f8:	e002      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
 80039fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a00:	7dfb      	ldrb	r3, [r7, #23]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a06:	4b48      	ldr	r3, [pc, #288]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a12:	4945      	ldr	r1, [pc, #276]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	654b      	str	r3, [r1, #84]	@ 0x54
 8003a18:	e001      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
 8003a1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d04b      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003a32:	d032      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003a34:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8003a38:	d82c      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a3e:	d02e      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003a40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a44:	d826      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003a46:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a4a:	d02a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003a4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a50:	d820      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a56:	d016      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x936>
 8003a58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a5c:	d81a      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8003a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a66:	d007      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x928>
 8003a68:	e014      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a76:	e015      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003a78:	4b2b      	ldr	r3, [pc, #172]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a82:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a84:	e00e      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003a86:	4b28      	ldr	r3, [pc, #160]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8a:	4a27      	ldr	r2, [pc, #156]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003a8c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a92:	e007      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	75fb      	strb	r3, [r7, #23]
        break;
 8003a98:	e004      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003a9a:	bf00      	nop
 8003a9c:	e002      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003a9e:	bf00      	nop
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
 8003aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aae:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab6:	491c      	ldr	r1, [pc, #112]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	654b      	str	r3, [r1, #84]	@ 0x54
 8003abc:	e001      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d03e      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ad6:	d029      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 8003ad8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003adc:	d820      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003ade:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ae2:	d016      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ae8:	d81a      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 8003aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003af2:	d007      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
 8003af4:	e014      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003af6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	4a0b      	ldr	r2, [pc, #44]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b02:	e014      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003b04:	4b08      	ldr	r3, [pc, #32]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	4a07      	ldr	r2, [pc, #28]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003b0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b10:	e00d      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
 8003b12:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b16:	4a04      	ldr	r2, [pc, #16]	@ (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003b18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b1e:	e006      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	75fb      	strb	r3, [r7, #23]
        break;
 8003b24:	e003      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003b26:	bf00      	nop
 8003b28:	58024400 	.word	0x58024400
        break;
 8003b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d109      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b34:	4b8e      	ldr	r3, [pc, #568]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b40:	498b      	ldr	r1, [pc, #556]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	650b      	str	r3, [r1, #80]	@ 0x50
 8003b46:	e001      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d043      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b60:	d02c      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8003b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b66:	d826      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003b68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b6c:	d028      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b72:	d820      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b78:	d016      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7e:	d81a      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 8003b84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b88:	d007      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xa4a>
 8003b8a:	e014      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003b8c:	4b78      	ldr	r3, [pc, #480]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	4a77      	ldr	r2, [pc, #476]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003b98:	e013      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003b9a:	4b75      	ldr	r3, [pc, #468]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9e:	4a74      	ldr	r2, [pc, #464]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003ba6:	e00c      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003ba8:	4b71      	ldr	r3, [pc, #452]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	4a70      	ldr	r2, [pc, #448]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
        break;
 8003bba:	e002      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
 8003bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
 8003bc8:	4b69      	ldr	r3, [pc, #420]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	4966      	ldr	r1, [pc, #408]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	654b      	str	r3, [r1, #84]	@ 0x54
 8003bda:	e001      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d03c      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf0:	2b40      	cmp	r3, #64	@ 0x40
 8003bf2:	d026      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8003bf4:	2b40      	cmp	r3, #64	@ 0x40
 8003bf6:	d821      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003bf8:	2b30      	cmp	r3, #48	@ 0x30
 8003bfa:	d024      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8003bfc:	2b30      	cmp	r3, #48	@ 0x30
 8003bfe:	d81d      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d014      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xade>
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d819      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d007      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8003c10:	e014      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003c12:	4b57      	ldr	r3, [pc, #348]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c16:	4a56      	ldr	r2, [pc, #344]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003c1e:	e013      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003c20:	4b53      	ldr	r3, [pc, #332]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c24:	4a52      	ldr	r2, [pc, #328]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003c2c:	e00c      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
 8003c2e:	4b50      	ldr	r3, [pc, #320]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c32:	4a4f      	ldr	r2, [pc, #316]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c38:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
 8003c3a:	e005      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
        break;
 8003c40:	e002      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8003c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
 8003c4e:	4b48      	ldr	r3, [pc, #288]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5a:	4945      	ldr	r1, [pc, #276]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	650b      	str	r3, [r1, #80]	@ 0x50
 8003c60:	e001      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d03c      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c76:	2b50      	cmp	r3, #80	@ 0x50
 8003c78:	d022      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8003c7a:	2b50      	cmp	r3, #80	@ 0x50
 8003c7c:	d81d      	bhi.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003c7e:	2b40      	cmp	r3, #64	@ 0x40
 8003c80:	d020      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003c82:	2b40      	cmp	r3, #64	@ 0x40
 8003c84:	d819      	bhi.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003c86:	2b30      	cmp	r3, #48	@ 0x30
 8003c88:	d01e      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8003c8a:	2b30      	cmp	r3, #48	@ 0x30
 8003c8c:	d815      	bhi.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d00c      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d811      	bhi.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xb6a>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d018      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d10d      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003c9e:	4b34      	ldr	r3, [pc, #208]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	4a33      	ldr	r2, [pc, #204]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8003caa:	e010      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003cac:	4b30      	ldr	r3, [pc, #192]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	4a2f      	ldr	r2, [pc, #188]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
 8003cb8:	e009      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
        break;
 8003cbe:	e006      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003cc0:	bf00      	nop
 8003cc2:	e004      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003cc4:	bf00      	nop
 8003cc6:	e002      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003cc8:	bf00      	nop
 8003cca:	e000      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cd4:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce0:	4923      	ldr	r1, [pc, #140]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	654b      	str	r3, [r1, #84]	@ 0x54
 8003ce6:	e001      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d03f      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cfc:	2b50      	cmp	r3, #80	@ 0x50
 8003cfe:	d022      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003d00:	2b50      	cmp	r3, #80	@ 0x50
 8003d02:	d81d      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003d04:	2b40      	cmp	r3, #64	@ 0x40
 8003d06:	d020      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8003d08:	2b40      	cmp	r3, #64	@ 0x40
 8003d0a:	d819      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003d0c:	2b30      	cmp	r3, #48	@ 0x30
 8003d0e:	d01e      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003d10:	2b30      	cmp	r3, #48	@ 0x30
 8003d12:	d815      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d00c      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d811      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d018      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003d20:	2b10      	cmp	r3, #16
 8003d22:	d10d      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003d24:	4b12      	ldr	r3, [pc, #72]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	4a11      	ldr	r2, [pc, #68]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d30:	e010      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003d32:	4b0f      	ldr	r3, [pc, #60]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	4a0e      	ldr	r2, [pc, #56]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d3e:	e009      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
        break;
 8003d44:	e006      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003d46:	bf00      	nop
 8003d48:	e004      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003d4a:	bf00      	nop
 8003d4c:	e002      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003d4e:	bf00      	nop
 8003d50:	e000      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
 8003d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d5a:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d66:	4902      	ldr	r1, [pc, #8]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	658b      	str	r3, [r1, #88]	@ 0x58
 8003d6c:	e004      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003d6e:	bf00      	nop
 8003d70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d034      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d88:	2b05      	cmp	r3, #5
 8003d8a:	d81d      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003dcf 	.word	0x08003dcf
 8003d98:	08003dad 	.word	0x08003dad
 8003d9c:	08003dbb 	.word	0x08003dbb
 8003da0:	08003dcf 	.word	0x08003dcf
 8003da4:	08003dcf 	.word	0x08003dcf
 8003da8:	08003dcf 	.word	0x08003dcf
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003dac:	4b69      	ldr	r3, [pc, #420]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db0:	4a68      	ldr	r2, [pc, #416]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003dba:	4b66      	ldr	r3, [pc, #408]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	4a65      	ldr	r2, [pc, #404]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
        break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
 8003dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003de2:	495c      	ldr	r1, [pc, #368]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	654b      	str	r3, [r1, #84]	@ 0x54
 8003de8:	e001      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d033      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d81c      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8003e02:	a201      	add	r2, pc, #4	@ (adr r2, 8003e08 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e43 	.word	0x08003e43
 8003e0c:	08003e21 	.word	0x08003e21
 8003e10:	08003e2f 	.word	0x08003e2f
 8003e14:	08003e43 	.word	0x08003e43
 8003e18:	08003e43 	.word	0x08003e43
 8003e1c:	08003e43 	.word	0x08003e43
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003e20:	4b4c      	ldr	r3, [pc, #304]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	4a4b      	ldr	r2, [pc, #300]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003e2e:	4b49      	ldr	r3, [pc, #292]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	4a48      	ldr	r2, [pc, #288]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003e34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e38:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
 8003e3a:	e003      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	75fb      	strb	r3, [r7, #23]
        break;
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
 8003e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e4a:	4b42      	ldr	r3, [pc, #264]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4e:	f023 0207 	bic.w	r2, r3, #7
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e56:	493f      	ldr	r1, [pc, #252]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	650b      	str	r3, [r1, #80]	@ 0x50
 8003e5c:	e001      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d027      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e76:	d008      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e7c:	d80c      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003e88:	e006      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003e8a:	4b32      	ldr	r3, [pc, #200]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	4a31      	ldr	r2, [pc, #196]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
 8003e96:	e003      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
        break;
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea0:	7dfb      	ldrb	r3, [r7, #23]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
 8003ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eaa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb2:	4928      	ldr	r1, [pc, #160]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003eb8:	e001      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	da2c      	bge.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ece:	d017      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003ed0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ed4:	d811      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8003ed6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eda:	d011      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee0:	d80b      	bhi.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00c      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8003ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eea:	d106      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
 8003eec:	4b19      	ldr	r3, [pc, #100]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	4a18      	ldr	r2, [pc, #96]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003ef2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
 8003ef8:	e003      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
        break;
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
 8003f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
 8003f08:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f14:	490f      	ldr	r1, [pc, #60]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003f1a:	e001      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	7dfb      	ldrb	r3, [r7, #23]
 8003f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d009      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f3a:	4906      	ldr	r1, [pc, #24]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe04>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
 8003f40:	7dbb      	ldrb	r3, [r7, #22]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e000      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	58024400 	.word	0x58024400

08003f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_USART234578 : USART2/3/5/7/8 peripheral clock
  *            @arg RCC_PERIPHCLK_USBOTGFS    : USBOTGFS peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0; /* Set to 0 for returned value if no source clock */
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
  uint32_t clocksource;
  uint32_t ethclocksource;
  uint32_t prescaler;

  switch (PeriphClk)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f6a:	f001 82db 	beq.w	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x15cc>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f74:	f201 8326 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7e:	f001 8298 	beq.w	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0x155a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f88:	f201 831c 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f92:	f001 822a 	beq.w	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f9c:	f201 8312 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fa6:	f001 81bb 	beq.w	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x13c8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fb0:	f201 8308 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fba:	f001 8139 	beq.w	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fc4:	f201 82fe 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fce:	f001 80bf 	beq.w	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003fd8:	f201 82f4 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fe2:	f001 8069 	beq.w	80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fec:	f201 82ea 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ff6:	f001 8007 	beq.w	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004000:	f201 82e0 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800400a:	f000 87a2 	beq.w	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0xffa>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004014:	f201 82d6 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800401e:	f000 877a 	beq.w	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004028:	f201 82cc 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004032:	f000 8713 	beq.w	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800403c:	f201 82c2 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004046:	f000 86ad 	beq.w	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004050:	f201 82b8 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800405a:	f000 8644 	beq.w	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004064:	f201 82ae 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800406e:	f000 861c 	beq.w	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004078:	f201 82a4 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004082:	f000 8606 	beq.w	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408c:	f201 829a 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004096:	f000 8592 	beq.w	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a0:	f201 8290 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040aa:	f000 8519 	beq.w	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040b4:	f201 8286 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040be:	f000 84a3 	beq.w	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c8:	f201 827c 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d2:	f000 842d 	beq.w	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040dc:	f201 8272 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040e6:	f000 83c5 	beq.w	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f0:	f201 8268 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fa:	f000 8365 	beq.w	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004104:	f201 825e 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800410e:	f000 831d 	beq.w	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004118:	f201 8254 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004122:	f000 82ed 	beq.w	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412c:	f201 824a 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b80      	cmp	r3, #128	@ 0x80
 8004134:	f000 8291 	beq.w	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b80      	cmp	r3, #128	@ 0x80
 800413c:	f201 8242 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b20      	cmp	r3, #32
 8004144:	d84c      	bhi.n	80041e0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f001 823b 	beq.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3b01      	subs	r3, #1
 8004152:	2b1f      	cmp	r3, #31
 8004154:	f201 8236 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
 8004158:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	080041ed 	.word	0x080041ed
 8004164:	080042bb 	.word	0x080042bb
 8004168:	080055c5 	.word	0x080055c5
 800416c:	0800434b 	.word	0x0800434b
 8004170:	080055c5 	.word	0x080055c5
 8004174:	080055c5 	.word	0x080055c5
 8004178:	080055c5 	.word	0x080055c5
 800417c:	080043e3 	.word	0x080043e3
 8004180:	080055c5 	.word	0x080055c5
 8004184:	080055c5 	.word	0x080055c5
 8004188:	080055c5 	.word	0x080055c5
 800418c:	080055c5 	.word	0x080055c5
 8004190:	080055c5 	.word	0x080055c5
 8004194:	080055c5 	.word	0x080055c5
 8004198:	080055c5 	.word	0x080055c5
 800419c:	08004485 	.word	0x08004485
 80041a0:	080055c5 	.word	0x080055c5
 80041a4:	080055c5 	.word	0x080055c5
 80041a8:	080055c5 	.word	0x080055c5
 80041ac:	080055c5 	.word	0x080055c5
 80041b0:	080055c5 	.word	0x080055c5
 80041b4:	080055c5 	.word	0x080055c5
 80041b8:	080055c5 	.word	0x080055c5
 80041bc:	080055c5 	.word	0x080055c5
 80041c0:	080055c5 	.word	0x080055c5
 80041c4:	080055c5 	.word	0x080055c5
 80041c8:	080055c5 	.word	0x080055c5
 80041cc:	080055c5 	.word	0x080055c5
 80041d0:	080055c5 	.word	0x080055c5
 80041d4:	080055c5 	.word	0x080055c5
 80041d8:	080055c5 	.word	0x080055c5
 80041dc:	080044f1 	.word	0x080044f1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b40      	cmp	r3, #64	@ 0x40
 80041e4:	f000 81fb 	beq.w	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      }
      break;

    default:
      /* Nothing to do, frequency is by default set to 0 */
      break;
 80041e8:	f001 b9ec 	b.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x166c>
      clocksource = __HAL_RCC_GET_FMC_SOURCE();
 80041ec:	4ba1      	ldr	r3, [pc, #644]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80041ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80041f2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80041f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80041fa:	d004      	beq.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80041fc:	4b9d      	ldr	r3, [pc, #628]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80041fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	e001      	b.n	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
 8004206:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b03      	cmp	r3, #3
 8004210:	d80e      	bhi.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d844      	bhi.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8004218:	a201      	add	r2, pc, #4	@ (adr r2, 8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	0800423b 	.word	0x0800423b
 8004224:	08004243 	.word	0x08004243
 8004228:	08004257 	.word	0x08004257
 800422c:	0800426b 	.word	0x0800426b
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004236:	d02e      	beq.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
          break;
 8004238:	e033      	b.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
          frequency = HAL_RCC_GetHCLKFreq();
 800423a:	f7fe fb47 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 800423e:	6178      	str	r0, [r7, #20]
          break;
 8004240:	e039      	b.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004242:	4b8c      	ldr	r3, [pc, #560]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d02c      	beq.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPLL1QFreq();
 800424e:	f7fe fbb9 	bl	80029c4 <HAL_RCC_GetPLL1QFreq>
 8004252:	6178      	str	r0, [r7, #20]
          break;
 8004254:	e028      	b.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004256:	4b87      	ldr	r3, [pc, #540]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d025      	beq.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x356>
            frequency = HAL_RCC_GetPLL2RFreq();
 8004262:	f7fe fbf1 	bl	8002a48 <HAL_RCC_GetPLL2RFreq>
 8004266:	6178      	str	r0, [r7, #20]
          break;
 8004268:	e021      	b.n	80042ae <HAL_RCCEx_GetPeriphCLKFreq+0x356>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800426a:	4b82      	ldr	r3, [pc, #520]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d01e      	beq.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004276:	4b7f      	ldr	r3, [pc, #508]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d018      	beq.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004282:	4b7c      	ldr	r3, [pc, #496]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	08db      	lsrs	r3, r3, #3
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	4a7a      	ldr	r2, [pc, #488]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800428e:	fa22 f303 	lsr.w	r3, r2, r3
 8004292:	617b      	str	r3, [r7, #20]
          break;
 8004294:	e00e      	b.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 8004296:	f7fe fb19 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 800429a:	4603      	mov	r3, r0
 800429c:	089b      	lsrs	r3, r3, #2
 800429e:	617b      	str	r3, [r7, #20]
          break;
 80042a0:	e009      	b.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 80042a2:	bf00      	nop
 80042a4:	f001 b993 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80042a8:	bf00      	nop
 80042aa:	f001 b990 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80042ae:	bf00      	nop
 80042b0:	f001 b98d 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80042b4:	bf00      	nop
      break;
 80042b6:	f001 b98a 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_XSPI1_SOURCE();
 80042ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80042bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80042c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042c4:	2b40      	cmp	r3, #64	@ 0x40
 80042c6:	d004      	beq.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80042c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80042ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042d0:	e000      	b.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80042d2:	2340      	movs	r3, #64	@ 0x40
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	2b40      	cmp	r3, #64	@ 0x40
 80042da:	d027      	beq.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b40      	cmp	r3, #64	@ 0x40
 80042e0:	d82a      	bhi.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d017      	beq.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d824      	bhi.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d004      	beq.n	8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
          break;
 80042fa:	e01d      	b.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          frequency = HAL_RCC_GetHCLKFreq();
 80042fc:	f7fe fae6 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8004300:	6178      	str	r0, [r7, #20]
          break;
 8004302:	e020      	b.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8004304:	4b5b      	ldr	r3, [pc, #364]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d016      	beq.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = HAL_RCC_GetPLL2SFreq();
 8004310:	f7fe fbb0 	bl	8002a74 <HAL_RCC_GetPLL2SFreq>
 8004314:	6178      	str	r0, [r7, #20]
          break;
 8004316:	e012      	b.n	800433e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 8004318:	4b56      	ldr	r3, [pc, #344]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00f      	beq.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
            frequency = HAL_RCC_GetPLL2TFreq();
 8004324:	f7fe fbbc 	bl	8002aa0 <HAL_RCC_GetPLL2TFreq>
 8004328:	6178      	str	r0, [r7, #20]
          break;
 800432a:	e00b      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 800432c:	f7fe face 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8004330:	4603      	mov	r3, r0
 8004332:	089b      	lsrs	r3, r3, #2
 8004334:	617b      	str	r3, [r7, #20]
          break;
 8004336:	e006      	b.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
          break;
 8004338:	bf00      	nop
 800433a:	f001 b948 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800433e:	bf00      	nop
 8004340:	f001 b945 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004344:	bf00      	nop
      break;
 8004346:	f001 b942 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_XSPI2_SOURCE();
 800434a:	4b4a      	ldr	r3, [pc, #296]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800434c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004350:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004358:	d004      	beq.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
 800435a:	4b46      	ldr	r3, [pc, #280]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800435c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004362:	e001      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004364:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004370:	d028      	beq.n	80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004378:	d82a      	bhi.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b80      	cmp	r3, #128	@ 0x80
 800437e:	d017      	beq.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b80      	cmp	r3, #128	@ 0x80
 8004384:	d824      	bhi.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b40      	cmp	r3, #64	@ 0x40
 8004390:	d004      	beq.n	800439c <HAL_RCCEx_GetPeriphCLKFreq+0x444>
          break;
 8004392:	e01d      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          frequency = HAL_RCC_GetHCLKFreq();
 8004394:	f7fe fa9a 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 8004398:	6178      	str	r0, [r7, #20]
          break;
 800439a:	e020      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 800439c:	4b35      	ldr	r3, [pc, #212]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d016      	beq.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HAL_RCC_GetPLL2SFreq();
 80043a8:	f7fe fb64 	bl	8002a74 <HAL_RCC_GetPLL2SFreq>
 80043ac:	6178      	str	r0, [r7, #20]
          break;
 80043ae:	e012      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 80043b0:	4b30      	ldr	r3, [pc, #192]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00f      	beq.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
            frequency = HAL_RCC_GetPLL2TFreq();
 80043bc:	f7fe fb70 	bl	8002aa0 <HAL_RCC_GetPLL2TFreq>
 80043c0:	6178      	str	r0, [r7, #20]
          break;
 80043c2:	e00b      	b.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
          frequency = (HAL_RCC_GetHCLKFreq() / 4U);
 80043c4:	f7fe fa82 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 80043c8:	4603      	mov	r3, r0
 80043ca:	089b      	lsrs	r3, r3, #2
 80043cc:	617b      	str	r3, [r7, #20]
          break;
 80043ce:	e006      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          break;
 80043d0:	bf00      	nop
 80043d2:	f001 b8fc 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80043d6:	bf00      	nop
 80043d8:	f001 b8f9 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80043dc:	bf00      	nop
      break;
 80043de:	f001 b8f6 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80043e2:	4b24      	ldr	r3, [pc, #144]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80043e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043f2:	d02a      	beq.n	800444a <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043fa:	d82f      	bhi.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d004      	beq.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004408:	d016      	beq.n	8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
          break;
 800440a:	e027      	b.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800440c:	4b19      	ldr	r3, [pc, #100]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d024      	beq.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004418:	4b16      	ldr	r3, [pc, #88]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01e      	beq.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004424:	4b13      	ldr	r3, [pc, #76]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	08db      	lsrs	r3, r3, #3
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	4a12      	ldr	r2, [pc, #72]	@ (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
          break;
 8004436:	e014      	b.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004438:	4b0e      	ldr	r3, [pc, #56]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d011      	beq.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
            frequency = CSI_VALUE;
 8004444:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8004446:	617b      	str	r3, [r7, #20]
          break;
 8004448:	e00e      	b.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800444a:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
            frequency = HSE_VALUE;
 8004456:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8004458:	617b      	str	r3, [r7, #20]
          break;
 800445a:	e008      	b.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
          break;
 800445c:	bf00      	nop
 800445e:	f001 b8b6 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004462:	bf00      	nop
 8004464:	f001 b8b3 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004468:	bf00      	nop
 800446a:	f001 b8b0 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800446e:	bf00      	nop
      break;
 8004470:	f001 b8ad 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004474:	58024400 	.word	0x58024400
 8004478:	03d09000 	.word	0x03d09000
 800447c:	003d0900 	.word	0x003d0900
 8004480:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_ADC_SOURCE();
 8004484:	4b9a      	ldr	r3, [pc, #616]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004488:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004494:	d01f      	beq.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800449c:	d81f      	bhi.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0x556>
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
          break;
 80044ac:	e017      	b.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x586>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 80044ae:	4b90      	ldr	r3, [pc, #576]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d014      	beq.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
            frequency = HAL_RCC_GetPLL2PFreq();
 80044ba:	f7fe fa99 	bl	80029f0 <HAL_RCC_GetPLL2PFreq>
 80044be:	6178      	str	r0, [r7, #20]
          break;
 80044c0:	e010      	b.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 80044c2:	4b8b      	ldr	r3, [pc, #556]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HAL_RCC_GetPLL3RFreq();
 80044ce:	f7fe fb2b 	bl	8002b28 <HAL_RCC_GetPLL3RFreq>
 80044d2:	6178      	str	r0, [r7, #20]
          break;
 80044d4:	e009      	b.n	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = RCC_GetCLKPFreq();
 80044d6:	f001 f893 	bl	8005600 <RCC_GetCLKPFreq>
 80044da:	6178      	str	r0, [r7, #20]
          break;
 80044dc:	e006      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>
          break;
 80044de:	bf00      	nop
 80044e0:	f001 b875 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80044e4:	bf00      	nop
 80044e6:	f001 b872 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80044ea:	bf00      	nop
      break;
 80044ec:	f001 b86f 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_ADF1_SOURCE();
 80044f0:	4b7f      	ldr	r3, [pc, #508]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80044f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f4:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004500:	d048      	beq.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004508:	d85a      	bhi.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004510:	d037      	beq.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004518:	d852      	bhi.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004520:	d02b      	beq.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004528:	d84a      	bhi.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004530:	d019      	beq.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004538:	d842      	bhi.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004546:	d004      	beq.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
          break;
 8004548:	e03a      	b.n	80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = HAL_RCC_GetHCLKFreq();
 800454a:	f7fe f9bf 	bl	80028cc <HAL_RCC_GetHCLKFreq>
 800454e:	6178      	str	r0, [r7, #20]
          break;
 8004550:	e043      	b.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004552:	4b67      	ldr	r3, [pc, #412]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004556:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d033      	beq.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            frequency = HAL_RCC_GetPLL2PFreq();
 800455e:	f7fe fa47 	bl	80029f0 <HAL_RCC_GetPLL2PFreq>
 8004562:	6178      	str	r0, [r7, #20]
          break;
 8004564:	e02f      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004566:	4b62      	ldr	r3, [pc, #392]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d02c      	beq.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HAL_RCC_GetPLL3PFreq();
 8004572:	f7fe faad 	bl	8002ad0 <HAL_RCC_GetPLL3PFreq>
 8004576:	6178      	str	r0, [r7, #20]
          break;
 8004578:	e028      	b.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = EXTERNAL_CLOCK_VALUE;
 800457a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800457e:	617b      	str	r3, [r7, #20]
          break;
 8004580:	e02b      	b.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004582:	4b5b      	ldr	r3, [pc, #364]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d021      	beq.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
            frequency = CSI_VALUE;
 800458e:	4b59      	ldr	r3, [pc, #356]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004590:	617b      	str	r3, [r7, #20]
          break;
 8004592:	e01e      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004594:	4b56      	ldr	r3, [pc, #344]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01b      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80045a0:	4b53      	ldr	r3, [pc, #332]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d015      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045ac:	4b50      	ldr	r3, [pc, #320]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	08db      	lsrs	r3, r3, #3
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	4a50      	ldr	r2, [pc, #320]	@ (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]
          break;
 80045be:	e00b      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
          break;
 80045c0:	bf00      	nop
 80045c2:	f001 b804 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045c6:	bf00      	nop
 80045c8:	f001 b801 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045cc:	bf00      	nop
 80045ce:	f000 bffe 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045d2:	bf00      	nop
 80045d4:	f000 bffb 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80045d8:	bf00      	nop
      break;
 80045da:	f000 bff8 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_CEC_SOURCE();
 80045de:	4b44      	ldr	r3, [pc, #272]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80045e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045ee:	d01f      	beq.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045f6:	d824      	bhi.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
          break;
 8004606:	e01c      	b.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004608:	4b39      	ldr	r3, [pc, #228]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d019      	beq.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
            frequency = LSE_VALUE;
 8004614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004618:	617b      	str	r3, [r7, #20]
          break;
 800461a:	e015      	b.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800461c:	4b34      	ldr	r3, [pc, #208]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800461e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d012      	beq.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
            frequency = LSI_VALUE;
 8004628:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800462c:	617b      	str	r3, [r7, #20]
          break;
 800462e:	e00e      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004630:	4b2f      	ldr	r3, [pc, #188]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00b      	beq.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
            frequency = CSI_VALUE;
 800463c:	4b2d      	ldr	r3, [pc, #180]	@ (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800463e:	617b      	str	r3, [r7, #20]
          break;
 8004640:	e008      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
          break;
 8004642:	bf00      	nop
 8004644:	f000 bfc3 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004648:	bf00      	nop
 800464a:	f000 bfc0 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800464e:	bf00      	nop
 8004650:	f000 bfbd 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004654:	bf00      	nop
      break;
 8004656:	f000 bfba 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_ETH1REF_SOURCE();
 800465a:	4b25      	ldr	r3, [pc, #148]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800465c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800466a:	d013      	beq.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004672:	d833      	bhi.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d033      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004680:	d12c      	bne.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004682:	4b1b      	ldr	r3, [pc, #108]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d02c      	beq.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
            frequency = HSE_VALUE;
 800468e:	4b1b      	ldr	r3, [pc, #108]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004690:	617b      	str	r3, [r7, #20]
          break;
 8004692:	e029      	b.n	80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          ethclocksource = __HAL_RCC_GET_ETH1PHY_SOURCE();
 8004694:	4b16      	ldr	r3, [pc, #88]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004698:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046aa:	d009      	beq.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
              break;
 80046ac:	e015      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
              if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046ae:	4b10      	ldr	r3, [pc, #64]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00c      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
                frequency = HSE_VALUE;
 80046ba:	4b10      	ldr	r3, [pc, #64]	@ (80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 80046bc:	617b      	str	r3, [r7, #20]
              break;
 80046be:	e009      	b.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
              if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 80046c0:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
                frequency = HAL_RCC_GetPLL3SFreq();
 80046cc:	f7fe fa42 	bl	8002b54 <HAL_RCC_GetPLL3SFreq>
 80046d0:	6178      	str	r0, [r7, #20]
              break;
 80046d2:	e001      	b.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
              break;
 80046d4:	bf00      	nop
 80046d6:	e008      	b.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              break;
 80046d8:	bf00      	nop
          break;
 80046da:	e006      	b.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x792>
          break;
 80046dc:	bf00      	nop
 80046de:	f000 bf76 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80046e2:	bf00      	nop
 80046e4:	f000 bf73 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80046e8:	bf00      	nop
      break;
 80046ea:	f000 bf70 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 80046ee:	bf00      	nop
 80046f0:	58024400 	.word	0x58024400
 80046f4:	003d0900 	.word	0x003d0900
 80046f8:	03d09000 	.word	0x03d09000
 80046fc:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_ETH1PHY_SOURCE();
 8004700:	4b87      	ldr	r3, [pc, #540]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004704:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d004      	beq.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004716:	d009      	beq.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          break;
 8004718:	e016      	b.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800471a:	4b81      	ldr	r3, [pc, #516]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            frequency = HSE_VALUE;
 8004726:	4b7f      	ldr	r3, [pc, #508]	@ (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>)
 8004728:	617b      	str	r3, [r7, #20]
          break;
 800472a:	e009      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 800472c:	4b7c      	ldr	r3, [pc, #496]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d006      	beq.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = HAL_RCC_GetPLL3SFreq();
 8004738:	f7fe fa0c 	bl	8002b54 <HAL_RCC_GetPLL3SFreq>
 800473c:	6178      	str	r0, [r7, #20]
          break;
 800473e:	e002      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 8004740:	bf00      	nop
 8004742:	f000 bf44 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004746:	bf00      	nop
      break;
 8004748:	f000 bf41 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_FDCAN_SOURCE();
 800474c:	4b74      	ldr	r3, [pc, #464]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800474e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004750:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800475c:	d01e      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004764:	d824      	bhi.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004772:	d009      	beq.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
          break;
 8004774:	e01c      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004776:	4b6a      	ldr	r3, [pc, #424]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d019      	beq.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = HSE_VALUE;
 8004782:	4b68      	ldr	r3, [pc, #416]	@ (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x9cc>)
 8004784:	617b      	str	r3, [r7, #20]
          break;
 8004786:	e016      	b.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004788:	4b65      	ldr	r3, [pc, #404]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d013      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004794:	f7fe f916 	bl	80029c4 <HAL_RCC_GetPLL1QFreq>
 8004798:	6178      	str	r0, [r7, #20]
          break;
 800479a:	e00f      	b.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800479c:	4b60      	ldr	r3, [pc, #384]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00c      	beq.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HAL_RCC_GetPLL2PFreq();
 80047a8:	f7fe f922 	bl	80029f0 <HAL_RCC_GetPLL2PFreq>
 80047ac:	6178      	str	r0, [r7, #20]
          break;
 80047ae:	e008      	b.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          break;
 80047b0:	bf00      	nop
 80047b2:	f000 bf0c 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80047b6:	bf00      	nop
 80047b8:	f000 bf09 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80047bc:	bf00      	nop
 80047be:	f000 bf06 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80047c2:	bf00      	nop
      break;
 80047c4:	f000 bf03 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_I2C23_SOURCE();
 80047c8:	4b55      	ldr	r3, [pc, #340]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80047ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047d8:	d037      	beq.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047e0:	d83c      	bhi.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e8:	d019      	beq.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047f0:	d834      	bhi.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047fe:	d004      	beq.n	800480a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 8004800:	e02c      	b.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004802:	f7fe f88b 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 8004806:	6178      	str	r0, [r7, #20]
          break;
 8004808:	e032      	b.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 800480a:	4b45      	ldr	r3, [pc, #276]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800480c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d025      	beq.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004816:	f7fe f987 	bl	8002b28 <HAL_RCC_GetPLL3RFreq>
 800481a:	6178      	str	r0, [r7, #20]
          break;
 800481c:	e021      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800481e:	4b40      	ldr	r3, [pc, #256]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01e      	beq.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800482a:	4b3d      	ldr	r3, [pc, #244]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004836:	4b3a      	ldr	r3, [pc, #232]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	08db      	lsrs	r3, r3, #3
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	4a39      	ldr	r2, [pc, #228]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>)
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	617b      	str	r3, [r7, #20]
          break;
 8004848:	e00e      	b.n	8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800484a:	4b35      	ldr	r3, [pc, #212]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x916>
            frequency = CSI_VALUE;
 8004856:	4b35      	ldr	r3, [pc, #212]	@ (800492c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>)
 8004858:	617b      	str	r3, [r7, #20]
          break;
 800485a:	e008      	b.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x916>
          break;
 800485c:	bf00      	nop
 800485e:	f000 beb6 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004862:	bf00      	nop
 8004864:	f000 beb3 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004868:	bf00      	nop
 800486a:	f000 beb0 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800486e:	bf00      	nop
      break;
 8004870:	f000 bead 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_I2C1_I3C1_SOURCE();
 8004874:	4b2a      	ldr	r3, [pc, #168]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004884:	d037      	beq.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800488c:	d83c      	bhi.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004894:	d019      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800489c:	d834      	bhi.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048aa:	d004      	beq.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          break;
 80048ac:	e02c      	b.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048ae:	f7fe f835 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 80048b2:	6178      	str	r0, [r7, #20]
          break;
 80048b4:	e032      	b.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 80048b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d025      	beq.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
            frequency = HAL_RCC_GetPLL3RFreq();
 80048c2:	f7fe f931 	bl	8002b28 <HAL_RCC_GetPLL3RFreq>
 80048c6:	6178      	str	r0, [r7, #20]
          break;
 80048c8:	e021      	b.n	800490e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ca:	4b15      	ldr	r3, [pc, #84]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01e      	beq.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80048d6:	4b12      	ldr	r3, [pc, #72]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d018      	beq.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80048e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	08db      	lsrs	r3, r3, #3
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>)
 80048ee:	fa22 f303 	lsr.w	r3, r2, r3
 80048f2:	617b      	str	r3, [r7, #20]
          break;
 80048f4:	e00e      	b.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80048f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x9c8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
            frequency = CSI_VALUE;
 8004902:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>)
 8004904:	617b      	str	r3, [r7, #20]
          break;
 8004906:	e008      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
          break;
 8004908:	bf00      	nop
 800490a:	f000 be60 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800490e:	bf00      	nop
 8004910:	f000 be5d 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004914:	bf00      	nop
 8004916:	f000 be5a 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800491a:	bf00      	nop
      break;
 800491c:	f000 be57 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004920:	58024400 	.word	0x58024400
 8004924:	016e3600 	.word	0x016e3600
 8004928:	03d09000 	.word	0x03d09000
 800492c:	003d0900 	.word	0x003d0900
      clocksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004930:	4ba0      	ldr	r3, [pc, #640]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004934:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004940:	d04f      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004948:	d84f      	bhi.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004950:	d03d      	beq.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004958:	d847      	bhi.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004960:	d02b      	beq.n	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004968:	d83f      	bhi.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004970:	d019      	beq.n	80049a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004978:	d837      	bhi.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004986:	d004      	beq.n	8004992 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
          break;
 8004988:	e02f      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = HAL_RCC_GetPCLK1Freq();
 800498a:	f7fd ffc7 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 800498e:	6178      	str	r0, [r7, #20]
          break;
 8004990:	e038      	b.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004992:	4b88      	ldr	r3, [pc, #544]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d028      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
            frequency = HAL_RCC_GetPLL2PFreq();
 800499e:	f7fe f827 	bl	80029f0 <HAL_RCC_GetPLL2PFreq>
 80049a2:	6178      	str	r0, [r7, #20]
          break;
 80049a4:	e024      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 80049a6:	4b83      	ldr	r3, [pc, #524]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d021      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
            frequency = HAL_RCC_GetPLL3RFreq();
 80049b2:	f7fe f8b9 	bl	8002b28 <HAL_RCC_GetPLL3RFreq>
 80049b6:	6178      	str	r0, [r7, #20]
          break;
 80049b8:	e01d      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049ba:	4b7e      	ldr	r3, [pc, #504]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01a      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049ca:	617b      	str	r3, [r7, #20]
          break;
 80049cc:	e016      	b.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049ce:	4b79      	ldr	r3, [pc, #484]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 80049d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d013      	beq.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = LSI_VALUE;
 80049da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80049de:	617b      	str	r3, [r7, #20]
          break;
 80049e0:	e00f      	b.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          frequency = RCC_GetCLKPFreq();
 80049e2:	f000 fe0d 	bl	8005600 <RCC_GetCLKPFreq>
 80049e6:	6178      	str	r0, [r7, #20]
          break;
 80049e8:	e00c      	b.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          break;
 80049ea:	bf00      	nop
 80049ec:	f000 bdef 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049f0:	bf00      	nop
 80049f2:	f000 bdec 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049f6:	bf00      	nop
 80049f8:	f000 bde9 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80049fc:	bf00      	nop
 80049fe:	f000 bde6 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004a02:	bf00      	nop
      break;
 8004a04:	f000 bde3 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPTIM23_SOURCE();
 8004a08:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a18:	d04f      	beq.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004a20:	d84f      	bhi.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a28:	d03d      	beq.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a30:	d847      	bhi.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a38:	d02b      	beq.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a40:	d83f      	bhi.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a48:	d019      	beq.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a50:	d837      	bhi.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a5e:	d004      	beq.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          break;
 8004a60:	e02f      	b.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetPCLK4Freq();
 8004a62:	f7fd ff93 	bl	800298c <HAL_RCC_GetPCLK4Freq>
 8004a66:	6178      	str	r0, [r7, #20]
          break;
 8004a68:	e038      	b.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004a6a:	4b52      	ldr	r3, [pc, #328]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d028      	beq.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004a76:	f7fd ffbb 	bl	80029f0 <HAL_RCC_GetPLL2PFreq>
 8004a7a:	6178      	str	r0, [r7, #20]
          break;
 8004a7c:	e024      	b.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004a7e:	4b4d      	ldr	r3, [pc, #308]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d021      	beq.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004a8a:	f7fe f84d 	bl	8002b28 <HAL_RCC_GetPLL3RFreq>
 8004a8e:	6178      	str	r0, [r7, #20]
          break;
 8004a90:	e01d      	b.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a92:	4b48      	ldr	r3, [pc, #288]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01a      	beq.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
            frequency = LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa2:	617b      	str	r3, [r7, #20]
          break;
 8004aa4:	e016      	b.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004aa6:	4b43      	ldr	r3, [pc, #268]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d013      	beq.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
            frequency = LSI_VALUE;
 8004ab2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004ab6:	617b      	str	r3, [r7, #20]
          break;
 8004ab8:	e00f      	b.n	8004ada <HAL_RCCEx_GetPeriphCLKFreq+0xb82>
          frequency = RCC_GetCLKPFreq();
 8004aba:	f000 fda1 	bl	8005600 <RCC_GetCLKPFreq>
 8004abe:	6178      	str	r0, [r7, #20]
          break;
 8004ac0:	e00c      	b.n	8004adc <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
          break;
 8004ac2:	bf00      	nop
 8004ac4:	f000 bd83 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ac8:	bf00      	nop
 8004aca:	f000 bd80 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ace:	bf00      	nop
 8004ad0:	f000 bd7d 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ad4:	bf00      	nop
 8004ad6:	f000 bd7a 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ada:	bf00      	nop
      break;
 8004adc:	f000 bd77 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPTIM45_SOURCE();
 8004ae0:	4b34      	ldr	r3, [pc, #208]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004af0:	d04f      	beq.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004af8:	d84f      	bhi.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b00:	d03d      	beq.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0xc26>
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b08:	d847      	bhi.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b10:	d02b      	beq.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b18:	d83f      	bhi.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b20:	d019      	beq.n	8004b56 <HAL_RCCEx_GetPeriphCLKFreq+0xbfe>
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b28:	d837      	bhi.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b36:	d004      	beq.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 8004b38:	e02f      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          frequency = HAL_RCC_GetPCLK4Freq();
 8004b3a:	f7fd ff27 	bl	800298c <HAL_RCC_GetPCLK4Freq>
 8004b3e:	6178      	str	r0, [r7, #20]
          break;
 8004b40:	e03b      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004b42:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d028      	beq.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc48>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004b4e:	f7fd ff4f 	bl	80029f0 <HAL_RCC_GetPLL2PFreq>
 8004b52:	6178      	str	r0, [r7, #20]
          break;
 8004b54:	e024      	b.n	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xc48>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004b56:	4b17      	ldr	r3, [pc, #92]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d021      	beq.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004b62:	f7fd ffe1 	bl	8002b28 <HAL_RCC_GetPLL3RFreq>
 8004b66:	6178      	str	r0, [r7, #20]
          break;
 8004b68:	e01d      	b.n	8004ba6 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b6a:	4b12      	ldr	r3, [pc, #72]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01a      	beq.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
            frequency = LSE_VALUE;
 8004b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b7a:	617b      	str	r3, [r7, #20]
          break;
 8004b7c:	e016      	b.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>)
 8004b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d016      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
            frequency = LSI_VALUE;
 8004b8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004b8e:	617b      	str	r3, [r7, #20]
          break;
 8004b90:	e012      	b.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
          frequency = RCC_GetCLKPFreq();
 8004b92:	f000 fd35 	bl	8005600 <RCC_GetCLKPFreq>
 8004b96:	6178      	str	r0, [r7, #20]
          break;
 8004b98:	e00f      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xc62>
          break;
 8004b9a:	bf00      	nop
 8004b9c:	f000 bd17 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ba0:	bf00      	nop
 8004ba2:	f000 bd14 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ba6:	bf00      	nop
 8004ba8:	f000 bd11 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004bac:	bf00      	nop
 8004bae:	f000 bd0e 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
          break;
 8004bb8:	bf00      	nop
      break;
 8004bba:	f000 bd08 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_LPUART1_SOURCE();
 8004bbe:	4ba3      	ldr	r3, [pc, #652]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b05      	cmp	r3, #5
 8004bcc:	d84f      	bhi.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
 8004bce:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004bed 	.word	0x08004bed
 8004bd8:	08004bf5 	.word	0x08004bf5
 8004bdc:	08004c09 	.word	0x08004c09
 8004be0:	08004c1d 	.word	0x08004c1d
 8004be4:	08004c49 	.word	0x08004c49
 8004be8:	08004c5b 	.word	0x08004c5b
          frequency = HAL_RCC_GetPCLK4Freq();
 8004bec:	f7fd fece 	bl	800298c <HAL_RCC_GetPCLK4Freq>
 8004bf0:	6178      	str	r0, [r7, #20]
          break;
 8004bf2:	e04c      	b.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004bf4:	4b95      	ldr	r3, [pc, #596]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d039      	beq.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
            frequency = HAL_RCC_GetPLL2QFreq();
 8004c00:	f7fd ff0c 	bl	8002a1c <HAL_RCC_GetPLL2QFreq>
 8004c04:	6178      	str	r0, [r7, #20]
          break;
 8004c06:	e035      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004c08:	4b90      	ldr	r3, [pc, #576]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d032      	beq.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xd22>
            frequency = HAL_RCC_GetPLL3QFreq();
 8004c14:	f7fd ff72 	bl	8002afc <HAL_RCC_GetPLL3QFreq>
 8004c18:	6178      	str	r0, [r7, #20]
          break;
 8004c1a:	e02e      	b.n	8004c7a <HAL_RCCEx_GetPeriphCLKFreq+0xd22>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c1c:	4b8b      	ldr	r3, [pc, #556]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d02b      	beq.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004c28:	4b88      	ldr	r3, [pc, #544]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d025      	beq.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c34:	4b85      	ldr	r3, [pc, #532]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	08db      	lsrs	r3, r3, #3
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	4a84      	ldr	r2, [pc, #528]	@ (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>)
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]
          break;
 8004c46:	e01b      	b.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004c48:	4b80      	ldr	r3, [pc, #512]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d018      	beq.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = CSI_VALUE;
 8004c54:	4b7f      	ldr	r3, [pc, #508]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xefc>)
 8004c56:	617b      	str	r3, [r7, #20]
          break;
 8004c58:	e015      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c5a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d012      	beq.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
            frequency = LSE_VALUE;
 8004c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c6a:	617b      	str	r3, [r7, #20]
          break;
 8004c6c:	e00e      	b.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          break;
 8004c6e:	bf00      	nop
 8004c70:	f000 bcad 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c74:	bf00      	nop
 8004c76:	f000 bcaa 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c7a:	bf00      	nop
 8004c7c:	f000 bca7 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c80:	bf00      	nop
 8004c82:	f000 bca4 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c86:	bf00      	nop
 8004c88:	f000 bca1 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004c8c:	bf00      	nop
      break;
 8004c8e:	f000 bc9e 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004c92:	4b6e      	ldr	r3, [pc, #440]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8494 	beq.w	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
        frequency = HAL_RCC_GetPLL3RFreq();
 8004ca0:	f7fd ff42 	bl	8002b28 <HAL_RCC_GetPLL3RFreq>
 8004ca4:	6178      	str	r0, [r7, #20]
      break;
 8004ca6:	f000 bc8f 	b.w	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
      clocksource = __HAL_RCC_GET_PSSI_SOURCE();
 8004caa:	4b68      	ldr	r3, [pc, #416]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>
          break;
 8004cc2:	e00e      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004cc4:	4b61      	ldr	r3, [pc, #388]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004cd0:	f7fd ff2a 	bl	8002b28 <HAL_RCC_GetPLL3RFreq>
 8004cd4:	6178      	str	r0, [r7, #20]
          break;
 8004cd6:	e003      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>
          frequency = RCC_GetCLKPFreq();
 8004cd8:	f000 fc92 	bl	8005600 <RCC_GetCLKPFreq>
 8004cdc:	6178      	str	r0, [r7, #20]
          break;
 8004cde:	e000      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
          break;
 8004ce0:	bf00      	nop
      break;
 8004ce2:	f000 bc74 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_RTC_SOURCE();
 8004ce6:	4b59      	ldr	r3, [pc, #356]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf2:	d107      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
 8004cf4:	4b55      	ldr	r3, [pc, #340]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 8004cfe:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004d02:	e003      	b.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8004d04:	4b51      	ldr	r3, [pc, #324]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d14:	d014      	beq.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d1c:	d81a      	bhi.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d033      	beq.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d2a:	d113      	bne.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d2c:	4b47      	ldr	r3, [pc, #284]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d02c      	beq.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
            frequency = LSE_VALUE;
 8004d38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d3c:	617b      	str	r3, [r7, #20]
          break;
 8004d3e:	e028      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0xe3a>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d40:	4b42      	ldr	r3, [pc, #264]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d025      	beq.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
            frequency = LSI_VALUE;
 8004d4c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d50:	617b      	str	r3, [r7, #20]
          break;
 8004d52:	e021      	b.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL) == RCC_BDCR_RTCSEL) /*!< HSE is the clock source for RTC */
 8004d54:	4b3d      	ldr	r3, [pc, #244]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d60:	d11d      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d62:	4b3a      	ldr	r3, [pc, #232]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d017      	beq.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
              prescaler = READ_BIT(RCC->CFGR, RCC_CFGR_RTCPRE) >> RCC_CFGR_RTCPRE_Pos;
 8004d6e:	4b37      	ldr	r3, [pc, #220]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d78:	60fb      	str	r3, [r7, #12]
              if (prescaler > 1U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d90e      	bls.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
                frequency = HSE_VALUE / prescaler;
 8004d80:	4a35      	ldr	r2, [pc, #212]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]
          break;
 8004d8a:	e008      	b.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
          break;
 8004d8c:	bf00      	nop
 8004d8e:	f000 bc1e 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004d92:	bf00      	nop
 8004d94:	f000 bc1b 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004d98:	bf00      	nop
 8004d9a:	f000 bc18 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004d9e:	bf00      	nop
      break;
 8004da0:	f000 bc15 	b.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004da4:	4b29      	ldr	r3, [pc, #164]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004db4:	d039      	beq.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dbc:	d83d      	bhi.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dc4:	d035      	beq.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0xeda>
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dcc:	d835      	bhi.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dd4:	d01f      	beq.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0xebe>
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ddc:	d82d      	bhi.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d004      	beq.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
          break;
 8004dec:	e025      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0xee2>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004dee:	4b17      	ldr	r3, [pc, #92]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d021      	beq.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004dfa:	f7fd fde3 	bl	80029c4 <HAL_RCC_GetPLL1QFreq>
 8004dfe:	6178      	str	r0, [r7, #20]
          break;
 8004e00:	e01d      	b.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004e02:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d019      	beq.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004e0e:	f7fd fdef 	bl	80029f0 <HAL_RCC_GetPLL2PFreq>
 8004e12:	6178      	str	r0, [r7, #20]
          break;
 8004e14:	e015      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004e16:	4b0d      	ldr	r3, [pc, #52]	@ (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d011      	beq.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
            frequency = HAL_RCC_GetPLL3PFreq();
 8004e22:	f7fd fe55 	bl	8002ad0 <HAL_RCC_GetPLL3PFreq>
 8004e26:	6178      	str	r0, [r7, #20]
          break;
 8004e28:	e00d      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0xeee>
          frequency = RCC_GetCLKPFreq();
 8004e2a:	f000 fbe9 	bl	8005600 <RCC_GetCLKPFreq>
 8004e2e:	6178      	str	r0, [r7, #20]
          break;
 8004e30:	e00a      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e32:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004e36:	617b      	str	r3, [r7, #20]
          break;
 8004e38:	e006      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
          break;
 8004e3a:	bf00      	nop
 8004e3c:	e3c7      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e3e:	bf00      	nop
 8004e40:	e3c5      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e42:	bf00      	nop
 8004e44:	e3c3      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004e46:	bf00      	nop
      break;
 8004e48:	e3c1      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8004e4a:	bf00      	nop
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	03d09000 	.word	0x03d09000
 8004e54:	003d0900 	.word	0x003d0900
 8004e58:	016e3600 	.word	0x016e3600
      clocksource = __HAL_RCC_GET_SAI2_SOURCE();
 8004e5c:	4b94      	ldr	r3, [pc, #592]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e60:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004e6c:	d049      	beq.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0xfaa>
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004e74:	d847      	bhi.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e7c:	d039      	beq.n	8004ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e84:	d83f      	bhi.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e8c:	d035      	beq.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0xfa2>
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e94:	d837      	bhi.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e9c:	d01f      	beq.n	8004ede <HAL_RCCEx_GetPeriphCLKFreq+0xf86>
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ea4:	d82f      	bhi.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d004      	beq.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0xf72>
          break;
 8004eb4:	e027      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004eb6:	4b7e      	ldr	r3, [pc, #504]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d023      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004ec2:	f7fd fd7f 	bl	80029c4 <HAL_RCC_GetPLL1QFreq>
 8004ec6:	6178      	str	r0, [r7, #20]
          break;
 8004ec8:	e01f      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004eca:	4b79      	ldr	r3, [pc, #484]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01b      	beq.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0xfb6>
            frequency = HAL_RCC_GetPLL2PFreq();
 8004ed6:	f7fd fd8b 	bl	80029f0 <HAL_RCC_GetPLL2PFreq>
 8004eda:	6178      	str	r0, [r7, #20]
          break;
 8004edc:	e017      	b.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0xfb6>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8004ede:	4b74      	ldr	r3, [pc, #464]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d013      	beq.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            frequency = HAL_RCC_GetPLL3PFreq();
 8004eea:	f7fd fdf1 	bl	8002ad0 <HAL_RCC_GetPLL3PFreq>
 8004eee:	6178      	str	r0, [r7, #20]
          break;
 8004ef0:	e00f      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
          frequency = RCC_GetCLKPFreq();
 8004ef2:	f000 fb85 	bl	8005600 <RCC_GetCLKPFreq>
 8004ef6:	6178      	str	r0, [r7, #20]
          break;
 8004ef8:	e00c      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
          frequency = EXTERNAL_CLOCK_VALUE;
 8004efa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004efe:	617b      	str	r3, [r7, #20]
          break;
 8004f00:	e008      	b.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
          break;
 8004f02:	bf00      	nop
 8004f04:	e363      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f06:	bf00      	nop
 8004f08:	e361      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f0a:	bf00      	nop
 8004f0c:	e35f      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f0e:	bf00      	nop
 8004f10:	e35d      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004f12:	bf00      	nop
      break;
 8004f14:	e35b      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SDMMC12_SOURCE();
 8004f16:	4b66      	ldr	r3, [pc, #408]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	613b      	str	r3, [r7, #16]
      if (clocksource ==
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
        if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_SCLK) != 0U)
 8004f26:	4b62      	ldr	r3, [pc, #392]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 834c 	beq.w	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
          frequency = HAL_RCC_GetPLL2SFreq();
 8004f34:	f7fd fd9e 	bl	8002a74 <HAL_RCC_GetPLL2SFreq>
 8004f38:	6178      	str	r0, [r7, #20]
      break;
 8004f3a:	e347      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_TCLK) != 0U)
 8004f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 8341 	beq.w	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
          frequency = HAL_RCC_GetPLL2TFreq();
 8004f4a:	f7fd fda9 	bl	8002aa0 <HAL_RCC_GetPLL2TFreq>
 8004f4e:	6178      	str	r0, [r7, #20]
      break;
 8004f50:	e33c      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
      clocksource = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8004f52:	4b57      	ldr	r3, [pc, #348]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f56:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f62:	d031      	beq.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1070>
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f6a:	d843      	bhi.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f72:	d01f      	beq.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f7a:	d83b      	bhi.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d004      	beq.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
          break;
 8004f8a:	e033      	b.n	8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x109c>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8004f8c:	4b48      	ldr	r3, [pc, #288]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02f      	beq.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
            frequency = HAL_RCC_GetPLL1QFreq();
 8004f98:	f7fd fd14 	bl	80029c4 <HAL_RCC_GetPLL1QFreq>
 8004f9c:	6178      	str	r0, [r7, #20]
          break;
 8004f9e:	e02b      	b.n	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004fa0:	4b43      	ldr	r3, [pc, #268]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d027      	beq.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
            frequency = HAL_RCC_GetPLL2RFreq();
 8004fac:	f7fd fd4c 	bl	8002a48 <HAL_RCC_GetPLL2RFreq>
 8004fb0:	6178      	str	r0, [r7, #20]
          break;
 8004fb2:	e023      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_RCLK) != 0U)
 8004fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01f      	beq.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
            frequency = HAL_RCC_GetPLL3RFreq();
 8004fc0:	f7fd fdb2 	bl	8002b28 <HAL_RCC_GetPLL3RFreq>
 8004fc4:	6178      	str	r0, [r7, #20]
          break;
 8004fc6:	e01b      	b.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x10a8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fc8:	4b39      	ldr	r3, [pc, #228]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d017      	beq.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8004fd4:	4b36      	ldr	r3, [pc, #216]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d011      	beq.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fe0:	4b33      	ldr	r3, [pc, #204]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	08db      	lsrs	r3, r3, #3
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	4a32      	ldr	r2, [pc, #200]	@ (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x115c>)
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	617b      	str	r3, [r7, #20]
          break;
 8004ff2:	e007      	b.n	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x10ac>
          break;
 8004ff4:	bf00      	nop
 8004ff6:	e2ea      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ff8:	bf00      	nop
 8004ffa:	e2e8      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8004ffc:	bf00      	nop
 8004ffe:	e2e6      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005000:	bf00      	nop
 8005002:	e2e4      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005004:	bf00      	nop
      break;
 8005006:	e2e2      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI1_SOURCE();
 8005008:	4b29      	ldr	r3, [pc, #164]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800500a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005018:	d039      	beq.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005020:	d83d      	bhi.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005028:	d035      	beq.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x113e>
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005030:	d835      	bhi.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005038:	d01f      	beq.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005040:	d82d      	bhi.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x10fa>
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800504e:	d00a      	beq.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x110e>
          break;
 8005050:	e025      	b.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x1146>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005052:	4b17      	ldr	r3, [pc, #92]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d021      	beq.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
            frequency = HAL_RCC_GetPLL1QFreq();
 800505e:	f7fd fcb1 	bl	80029c4 <HAL_RCC_GetPLL1QFreq>
 8005062:	6178      	str	r0, [r7, #20]
          break;
 8005064:	e01d      	b.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x114a>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8005066:	4b12      	ldr	r3, [pc, #72]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 8005068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d019      	beq.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
            frequency = HAL_RCC_GetPLL2PFreq();
 8005072:	f7fd fcbd 	bl	80029f0 <HAL_RCC_GetPLL2PFreq>
 8005076:	6178      	str	r0, [r7, #20]
          break;
 8005078:	e015      	b.n	80050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>)
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d011      	beq.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
            frequency = HAL_RCC_GetPLL3PFreq();
 8005086:	f7fd fd23 	bl	8002ad0 <HAL_RCC_GetPLL3PFreq>
 800508a:	6178      	str	r0, [r7, #20]
          break;
 800508c:	e00d      	b.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
          frequency = RCC_GetCLKPFreq();
 800508e:	f000 fab7 	bl	8005600 <RCC_GetCLKPFreq>
 8005092:	6178      	str	r0, [r7, #20]
          break;
 8005094:	e00a      	b.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005096:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800509a:	617b      	str	r3, [r7, #20]
          break;
 800509c:	e006      	b.n	80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x1154>
          break;
 800509e:	bf00      	nop
 80050a0:	e295      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80050a2:	bf00      	nop
 80050a4:	e293      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80050a6:	bf00      	nop
 80050a8:	e291      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80050aa:	bf00      	nop
      break;
 80050ac:	e28f      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 80050ae:	bf00      	nop
 80050b0:	58024400 	.word	0x58024400
 80050b4:	03d09000 	.word	0x03d09000
      clocksource = __HAL_RCC_GET_SPI23_SOURCE();
 80050b8:	4b92      	ldr	r3, [pc, #584]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80050ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b40      	cmp	r3, #64	@ 0x40
 80050c6:	d033      	beq.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b40      	cmp	r3, #64	@ 0x40
 80050cc:	d838      	bhi.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b30      	cmp	r3, #48	@ 0x30
 80050d2:	d031      	beq.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b30      	cmp	r3, #48	@ 0x30
 80050d8:	d832      	bhi.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d01d      	beq.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d82c      	bhi.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x119c>
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
          break;
 80050f2:	e025      	b.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
          if (__HAL_RCC_GET_PLL1CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80050f4:	4b83      	ldr	r3, [pc, #524]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d021      	beq.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
            frequency = HAL_RCC_GetPLL1QFreq();
 8005100:	f7fd fc60 	bl	80029c4 <HAL_RCC_GetPLL1QFreq>
 8005104:	6178      	str	r0, [r7, #20]
          break;
 8005106:	e01d      	b.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 8005108:	4b7e      	ldr	r3, [pc, #504]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d019      	beq.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x11f0>
            frequency = HAL_RCC_GetPLL2PFreq();
 8005114:	f7fd fc6c 	bl	80029f0 <HAL_RCC_GetPLL2PFreq>
 8005118:	6178      	str	r0, [r7, #20]
          break;
 800511a:	e015      	b.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x11f0>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_PCLK) != 0U)
 800511c:	4b79      	ldr	r3, [pc, #484]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 800511e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d011      	beq.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
            frequency = HAL_RCC_GetPLL3PFreq();
 8005128:	f7fd fcd2 	bl	8002ad0 <HAL_RCC_GetPLL3PFreq>
 800512c:	6178      	str	r0, [r7, #20]
          break;
 800512e:	e00d      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
          frequency = RCC_GetCLKPFreq();
 8005130:	f000 fa66 	bl	8005600 <RCC_GetCLKPFreq>
 8005134:	6178      	str	r0, [r7, #20]
          break;
 8005136:	e00a      	b.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
          frequency = EXTERNAL_CLOCK_VALUE;
 8005138:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800513c:	617b      	str	r3, [r7, #20]
          break;
 800513e:	e006      	b.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x11f6>
          break;
 8005140:	bf00      	nop
 8005142:	e244      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005144:	bf00      	nop
 8005146:	e242      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005148:	bf00      	nop
 800514a:	e240      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800514c:	bf00      	nop
      break;
 800514e:	e23e      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI45_SOURCE();
 8005150:	4b6c      	ldr	r3, [pc, #432]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005154:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b50      	cmp	r3, #80	@ 0x50
 800515e:	d052      	beq.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b50      	cmp	r3, #80	@ 0x50
 8005164:	d858      	bhi.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b40      	cmp	r3, #64	@ 0x40
 800516a:	d043      	beq.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b40      	cmp	r3, #64	@ 0x40
 8005170:	d852      	bhi.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b30      	cmp	r3, #48	@ 0x30
 8005176:	d027      	beq.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b30      	cmp	r3, #48	@ 0x30
 800517c:	d84c      	bhi.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b20      	cmp	r3, #32
 8005182:	d017      	beq.n	80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2b20      	cmp	r3, #32
 8005188:	d846      	bhi.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2b10      	cmp	r3, #16
 8005194:	d004      	beq.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
          break;
 8005196:	e03f      	b.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005198:	f7fd fbdc 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 800519c:	6178      	str	r0, [r7, #20]
          break;
 800519e:	e046      	b.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80051a0:	4b58      	ldr	r3, [pc, #352]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d037      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x12c4>
            frequency = HAL_RCC_GetPLL2QFreq();
 80051ac:	f7fd fc36 	bl	8002a1c <HAL_RCC_GetPLL2QFreq>
 80051b0:	6178      	str	r0, [r7, #20]
          break;
 80051b2:	e033      	b.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x12c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 80051b4:	4b53      	ldr	r3, [pc, #332]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02f      	beq.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x12c8>
            frequency = HAL_RCC_GetPLL3QFreq();
 80051c0:	f7fd fc9c 	bl	8002afc <HAL_RCC_GetPLL3QFreq>
 80051c4:	6178      	str	r0, [r7, #20]
          break;
 80051c6:	e02b      	b.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x12c8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051c8:	4b4e      	ldr	r3, [pc, #312]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d027      	beq.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80051d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d021      	beq.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051e0:	4b48      	ldr	r3, [pc, #288]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	08db      	lsrs	r3, r3, #3
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	4a47      	ldr	r2, [pc, #284]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]
          break;
 80051f2:	e017      	b.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x12cc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80051f4:	4b43      	ldr	r3, [pc, #268]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d013      	beq.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
            frequency = CSI_VALUE;
 8005200:	4b42      	ldr	r3, [pc, #264]	@ (800530c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8005202:	617b      	str	r3, [r7, #20]
          break;
 8005204:	e010      	b.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x12d0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005206:	4b3f      	ldr	r3, [pc, #252]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00c      	beq.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
            frequency = HSE_VALUE;
 8005212:	4b3f      	ldr	r3, [pc, #252]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8005214:	617b      	str	r3, [r7, #20]
          break;
 8005216:	e009      	b.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
          break;
 8005218:	bf00      	nop
 800521a:	e1d8      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800521c:	bf00      	nop
 800521e:	e1d6      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005220:	bf00      	nop
 8005222:	e1d4      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005224:	bf00      	nop
 8005226:	e1d2      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005228:	bf00      	nop
 800522a:	e1d0      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800522c:	bf00      	nop
      break;
 800522e:	e1ce      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_SPI6_SOURCE();
 8005230:	4b34      	ldr	r3, [pc, #208]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005234:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b50      	cmp	r3, #80	@ 0x50
 800523e:	d052      	beq.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x138e>
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b50      	cmp	r3, #80	@ 0x50
 8005244:	d858      	bhi.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b40      	cmp	r3, #64	@ 0x40
 800524a:	d043      	beq.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x137c>
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b40      	cmp	r3, #64	@ 0x40
 8005250:	d852      	bhi.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b30      	cmp	r3, #48	@ 0x30
 8005256:	d027      	beq.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b30      	cmp	r3, #48	@ 0x30
 800525c:	d84c      	bhi.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b20      	cmp	r3, #32
 8005262:	d017      	beq.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b20      	cmp	r3, #32
 8005268:	d846      	bhi.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x1320>
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b10      	cmp	r3, #16
 8005274:	d004      	beq.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x1328>
          break;
 8005276:	e03f      	b.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
          frequency = HAL_RCC_GetPCLK4Freq();
 8005278:	f7fd fb88 	bl	800298c <HAL_RCC_GetPCLK4Freq>
 800527c:	6178      	str	r0, [r7, #20]
          break;
 800527e:	e04e      	b.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005280:	4b20      	ldr	r3, [pc, #128]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d037      	beq.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
            frequency = HAL_RCC_GetPLL2QFreq();
 800528c:	f7fd fbc6 	bl	8002a1c <HAL_RCC_GetPLL2QFreq>
 8005290:	6178      	str	r0, [r7, #20]
          break;
 8005292:	e033      	b.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005294:	4b1b      	ldr	r3, [pc, #108]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 8005296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d02f      	beq.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = HAL_RCC_GetPLL3QFreq();
 80052a0:	f7fd fc2c 	bl	8002afc <HAL_RCC_GetPLL3QFreq>
 80052a4:	6178      	str	r0, [r7, #20]
          break;
 80052a6:	e02b      	b.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052a8:	4b16      	ldr	r3, [pc, #88]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d02f      	beq.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80052b4:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d029      	beq.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052c0:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	08db      	lsrs	r3, r3, #3
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	4a0f      	ldr	r2, [pc, #60]	@ (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x13b0>)
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
 80052d0:	617b      	str	r3, [r7, #20]
          break;
 80052d2:	e01f      	b.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80052d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01b      	beq.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
            frequency = CSI_VALUE;
 80052e0:	4b0a      	ldr	r3, [pc, #40]	@ (800530c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80052e2:	617b      	str	r3, [r7, #20]
          break;
 80052e4:	e018      	b.n	8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052e6:	4b07      	ldr	r3, [pc, #28]	@ (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x13ac>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d014      	beq.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x13c4>
            frequency = HSE_VALUE;
 80052f2:	4b07      	ldr	r3, [pc, #28]	@ (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 80052f4:	617b      	str	r3, [r7, #20]
          break;
 80052f6:	e011      	b.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x13c4>
          break;
 80052f8:	bf00      	nop
 80052fa:	e168      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80052fc:	bf00      	nop
 80052fe:	e166      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005300:	bf00      	nop
 8005302:	e164      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 8005304:	58024400 	.word	0x58024400
 8005308:	03d09000 	.word	0x03d09000
 800530c:	003d0900 	.word	0x003d0900
 8005310:	016e3600 	.word	0x016e3600
          break;
 8005314:	bf00      	nop
 8005316:	e15a      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005318:	bf00      	nop
 800531a:	e158      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800531c:	bf00      	nop
      break;
 800531e:	e156      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USART1_SOURCE();
 8005320:	4b9e      	ldr	r3, [pc, #632]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b05      	cmp	r3, #5
 800532e:	d850      	bhi.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 8005330:	a201      	add	r2, pc, #4	@ (adr r2, 8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	08005351 	.word	0x08005351
 800533c:	08005359 	.word	0x08005359
 8005340:	0800536d 	.word	0x0800536d
 8005344:	08005381 	.word	0x08005381
 8005348:	080053ad 	.word	0x080053ad
 800534c:	080053bf 	.word	0x080053bf
          frequency = HAL_RCC_GetPCLK2Freq();
 8005350:	f7fd fb00 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8005354:	6178      	str	r0, [r7, #20]
          break;
 8005356:	e047      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005358:	4b90      	ldr	r3, [pc, #576]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d038      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
            frequency = HAL_RCC_GetPLL2QFreq();
 8005364:	f7fd fb5a 	bl	8002a1c <HAL_RCC_GetPLL2QFreq>
 8005368:	6178      	str	r0, [r7, #20]
          break;
 800536a:	e034      	b.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 800536c:	4b8b      	ldr	r3, [pc, #556]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d030      	beq.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
            frequency = HAL_RCC_GetPLL3QFreq();
 8005378:	f7fd fbc0 	bl	8002afc <HAL_RCC_GetPLL3QFreq>
 800537c:	6178      	str	r0, [r7, #20]
          break;
 800537e:	e02c      	b.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005380:	4b86      	ldr	r3, [pc, #536]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d028      	beq.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 800538c:	4b83      	ldr	r3, [pc, #524]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d022      	beq.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005398:	4b80      	ldr	r3, [pc, #512]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	08db      	lsrs	r3, r3, #3
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	4a7f      	ldr	r2, [pc, #508]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>)
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]
          break;
 80053aa:	e018      	b.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x1486>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80053ac:	4b7b      	ldr	r3, [pc, #492]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d014      	beq.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
            frequency = CSI_VALUE;
 80053b8:	4b7a      	ldr	r3, [pc, #488]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>)
 80053ba:	617b      	str	r3, [r7, #20]
          break;
 80053bc:	e011      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053be:	4b77      	ldr	r3, [pc, #476]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80053c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
            frequency = LSE_VALUE;
 80053ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ce:	617b      	str	r3, [r7, #20]
          break;
 80053d0:	e009      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          break;
 80053d2:	bf00      	nop
 80053d4:	e0fb      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80053d6:	bf00      	nop
 80053d8:	e0f9      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80053da:	bf00      	nop
 80053dc:	e0f7      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80053de:	bf00      	nop
 80053e0:	e0f5      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80053e2:	bf00      	nop
 80053e4:	e0f3      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80053e6:	bf00      	nop
      break;
 80053e8:	e0f1      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USART234578_SOURCE();
 80053ea:	4b6c      	ldr	r3, [pc, #432]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80053ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b05      	cmp	r3, #5
 80053f8:	d84f      	bhi.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x1542>
 80053fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x14a8>)
 80053fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005400:	08005419 	.word	0x08005419
 8005404:	08005421 	.word	0x08005421
 8005408:	08005435 	.word	0x08005435
 800540c:	08005449 	.word	0x08005449
 8005410:	08005475 	.word	0x08005475
 8005414:	08005487 	.word	0x08005487
          frequency = HAL_RCC_GetPCLK1Freq();
 8005418:	f7fd fa80 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 800541c:	6178      	str	r0, [r7, #20]
          break;
 800541e:	e047      	b.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
          if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005420:	4b5e      	ldr	r3, [pc, #376]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d038      	beq.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
            frequency = HAL_RCC_GetPLL2QFreq();
 800542c:	f7fd faf6 	bl	8002a1c <HAL_RCC_GetPLL2QFreq>
 8005430:	6178      	str	r0, [r7, #20]
          break;
 8005432:	e034      	b.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005434:	4b59      	ldr	r3, [pc, #356]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d030      	beq.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x154a>
            frequency = HAL_RCC_GetPLL3QFreq();
 8005440:	f7fd fb5c 	bl	8002afc <HAL_RCC_GetPLL3QFreq>
 8005444:	6178      	str	r0, [r7, #20]
          break;
 8005446:	e02c      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x154a>
          if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005448:	4b54      	ldr	r3, [pc, #336]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d028      	beq.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005454:	4b51      	ldr	r3, [pc, #324]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d022      	beq.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005460:	4b4e      	ldr	r3, [pc, #312]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	08db      	lsrs	r3, r3, #3
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	4a4d      	ldr	r2, [pc, #308]	@ (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1648>)
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]
          break;
 8005472:	e018      	b.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x154e>
          if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005474:	4b49      	ldr	r3, [pc, #292]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d014      	beq.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x1552>
            frequency = CSI_VALUE;
 8005480:	4b48      	ldr	r3, [pc, #288]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>)
 8005482:	617b      	str	r3, [r7, #20]
          break;
 8005484:	e011      	b.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x1552>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005486:	4b45      	ldr	r3, [pc, #276]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x1556>
            frequency = LSE_VALUE;
 8005492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005496:	617b      	str	r3, [r7, #20]
          break;
 8005498:	e009      	b.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x1556>
          break;
 800549a:	bf00      	nop
 800549c:	e097      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800549e:	bf00      	nop
 80054a0:	e095      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80054a2:	bf00      	nop
 80054a4:	e093      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80054a6:	bf00      	nop
 80054a8:	e091      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80054aa:	bf00      	nop
 80054ac:	e08f      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80054ae:	bf00      	nop
      break;
 80054b0:	e08d      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USBPHYC_SOURCE();
 80054b2:	4b3a      	ldr	r3, [pc, #232]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80054b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054c2:	d01d      	beq.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x15a8>
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ca:	d823      	bhi.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d8:	d009      	beq.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
          break;
 80054da:	e01b      	b.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054dc:	4b2f      	ldr	r3, [pc, #188]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d017      	beq.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
            frequency = HSE_VALUE;
 80054e8:	4b2f      	ldr	r3, [pc, #188]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>)
 80054ea:	617b      	str	r3, [r7, #20]
          break;
 80054ec:	e014      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x15c0>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ee:	4b2b      	ldr	r3, [pc, #172]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d010      	beq.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x15c4>
            frequency = (HSE_VALUE >> 1UL);
 80054fa:	4b2c      	ldr	r3, [pc, #176]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x1654>)
 80054fc:	617b      	str	r3, [r7, #20]
          break;
 80054fe:	e00d      	b.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x15c4>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005500:	4b26      	ldr	r3, [pc, #152]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d009      	beq.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x15c8>
            frequency = HAL_RCC_GetPLL3QFreq();
 800550c:	f7fd faf6 	bl	8002afc <HAL_RCC_GetPLL3QFreq>
 8005510:	6178      	str	r0, [r7, #20]
          break;
 8005512:	e005      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x15c8>
          break;
 8005514:	bf00      	nop
 8005516:	e05a      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005518:	bf00      	nop
 800551a:	e058      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 800551c:	bf00      	nop
 800551e:	e056      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 8005520:	bf00      	nop
      break;
 8005522:	e054      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      clocksource = __HAL_RCC_GET_USBOTGFS_SOURCE();
 8005524:	4b1d      	ldr	r3, [pc, #116]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005528:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005534:	d02f      	beq.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x163e>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800553c:	d83a      	bhi.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005544:	d01e      	beq.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554c:	d832      	bhi.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d004      	beq.n	800555e <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800555a:	d009      	beq.n	8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
          break;
 800555c:	e02a      	b.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
          if (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800555e:	4b0f      	ldr	r3, [pc, #60]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d026      	beq.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
            frequency = HSI48_VALUE;
 800556a:	4b11      	ldr	r3, [pc, #68]	@ (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1658>)
 800556c:	617b      	str	r3, [r7, #20]
          break;
 800556e:	e023      	b.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1660>
          if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL_QCLK) != 0U)
 8005570:	4b0a      	ldr	r3, [pc, #40]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01f      	beq.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
            frequency = HAL_RCC_GetPLL3QFreq();
 800557c:	f7fd fabe 	bl	8002afc <HAL_RCC_GetPLL3QFreq>
 8005580:	6178      	str	r0, [r7, #20]
          break;
 8005582:	e01b      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
          if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005584:	4b05      	ldr	r3, [pc, #20]	@ (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d017      	beq.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
            frequency = HSE_VALUE;
 8005590:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1650>)
 8005592:	617b      	str	r3, [r7, #20]
          break;
 8005594:	e014      	b.n	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
          break;
 8005596:	bf00      	nop
 8005598:	e019      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
 800559a:	bf00      	nop
 800559c:	58024400 	.word	0x58024400
 80055a0:	03d09000 	.word	0x03d09000
 80055a4:	003d0900 	.word	0x003d0900
 80055a8:	016e3600 	.word	0x016e3600
 80055ac:	00b71b00 	.word	0x00b71b00
 80055b0:	02dc6c00 	.word	0x02dc6c00
          break;
 80055b4:	bf00      	nop
 80055b6:	e00a      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80055b8:	bf00      	nop
 80055ba:	e008      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80055bc:	bf00      	nop
 80055be:	e006      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
          break;
 80055c0:	bf00      	nop
      break;
 80055c2:	e004      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 80055c4:	bf00      	nop
 80055c6:	e002      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 80055c8:	bf00      	nop
 80055ca:	e000      	b.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x1676>
      break;
 80055cc:	bf00      	nop
  }

  return frequency;
 80055ce:	697b      	ldr	r3, [r7, #20]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_RCCEx_EnableClockProtection>:
  *            @arg RCC_CLOCKPROTECT_FMC     FMC clock protection
  *            @arg RCC_CLOCKPROTECT_XSPI    XSPIs clock protection
  * @retval None
  */
void HAL_RCCEx_EnableClockProtection(uint32_t ProtectClk)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_RCC_CLOCKPROTECTION(ProtectClk));

  SET_BIT(RCC->CKPROTR, ProtectClk);
 80055e0:	4b06      	ldr	r3, [pc, #24]	@ (80055fc <HAL_RCCEx_EnableClockProtection+0x24>)
 80055e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80055e6:	4905      	ldr	r1, [pc, #20]	@ (80055fc <HAL_RCCEx_EnableClockProtection+0x24>)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	58024400 	.word	0x58024400

08005600 <RCC_GetCLKPFreq>:
/**
  * @brief  Compute PLL2 VCO output frequency
  * @retval Value of PLL2 VCO output frequency
  */
static uint32_t RCC_GetCLKPFreq(void)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	607b      	str	r3, [r7, #4]
  uint32_t ckpclocksource;

  ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800560a:	4b1f      	ldr	r3, [pc, #124]	@ (8005688 <RCC_GetCLKPFreq+0x88>)
 800560c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800560e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005612:	603b      	str	r3, [r7, #0]

  if (ckpclocksource == RCC_CLKPSOURCE_HSI)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d115      	bne.n	8005646 <RCC_GetCLKPFreq+0x46>
  {
    if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800561a:	4b1b      	ldr	r3, [pc, #108]	@ (8005688 <RCC_GetCLKPFreq+0x88>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d028      	beq.n	8005678 <RCC_GetCLKPFreq+0x78>
    {
      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005626:	4b18      	ldr	r3, [pc, #96]	@ (8005688 <RCC_GetCLKPFreq+0x88>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d022      	beq.n	8005678 <RCC_GetCLKPFreq+0x78>
      {
        frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005632:	4b15      	ldr	r3, [pc, #84]	@ (8005688 <RCC_GetCLKPFreq+0x88>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	4a13      	ldr	r2, [pc, #76]	@ (800568c <RCC_GetCLKPFreq+0x8c>)
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	607b      	str	r3, [r7, #4]
 8005644:	e018      	b.n	8005678 <RCC_GetCLKPFreq+0x78>
      {
        /* Can't retrieve HSIDIV value */
      }
    }
  }
  else if (ckpclocksource == RCC_CLKPSOURCE_CSI)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800564c:	d108      	bne.n	8005660 <RCC_GetCLKPFreq+0x60>
  {
    if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800564e:	4b0e      	ldr	r3, [pc, #56]	@ (8005688 <RCC_GetCLKPFreq+0x88>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00e      	beq.n	8005678 <RCC_GetCLKPFreq+0x78>
    {
      frequency = CSI_VALUE;
 800565a:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <RCC_GetCLKPFreq+0x90>)
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	e00b      	b.n	8005678 <RCC_GetCLKPFreq+0x78>
    }
  }
  else if (ckpclocksource == RCC_CLKPSOURCE_HSE)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005666:	d107      	bne.n	8005678 <RCC_GetCLKPFreq+0x78>
  {
    if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005668:	4b07      	ldr	r3, [pc, #28]	@ (8005688 <RCC_GetCLKPFreq+0x88>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <RCC_GetCLKPFreq+0x78>
    {
      frequency = HSE_VALUE;
 8005674:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <RCC_GetCLKPFreq+0x94>)
 8005676:	607b      	str	r3, [r7, #4]
  {
    /* Nothing to do, case the CKPER is disabled */
    /* frequency is by default set to 0          */
  }

  return frequency;
 8005678:	687b      	ldr	r3, [r7, #4]
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	58024400 	.word	0x58024400
 800568c:	03d09000 	.word	0x03d09000
 8005690:	003d0900 	.word	0x003d0900
 8005694:	016e3600 	.word	0x016e3600

08005698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e042      	b.n	8005730 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d106      	bne.n	80056c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f83b 	bl	8005738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2224      	movs	r2, #36	@ 0x24
 80056c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0201 	bic.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fbc8 	bl	8005e78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f82f 	bl	800574c <UART_SetConfig>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e01b      	b.n	8005730 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fc47 	bl	8005fbc <UART_CheckIdleState>
 800572e:	4603      	mov	r3, r0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800574c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005750:	b08c      	sub	sp, #48	@ 0x30
 8005752:	af00      	add	r7, sp, #0
 8005754:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	431a      	orrs	r2, r3
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	431a      	orrs	r2, r3
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	4313      	orrs	r3, r2
 8005772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4bb3      	ldr	r3, [pc, #716]	@ (8005a48 <UART_SetConfig+0x2fc>)
 800577c:	4013      	ands	r3, r2
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005784:	430b      	orrs	r3, r1
 8005786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4aa8      	ldr	r2, [pc, #672]	@ (8005a4c <UART_SetConfig+0x300>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d004      	beq.n	80057b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b4:	4313      	orrs	r3, r2
 80057b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	4ba4      	ldr	r3, [pc, #656]	@ (8005a50 <UART_SetConfig+0x304>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	f023 010f 	bic.w	r1, r3, #15
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a9b      	ldr	r2, [pc, #620]	@ (8005a54 <UART_SetConfig+0x308>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d131      	bne.n	8005850 <UART_SetConfig+0x104>
 80057ec:	4b9a      	ldr	r3, [pc, #616]	@ (8005a58 <UART_SetConfig+0x30c>)
 80057ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	2b05      	cmp	r3, #5
 80057f6:	d827      	bhi.n	8005848 <UART_SetConfig+0xfc>
 80057f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005800 <UART_SetConfig+0xb4>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005819 	.word	0x08005819
 8005804:	08005821 	.word	0x08005821
 8005808:	08005829 	.word	0x08005829
 800580c:	08005831 	.word	0x08005831
 8005810:	08005839 	.word	0x08005839
 8005814:	08005841 	.word	0x08005841
 8005818:	2301      	movs	r3, #1
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581e:	e0a0      	b.n	8005962 <UART_SetConfig+0x216>
 8005820:	2304      	movs	r3, #4
 8005822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005826:	e09c      	b.n	8005962 <UART_SetConfig+0x216>
 8005828:	2308      	movs	r3, #8
 800582a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800582e:	e098      	b.n	8005962 <UART_SetConfig+0x216>
 8005830:	2310      	movs	r3, #16
 8005832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005836:	e094      	b.n	8005962 <UART_SetConfig+0x216>
 8005838:	2320      	movs	r3, #32
 800583a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583e:	e090      	b.n	8005962 <UART_SetConfig+0x216>
 8005840:	2340      	movs	r3, #64	@ 0x40
 8005842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005846:	e08c      	b.n	8005962 <UART_SetConfig+0x216>
 8005848:	2380      	movs	r3, #128	@ 0x80
 800584a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584e:	e088      	b.n	8005962 <UART_SetConfig+0x216>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a81      	ldr	r2, [pc, #516]	@ (8005a5c <UART_SetConfig+0x310>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d018      	beq.n	800588c <UART_SetConfig+0x140>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a80      	ldr	r2, [pc, #512]	@ (8005a60 <UART_SetConfig+0x314>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <UART_SetConfig+0x140>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a7e      	ldr	r2, [pc, #504]	@ (8005a64 <UART_SetConfig+0x318>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00e      	beq.n	800588c <UART_SetConfig+0x140>
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a7d      	ldr	r2, [pc, #500]	@ (8005a68 <UART_SetConfig+0x31c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d009      	beq.n	800588c <UART_SetConfig+0x140>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a7b      	ldr	r2, [pc, #492]	@ (8005a6c <UART_SetConfig+0x320>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <UART_SetConfig+0x140>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a7a      	ldr	r2, [pc, #488]	@ (8005a70 <UART_SetConfig+0x324>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d131      	bne.n	80058f0 <UART_SetConfig+0x1a4>
 800588c:	4b72      	ldr	r3, [pc, #456]	@ (8005a58 <UART_SetConfig+0x30c>)
 800588e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	2b05      	cmp	r3, #5
 8005896:	d827      	bhi.n	80058e8 <UART_SetConfig+0x19c>
 8005898:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <UART_SetConfig+0x154>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058b9 	.word	0x080058b9
 80058a4:	080058c1 	.word	0x080058c1
 80058a8:	080058c9 	.word	0x080058c9
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058e1 	.word	0x080058e1
 80058b8:	2300      	movs	r3, #0
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058be:	e016      	b.n	80058ee <UART_SetConfig+0x1a2>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058c6:	e012      	b.n	80058ee <UART_SetConfig+0x1a2>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ce:	e00e      	b.n	80058ee <UART_SetConfig+0x1a2>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058d6:	e00a      	b.n	80058ee <UART_SetConfig+0x1a2>
 80058d8:	2320      	movs	r3, #32
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058de:	e006      	b.n	80058ee <UART_SetConfig+0x1a2>
 80058e0:	2340      	movs	r3, #64	@ 0x40
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058e6:	e002      	b.n	80058ee <UART_SetConfig+0x1a2>
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ee:	e038      	b.n	8005962 <UART_SetConfig+0x216>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a55      	ldr	r2, [pc, #340]	@ (8005a4c <UART_SetConfig+0x300>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d130      	bne.n	800595c <UART_SetConfig+0x210>
 80058fa:	4b57      	ldr	r3, [pc, #348]	@ (8005a58 <UART_SetConfig+0x30c>)
 80058fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	2b05      	cmp	r3, #5
 8005904:	d826      	bhi.n	8005954 <UART_SetConfig+0x208>
 8005906:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <UART_SetConfig+0x1c0>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	08005925 	.word	0x08005925
 8005910:	0800592d 	.word	0x0800592d
 8005914:	08005935 	.word	0x08005935
 8005918:	0800593d 	.word	0x0800593d
 800591c:	08005945 	.word	0x08005945
 8005920:	0800594d 	.word	0x0800594d
 8005924:	2302      	movs	r3, #2
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800592a:	e01a      	b.n	8005962 <UART_SetConfig+0x216>
 800592c:	2304      	movs	r3, #4
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005932:	e016      	b.n	8005962 <UART_SetConfig+0x216>
 8005934:	2308      	movs	r3, #8
 8005936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800593a:	e012      	b.n	8005962 <UART_SetConfig+0x216>
 800593c:	2310      	movs	r3, #16
 800593e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005942:	e00e      	b.n	8005962 <UART_SetConfig+0x216>
 8005944:	2320      	movs	r3, #32
 8005946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594a:	e00a      	b.n	8005962 <UART_SetConfig+0x216>
 800594c:	2340      	movs	r3, #64	@ 0x40
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005952:	e006      	b.n	8005962 <UART_SetConfig+0x216>
 8005954:	2380      	movs	r3, #128	@ 0x80
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800595a:	e002      	b.n	8005962 <UART_SetConfig+0x216>
 800595c:	2380      	movs	r3, #128	@ 0x80
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a39      	ldr	r2, [pc, #228]	@ (8005a4c <UART_SetConfig+0x300>)
 8005968:	4293      	cmp	r3, r2
 800596a:	f040 80fe 	bne.w	8005b6a <UART_SetConfig+0x41e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800596e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005972:	2b20      	cmp	r3, #32
 8005974:	dc48      	bgt.n	8005a08 <UART_SetConfig+0x2bc>
 8005976:	2b02      	cmp	r3, #2
 8005978:	f2c0 8088 	blt.w	8005a8c <UART_SetConfig+0x340>
 800597c:	3b02      	subs	r3, #2
 800597e:	2b1e      	cmp	r3, #30
 8005980:	f200 8084 	bhi.w	8005a8c <UART_SetConfig+0x340>
 8005984:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <UART_SetConfig+0x240>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	08005a1f 	.word	0x08005a1f
 8005990:	08005a8d 	.word	0x08005a8d
 8005994:	08005a0f 	.word	0x08005a0f
 8005998:	08005a8d 	.word	0x08005a8d
 800599c:	08005a8d 	.word	0x08005a8d
 80059a0:	08005a8d 	.word	0x08005a8d
 80059a4:	08005a17 	.word	0x08005a17
 80059a8:	08005a8d 	.word	0x08005a8d
 80059ac:	08005a8d 	.word	0x08005a8d
 80059b0:	08005a8d 	.word	0x08005a8d
 80059b4:	08005a8d 	.word	0x08005a8d
 80059b8:	08005a8d 	.word	0x08005a8d
 80059bc:	08005a8d 	.word	0x08005a8d
 80059c0:	08005a8d 	.word	0x08005a8d
 80059c4:	08005a27 	.word	0x08005a27
 80059c8:	08005a8d 	.word	0x08005a8d
 80059cc:	08005a8d 	.word	0x08005a8d
 80059d0:	08005a8d 	.word	0x08005a8d
 80059d4:	08005a8d 	.word	0x08005a8d
 80059d8:	08005a8d 	.word	0x08005a8d
 80059dc:	08005a8d 	.word	0x08005a8d
 80059e0:	08005a8d 	.word	0x08005a8d
 80059e4:	08005a8d 	.word	0x08005a8d
 80059e8:	08005a8d 	.word	0x08005a8d
 80059ec:	08005a8d 	.word	0x08005a8d
 80059f0:	08005a8d 	.word	0x08005a8d
 80059f4:	08005a8d 	.word	0x08005a8d
 80059f8:	08005a8d 	.word	0x08005a8d
 80059fc:	08005a8d 	.word	0x08005a8d
 8005a00:	08005a8d 	.word	0x08005a8d
 8005a04:	08005a7f 	.word	0x08005a7f
 8005a08:	2b40      	cmp	r3, #64	@ 0x40
 8005a0a:	d03b      	beq.n	8005a84 <UART_SetConfig+0x338>
 8005a0c:	e03e      	b.n	8005a8c <UART_SetConfig+0x340>
    {
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8005a0e:	f7fd f805 	bl	8002a1c <HAL_RCC_GetPLL2QFreq>
 8005a12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a14:	e040      	b.n	8005a98 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8005a16:	f7fd f871 	bl	8002afc <HAL_RCC_GetPLL3QFreq>
 8005a1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a1c:	e03c      	b.n	8005a98 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_PCLK4:
        pclk = HAL_RCC_GetPCLK4Freq();
 8005a1e:	f7fc ffb5 	bl	800298c <HAL_RCC_GetPCLK4Freq>
 8005a22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a24:	e038      	b.n	8005a98 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a26:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <UART_SetConfig+0x30c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d022      	beq.n	8005a78 <UART_SetConfig+0x32c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a32:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <UART_SetConfig+0x30c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	08db      	lsrs	r3, r3, #3
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005a74 <UART_SetConfig+0x328>)
 8005a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a44:	e028      	b.n	8005a98 <UART_SetConfig+0x34c>
 8005a46:	bf00      	nop
 8005a48:	cfff69f3 	.word	0xcfff69f3
 8005a4c:	58000c00 	.word	0x58000c00
 8005a50:	11fff4ff 	.word	0x11fff4ff
 8005a54:	42001000 	.word	0x42001000
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	40004400 	.word	0x40004400
 8005a60:	40004800 	.word	0x40004800
 8005a64:	40004c00 	.word	0x40004c00
 8005a68:	40005000 	.word	0x40005000
 8005a6c:	40007800 	.word	0x40007800
 8005a70:	40007c00 	.word	0x40007c00
 8005a74:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005a78:	4b99      	ldr	r3, [pc, #612]	@ (8005ce0 <UART_SetConfig+0x594>)
 8005a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a7c:	e00c      	b.n	8005a98 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a7e:	4b99      	ldr	r3, [pc, #612]	@ (8005ce4 <UART_SetConfig+0x598>)
 8005a80:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a82:	e009      	b.n	8005a98 <UART_SetConfig+0x34c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a88:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a8a:	e005      	b.n	8005a98 <UART_SetConfig+0x34c>
      default:
        pclk = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 81ce 	beq.w	8005e3c <UART_SetConfig+0x6f0>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa4:	4a90      	ldr	r2, [pc, #576]	@ (8005ce8 <UART_SetConfig+0x59c>)
 8005aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	4413      	add	r3, r2
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d305      	bcc.n	8005ad0 <UART_SetConfig+0x384>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d903      	bls.n	8005ad8 <UART_SetConfig+0x38c>
      {
        ret = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ad6:	e1b1      	b.n	8005e3c <UART_SetConfig+0x6f0>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	2200      	movs	r2, #0
 8005adc:	60bb      	str	r3, [r7, #8]
 8005ade:	60fa      	str	r2, [r7, #12]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	4a80      	ldr	r2, [pc, #512]	@ (8005ce8 <UART_SetConfig+0x59c>)
 8005ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2200      	movs	r2, #0
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	607a      	str	r2, [r7, #4]
 8005af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005afa:	f7fa fbf9 	bl	80002f0 <__aeabi_uldivmod>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4610      	mov	r0, r2
 8005b04:	4619      	mov	r1, r3
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	020b      	lsls	r3, r1, #8
 8005b10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b14:	0202      	lsls	r2, r0, #8
 8005b16:	6979      	ldr	r1, [r7, #20]
 8005b18:	6849      	ldr	r1, [r1, #4]
 8005b1a:	0849      	lsrs	r1, r1, #1
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	4605      	mov	r5, r0
 8005b22:	eb12 0804 	adds.w	r8, r2, r4
 8005b26:	eb43 0905 	adc.w	r9, r3, r5
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	469a      	mov	sl, r3
 8005b32:	4693      	mov	fp, r2
 8005b34:	4652      	mov	r2, sl
 8005b36:	465b      	mov	r3, fp
 8005b38:	4640      	mov	r0, r8
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	f7fa fbd8 	bl	80002f0 <__aeabi_uldivmod>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4613      	mov	r3, r2
 8005b46:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b4e:	d308      	bcc.n	8005b62 <UART_SetConfig+0x416>
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b56:	d204      	bcs.n	8005b62 <UART_SetConfig+0x416>
        {
          huart->Instance->BRR = usartdiv;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6a3a      	ldr	r2, [r7, #32]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	e16c      	b.n	8005e3c <UART_SetConfig+0x6f0>
        }
        else
        {
          ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b68:	e168      	b.n	8005e3c <UART_SetConfig+0x6f0>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b72:	f040 80bd 	bne.w	8005cf0 <UART_SetConfig+0x5a4>
  {
    switch (clocksource)
 8005b76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	dc48      	bgt.n	8005c10 <UART_SetConfig+0x4c4>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	db73      	blt.n	8005c6a <UART_SetConfig+0x51e>
 8005b82:	2b20      	cmp	r3, #32
 8005b84:	d871      	bhi.n	8005c6a <UART_SetConfig+0x51e>
 8005b86:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <UART_SetConfig+0x440>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005c17 	.word	0x08005c17
 8005b90:	08005c1f 	.word	0x08005c1f
 8005b94:	08005c6b 	.word	0x08005c6b
 8005b98:	08005c6b 	.word	0x08005c6b
 8005b9c:	08005c27 	.word	0x08005c27
 8005ba0:	08005c6b 	.word	0x08005c6b
 8005ba4:	08005c6b 	.word	0x08005c6b
 8005ba8:	08005c6b 	.word	0x08005c6b
 8005bac:	08005c2f 	.word	0x08005c2f
 8005bb0:	08005c6b 	.word	0x08005c6b
 8005bb4:	08005c6b 	.word	0x08005c6b
 8005bb8:	08005c6b 	.word	0x08005c6b
 8005bbc:	08005c6b 	.word	0x08005c6b
 8005bc0:	08005c6b 	.word	0x08005c6b
 8005bc4:	08005c6b 	.word	0x08005c6b
 8005bc8:	08005c6b 	.word	0x08005c6b
 8005bcc:	08005c37 	.word	0x08005c37
 8005bd0:	08005c6b 	.word	0x08005c6b
 8005bd4:	08005c6b 	.word	0x08005c6b
 8005bd8:	08005c6b 	.word	0x08005c6b
 8005bdc:	08005c6b 	.word	0x08005c6b
 8005be0:	08005c6b 	.word	0x08005c6b
 8005be4:	08005c6b 	.word	0x08005c6b
 8005be8:	08005c6b 	.word	0x08005c6b
 8005bec:	08005c6b 	.word	0x08005c6b
 8005bf0:	08005c6b 	.word	0x08005c6b
 8005bf4:	08005c6b 	.word	0x08005c6b
 8005bf8:	08005c6b 	.word	0x08005c6b
 8005bfc:	08005c6b 	.word	0x08005c6b
 8005c00:	08005c6b 	.word	0x08005c6b
 8005c04:	08005c6b 	.word	0x08005c6b
 8005c08:	08005c6b 	.word	0x08005c6b
 8005c0c:	08005c5d 	.word	0x08005c5d
 8005c10:	2b40      	cmp	r3, #64	@ 0x40
 8005c12:	d026      	beq.n	8005c62 <UART_SetConfig+0x516>
 8005c14:	e029      	b.n	8005c6a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c16:	f7fc fe81 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 8005c1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c1c:	e02b      	b.n	8005c76 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c1e:	f7fc fe99 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8005c22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c24:	e027      	b.n	8005c76 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8005c26:	f7fc fef9 	bl	8002a1c <HAL_RCC_GetPLL2QFreq>
 8005c2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c2c:	e023      	b.n	8005c76 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8005c2e:	f7fc ff65 	bl	8002afc <HAL_RCC_GetPLL3QFreq>
 8005c32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c34:	e01f      	b.n	8005c76 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c36:	4b2d      	ldr	r3, [pc, #180]	@ (8005cec <UART_SetConfig+0x5a0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <UART_SetConfig+0x50a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c42:	4b2a      	ldr	r3, [pc, #168]	@ (8005cec <UART_SetConfig+0x5a0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	08db      	lsrs	r3, r3, #3
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	4a24      	ldr	r2, [pc, #144]	@ (8005ce0 <UART_SetConfig+0x594>)
 8005c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c54:	e00f      	b.n	8005c76 <UART_SetConfig+0x52a>
          pclk = (uint32_t) HSI_VALUE;
 8005c56:	4b22      	ldr	r3, [pc, #136]	@ (8005ce0 <UART_SetConfig+0x594>)
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c5a:	e00c      	b.n	8005c76 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c5c:	4b21      	ldr	r3, [pc, #132]	@ (8005ce4 <UART_SetConfig+0x598>)
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c60:	e009      	b.n	8005c76 <UART_SetConfig+0x52a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c68:	e005      	b.n	8005c76 <UART_SetConfig+0x52a>
      default:
        pclk = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80df 	beq.w	8005e3c <UART_SetConfig+0x6f0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	4a19      	ldr	r2, [pc, #100]	@ (8005ce8 <UART_SetConfig+0x59c>)
 8005c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c90:	005a      	lsls	r2, r3, #1
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	441a      	add	r2, r3
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b0f      	cmp	r3, #15
 8005ca8:	d916      	bls.n	8005cd8 <UART_SetConfig+0x58c>
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb0:	d212      	bcs.n	8005cd8 <UART_SetConfig+0x58c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	f023 030f 	bic.w	r3, r3, #15
 8005cba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	085b      	lsrs	r3, r3, #1
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	8bfb      	ldrh	r3, [r7, #30]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	8bfa      	ldrh	r2, [r7, #30]
 8005cd4:	60da      	str	r2, [r3, #12]
 8005cd6:	e0b1      	b.n	8005e3c <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005cde:	e0ad      	b.n	8005e3c <UART_SetConfig+0x6f0>
 8005ce0:	03d09000 	.word	0x03d09000
 8005ce4:	003d0900 	.word	0x003d0900
 8005ce8:	08009b20 	.word	0x08009b20
 8005cec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cf0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	dc49      	bgt.n	8005d8c <UART_SetConfig+0x640>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	db74      	blt.n	8005de6 <UART_SetConfig+0x69a>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d872      	bhi.n	8005de6 <UART_SetConfig+0x69a>
 8005d00:	a201      	add	r2, pc, #4	@ (adr r2, 8005d08 <UART_SetConfig+0x5bc>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d93 	.word	0x08005d93
 8005d0c:	08005d9b 	.word	0x08005d9b
 8005d10:	08005de7 	.word	0x08005de7
 8005d14:	08005de7 	.word	0x08005de7
 8005d18:	08005da3 	.word	0x08005da3
 8005d1c:	08005de7 	.word	0x08005de7
 8005d20:	08005de7 	.word	0x08005de7
 8005d24:	08005de7 	.word	0x08005de7
 8005d28:	08005dab 	.word	0x08005dab
 8005d2c:	08005de7 	.word	0x08005de7
 8005d30:	08005de7 	.word	0x08005de7
 8005d34:	08005de7 	.word	0x08005de7
 8005d38:	08005de7 	.word	0x08005de7
 8005d3c:	08005de7 	.word	0x08005de7
 8005d40:	08005de7 	.word	0x08005de7
 8005d44:	08005de7 	.word	0x08005de7
 8005d48:	08005db3 	.word	0x08005db3
 8005d4c:	08005de7 	.word	0x08005de7
 8005d50:	08005de7 	.word	0x08005de7
 8005d54:	08005de7 	.word	0x08005de7
 8005d58:	08005de7 	.word	0x08005de7
 8005d5c:	08005de7 	.word	0x08005de7
 8005d60:	08005de7 	.word	0x08005de7
 8005d64:	08005de7 	.word	0x08005de7
 8005d68:	08005de7 	.word	0x08005de7
 8005d6c:	08005de7 	.word	0x08005de7
 8005d70:	08005de7 	.word	0x08005de7
 8005d74:	08005de7 	.word	0x08005de7
 8005d78:	08005de7 	.word	0x08005de7
 8005d7c:	08005de7 	.word	0x08005de7
 8005d80:	08005de7 	.word	0x08005de7
 8005d84:	08005de7 	.word	0x08005de7
 8005d88:	08005dd9 	.word	0x08005dd9
 8005d8c:	2b40      	cmp	r3, #64	@ 0x40
 8005d8e:	d026      	beq.n	8005dde <UART_SetConfig+0x692>
 8005d90:	e029      	b.n	8005de6 <UART_SetConfig+0x69a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d92:	f7fc fdc3 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 8005d96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d98:	e02b      	b.n	8005df2 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d9a:	f7fc fddb 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8005d9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005da0:	e027      	b.n	8005df2 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL2Q:
        pclk = HAL_RCC_GetPLL2QFreq();
 8005da2:	f7fc fe3b 	bl	8002a1c <HAL_RCC_GetPLL2QFreq>
 8005da6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005da8:	e023      	b.n	8005df2 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_PLL3Q:
        pclk = HAL_RCC_GetPLL3QFreq();
 8005daa:	f7fc fea7 	bl	8002afc <HAL_RCC_GetPLL3QFreq>
 8005dae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005db0:	e01f      	b.n	8005df2 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005db2:	4b2d      	ldr	r3, [pc, #180]	@ (8005e68 <UART_SetConfig+0x71c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <UART_SetConfig+0x686>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8005e68 <UART_SetConfig+0x71c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	08db      	lsrs	r3, r3, #3
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	4a28      	ldr	r2, [pc, #160]	@ (8005e6c <UART_SetConfig+0x720>)
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005dd0:	e00f      	b.n	8005df2 <UART_SetConfig+0x6a6>
          pclk = (uint32_t) HSI_VALUE;
 8005dd2:	4b26      	ldr	r3, [pc, #152]	@ (8005e6c <UART_SetConfig+0x720>)
 8005dd4:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dd6:	e00c      	b.n	8005df2 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005dd8:	4b25      	ldr	r3, [pc, #148]	@ (8005e70 <UART_SetConfig+0x724>)
 8005dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ddc:	e009      	b.n	8005df2 <UART_SetConfig+0x6a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005de4:	e005      	b.n	8005df2 <UART_SetConfig+0x6a6>
      default:
        pclk = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005df0:	bf00      	nop
    }

    if (pclk != 0U)
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d021      	beq.n	8005e3c <UART_SetConfig+0x6f0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e74 <UART_SetConfig+0x728>)
 8005dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e02:	461a      	mov	r2, r3
 8005e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e06:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	441a      	add	r2, r3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	2b0f      	cmp	r3, #15
 8005e20:	d909      	bls.n	8005e36 <UART_SetConfig+0x6ea>
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e28:	d205      	bcs.n	8005e36 <UART_SetConfig+0x6ea>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	e002      	b.n	8005e3c <UART_SetConfig+0x6f0>
      }
      else
      {
        ret = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3730      	adds	r7, #48	@ 0x30
 8005e60:	46bd      	mov	sp, r7
 8005e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	03d09000 	.word	0x03d09000
 8005e70:	003d0900 	.word	0x003d0900
 8005e74:	08009b20 	.word	0x08009b20

08005e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	430a      	orrs	r2, r1
 8005f4a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01a      	beq.n	8005f8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f76:	d10a      	bne.n	8005f8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	605a      	str	r2, [r3, #4]
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b098      	sub	sp, #96	@ 0x60
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fcc:	f7fb f90c 	bl	80011e8 <HAL_GetTick>
 8005fd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d12f      	bne.n	8006040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f88e 	bl	8006110 <UART_WaitOnFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d022      	beq.n	8006040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800600e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006018:	647b      	str	r3, [r7, #68]	@ 0x44
 800601a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800601e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e6      	bne.n	8005ffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e063      	b.n	8006108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b04      	cmp	r3, #4
 800604c:	d149      	bne.n	80060e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800604e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006056:	2200      	movs	r2, #0
 8006058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f857 	bl	8006110 <UART_WaitOnFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d03c      	beq.n	80060e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	623b      	str	r3, [r7, #32]
   return(result);
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800607c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006086:	633b      	str	r3, [r7, #48]	@ 0x30
 8006088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800608c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e6      	bne.n	8006068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060ba:	61fa      	str	r2, [r7, #28]
 80060bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	69b9      	ldr	r1, [r7, #24]
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	617b      	str	r3, [r7, #20]
   return(result);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e5      	bne.n	800609a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e012      	b.n	8006108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3758      	adds	r7, #88	@ 0x58
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006120:	e04f      	b.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d04b      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800612a:	f7fb f85d 	bl	80011e8 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <UART_WaitOnFlagUntilTimeout+0x30>
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e04e      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	d037      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b80      	cmp	r3, #128	@ 0x80
 8006156:	d034      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b40      	cmp	r3, #64	@ 0x40
 800615c:	d031      	beq.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b08      	cmp	r3, #8
 800616a:	d110      	bne.n	800618e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2208      	movs	r2, #8
 8006172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f839 	bl	80061ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2208      	movs	r2, #8
 800617e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e029      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800619c:	d111      	bne.n	80061c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f81f 	bl	80061ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e00f      	b.n	80061e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4013      	ands	r3, r2
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	bf0c      	ite	eq
 80061d2:	2301      	moveq	r3, #1
 80061d4:	2300      	movne	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d0a0      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b095      	sub	sp, #84	@ 0x54
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006208:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006212:	643b      	str	r3, [r7, #64]	@ 0x40
 8006214:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006218:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e6      	bne.n	80061f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3308      	adds	r3, #8
 800622c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	61fb      	str	r3, [r7, #28]
   return(result);
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	4b1e      	ldr	r3, [pc, #120]	@ (80062b4 <UART_EndRxTransfer+0xc8>)
 800623a:	4013      	ands	r3, r2
 800623c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3308      	adds	r3, #8
 8006244:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006246:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006248:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800624c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e5      	bne.n	8006226 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800625e:	2b01      	cmp	r3, #1
 8006260:	d118      	bne.n	8006294 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f023 0310 	bic.w	r3, r3, #16
 8006276:	647b      	str	r3, [r7, #68]	@ 0x44
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	613b      	str	r3, [r7, #16]
   return(result);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e6      	bne.n	8006262 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062a8:	bf00      	nop
 80062aa:	3754      	adds	r7, #84	@ 0x54
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	effffffe 	.word	0xeffffffe

080062b8 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af02      	add	r7, sp, #8
 80062be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80062c4:	f7fa ff90 	bl	80011e8 <HAL_GetTick>
 80062c8:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d102      	bne.n	80062d6 <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	73fb      	strb	r3, [r7, #15]
 80062d4:	e0cb      	b.n	800646e <HAL_XSPI_Init+0x1b6>
    assert_param(IS_XSPI_CS_BOUND(hxspi->Init.ChipSelectBoundary));
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f040 80c4 	bne.w	800646e <HAL_XSPI_Init+0x1b6>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fa fc18 	bl	8000b1c <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80062ec:	f241 3188 	movw	r1, #5000	@ 0x1388
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fbce 	bl	8006a92 <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	4b5e      	ldr	r3, [pc, #376]	@ (8006478 <HAL_XSPI_Init+0x1c0>)
 80062fe:	4013      	ands	r3, r2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	68d1      	ldr	r1, [r2, #12]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6912      	ldr	r2, [r2, #16]
 8006308:	0412      	lsls	r2, r2, #16
 800630a:	4311      	orrs	r1, r2
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6952      	ldr	r2, [r2, #20]
 8006310:	3a01      	subs	r2, #1
 8006312:	0212      	lsls	r2, r2, #8
 8006314:	4311      	orrs	r1, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	69d2      	ldr	r2, [r2, #28]
 800631a:	4311      	orrs	r1, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	430b      	orrs	r3, r1
 8006322:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1a      	ldr	r2, [r3, #32]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006348:	041a      	lsls	r2, r3, #16
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006370:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	3b01      	subs	r3, #1
 8006382:	021a      	lsls	r2, r3, #8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2200      	movs	r2, #0
 8006396:	2120      	movs	r1, #32
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fc79 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d162      	bne.n	800646e <HAL_XSPI_Init+0x1b6>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a2e      	ldr	r2, [pc, #184]	@ (800647c <HAL_XSPI_Init+0x1c4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_XSPI_Init+0x11a>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006480 <HAL_XSPI_Init+0x1c8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d10f      	bne.n	80063f2 <HAL_XSPI_Init+0x13a>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2200      	movs	r2, #0
 80063dc:	2120      	movs	r1, #32
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fc56 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <HAL_XSPI_Init+0x13a>
          {
            return status;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	e03e      	b.n	8006470 <HAL_XSPI_Init+0x1b8>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b22      	ldr	r3, [pc, #136]	@ (8006484 <HAL_XSPI_Init+0x1cc>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	6891      	ldr	r1, [r2, #8]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006404:	4311      	orrs	r1, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	430b      	orrs	r3, r1
 800640c:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006416:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0201 	orr.w	r2, r2, #1
 800643c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d107      	bne.n	8006456 <HAL_XSPI_Init+0x19e>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f042 0202 	orr.w	r2, r2, #2
 8006454:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800645e:	d103      	bne.n	8006468 <HAL_XSPI_Init+0x1b0>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	655a      	str	r2, [r3, #84]	@ 0x54
 8006466:	e002      	b.n	800646e <HAL_XSPI_Init+0x1b6>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
  }
  return status;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	f8e0c0fc 	.word	0xf8e0c0fc
 800647c:	52005000 	.word	0x52005000
 8006480:	5200a000 	.word	0x5200a000
 8006484:	feffffbf 	.word	0xfeffffbf

08006488 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	@ 0x28
 800648c:	af02      	add	r7, sp, #8
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006494:	f7fa fea8 	bl	80011e8 <HAL_GetTick>
 8006498:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649e:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a4:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d104      	bne.n	80064b6 <HAL_XSPI_Command+0x2e>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064b4:	d115      	bne.n	80064e2 <HAL_XSPI_Command+0x5a>
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b14      	cmp	r3, #20
 80064ba:	d107      	bne.n	80064cc <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d00e      	beq.n	80064e2 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d00a      	beq.n	80064e2 <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b24      	cmp	r3, #36	@ 0x24
 80064d0:	d15e      	bne.n	8006590 <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d003      	beq.n	80064e2 <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d156      	bne.n	8006590 <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2200      	movs	r2, #0
 80064ea:	2120      	movs	r1, #32
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fbcf 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80064f6:	7ffb      	ldrb	r3, [r7, #31]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d146      	bne.n	800658a <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fbf9 	bl	8006cfc <XSPI_ConfigCmd>
 800650a:	4603      	mov	r3, r0
 800650c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800650e:	7ffb      	ldrb	r3, [r7, #31]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d143      	bne.n	800659c <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10e      	bne.n	800653a <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2201      	movs	r2, #1
 8006524:	2102      	movs	r1, #2
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fbb2 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2202      	movs	r2, #2
 8006536:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006538:	e030      	b.n	800659c <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2204      	movs	r2, #4
 8006546:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8006548:	e028      	b.n	800659c <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d10b      	bne.n	800656a <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006556:	2b24      	cmp	r3, #36	@ 0x24
 8006558:	d103      	bne.n	8006562 <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2204      	movs	r2, #4
 800655e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8006560:	e01c      	b.n	800659c <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2214      	movs	r2, #20
 8006566:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8006568:	e018      	b.n	800659c <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d114      	bne.n	800659c <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006576:	2b14      	cmp	r3, #20
 8006578:	d103      	bne.n	8006582 <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2204      	movs	r2, #4
 800657e:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8006580:	e00c      	b.n	800659c <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2224      	movs	r2, #36	@ 0x24
 8006586:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 8006588:	e008      	b.n	800659c <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
 800658a:	2302      	movs	r3, #2
 800658c:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 800658e:	e005      	b.n	800659c <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2210      	movs	r2, #16
 8006598:	659a      	str	r2, [r3, #88]	@ 0x58
 800659a:	e000      	b.n	800659e <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
 800659c:	bf00      	nop
  }

  return status;
 800659e:	7ffb      	ldrb	r3, [r7, #31]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3720      	adds	r7, #32
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	@ 0x28
 80065ac:	af02      	add	r7, sp, #8
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80065b4:	f7fa fe18 	bl	80011e8 <HAL_GetTick>
 80065b8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3350      	adds	r3, #80	@ 0x50
 80065c0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d105      	bne.n	80065d4 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2208      	movs	r2, #8
 80065d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80065d2:	e057      	b.n	8006684 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d14e      	bne.n	800667a <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = (uint8_t *)pData;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006604:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	2201      	movs	r2, #1
 800660e:	2104      	movs	r1, #4
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fb3d 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800661a:	7ffb      	ldrb	r3, [r7, #31]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d113      	bne.n	8006648 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006638:	1e5a      	subs	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1df      	bne.n	8006606 <HAL_XSPI_Transmit+0x5e>
 8006646:	e000      	b.n	800664a <HAL_XSPI_Transmit+0xa2>
          break;
 8006648:	bf00      	nop

      if (status == HAL_OK)
 800664a:	7ffb      	ldrb	r3, [r7, #31]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d119      	bne.n	8006684 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2201      	movs	r2, #1
 8006658:	2102      	movs	r1, #2
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 fb18 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006664:	7ffb      	ldrb	r3, [r7, #31]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10c      	bne.n	8006684 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2202      	movs	r2, #2
 8006670:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2202      	movs	r2, #2
 8006676:	655a      	str	r2, [r3, #84]	@ 0x54
 8006678:	e004      	b.n	8006684 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2210      	movs	r2, #16
 8006682:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8006684:	7ffb      	ldrb	r3, [r7, #31]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3720      	adds	r7, #32
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b08c      	sub	sp, #48	@ 0x30
 8006692:	af02      	add	r7, sp, #8
 8006694:	60f8      	str	r0, [r7, #12]
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800669a:	f7fa fda5 	bl	80011e8 <HAL_GetTick>
 800669e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3350      	adds	r3, #80	@ 0x50
 80066a6:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ae:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80066b8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d106      	bne.n	80066ce <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2208      	movs	r2, #8
 80066ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80066cc:	e07c      	b.n	80067c8 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d172      	bne.n	80067bc <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->XferSize  = hxspi->XferCount;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	645a      	str	r2, [r3, #68]	@ 0x44
      hxspi->pBuffPtr  = pData;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006702:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800670c:	d104      	bne.n	8006718 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	649a      	str	r2, [r3, #72]	@ 0x48
 8006716:	e011      	b.n	800673c <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006720:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006724:	2b00      	cmp	r3, #0
 8006726:	d004      	beq.n	8006732 <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	649a      	str	r2, [r3, #72]	@ 0x48
 8006730:	e004      	b.n	800673c <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	2201      	movs	r2, #1
 8006744:	2106      	movs	r1, #6
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 faa2 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8006752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006756:	2b00      	cmp	r3, #0
 8006758:	d114      	bne.n	8006784 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	7812      	ldrb	r2, [r2, #0]
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	641a      	str	r2, [r3, #64]	@ 0x40
        hxspi->XferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006774:	1e5a      	subs	r2, r3, #1
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hxspi->XferCount > 0U);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1dc      	bne.n	800673c <HAL_XSPI_Receive+0xae>
 8006782:	e000      	b.n	8006786 <HAL_XSPI_Receive+0xf8>
          break;
 8006784:	bf00      	nop

      if (status == HAL_OK)
 8006786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800678a:	2b00      	cmp	r3, #0
 800678c:	d11c      	bne.n	80067c8 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	2201      	movs	r2, #1
 8006796:	2102      	movs	r1, #2
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fa79 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 800679e:	4603      	mov	r3, r0
 80067a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 80067a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10d      	bne.n	80067c8 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2202      	movs	r2, #2
 80067b2:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2202      	movs	r2, #2
 80067b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80067ba:	e005      	b.n	80067c8 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2210      	movs	r2, #16
 80067c6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 80067c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3728      	adds	r7, #40	@ 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	@ 0x28
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80067e0:	f7fa fd02 	bl	80011e8 <HAL_GetTick>
 80067e4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ec:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80067f6:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d167      	bne.n	80068d0 <HAL_XSPI_AutoPolling+0xfc>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006808:	d162      	bne.n	80068d0 <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2200      	movs	r2, #0
 8006812:	2120      	movs	r1, #32
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fa3b 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 800681a:	4603      	mov	r3, r0
 800681c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800681e:	7ffb      	ldrb	r3, [r7, #31]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d152      	bne.n	80068ca <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	6852      	ldr	r2, [r2, #4]
 8006838:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	6912      	ldr	r2, [r2, #16]
 8006844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	6899      	ldr	r1, [r3, #8]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	430b      	orrs	r3, r1
 800685c:	431a      	orrs	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8006866:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006870:	d104      	bne.n	800687c <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	649a      	str	r2, [r3, #72]	@ 0x48
 800687a:	e011      	b.n	80068a0 <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006884:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	649a      	str	r2, [r3, #72]	@ 0x48
 8006894:	e004      	b.n	80068a0 <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	2201      	movs	r2, #1
 80068a8:	2108      	movs	r1, #8
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 f9f0 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 80068b0:	4603      	mov	r3, r0
 80068b2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80068b4:	7ffb      	ldrb	r3, [r7, #31]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d110      	bne.n	80068dc <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2208      	movs	r2, #8
 80068c0:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2202      	movs	r2, #2
 80068c6:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 80068c8:	e008      	b.n	80068dc <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
 80068ca:	2302      	movs	r3, #2
 80068cc:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
 80068ce:	e005      	b.n	80068dc <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2210      	movs	r2, #16
 80068d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80068da:	e000      	b.n	80068de <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
 80068dc:	bf00      	nop
  }

  return status;
 80068de:	7ffb      	ldrb	r3, [r7, #31]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3720      	adds	r7, #32
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80068f2:	f7fa fc79 	bl	80011e8 <HAL_GetTick>
 80068f6:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d134      	bne.n	800696a <HAL_XSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2200      	movs	r2, #0
 800690a:	2120      	movs	r1, #32
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f9bf 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d12b      	bne.n	8006974 <HAL_XSPI_MemoryMapped+0x8c>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2288      	movs	r2, #136	@ 0x88
 8006920:	655a      	str	r2, [r3, #84]	@ 0x54

      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b08      	cmp	r3, #8
 8006928:	d111      	bne.n	800694e <HAL_XSPI_MemoryMapped+0x66>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	6852      	ldr	r2, [r2, #4]
 8006932:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2210      	movs	r2, #16
 800693c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800694c:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	4b0a      	ldr	r3, [pc, #40]	@ (8006980 <HAL_XSPI_MemoryMapped+0x98>)
 8006956:	4013      	ands	r3, r2
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	6812      	ldr	r2, [r2, #0]
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	e004      	b.n	8006974 <HAL_XSPI_MemoryMapped+0x8c>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2210      	movs	r2, #16
 8006972:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 8006974:	7bfb      	ldrb	r3, [r7, #15]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	cffffff7 	.word	0xcffffff7

08006984 <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af02      	add	r7, sp, #8
 800698a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006990:	f7fa fc2a 	bl	80011e8 <HAL_GetTick>
 8006994:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699a:	2b00      	cmp	r3, #0
 800699c:	d06f      	beq.n	8006a7e <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d021      	beq.n	80069f0 <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0204 	bic.w	r2, r2, #4
 80069ba:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fa fe79 	bl	80016b8 <HAL_DMA_Abort>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2204      	movs	r2, #4
 80069d4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fa fe6c 	bl	80016b8 <HAL_DMA_Abort>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2204      	movs	r2, #4
 80069ee:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d033      	beq.n	8006a66 <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0202 	orr.w	r2, r2, #2
 8006a0c:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2201      	movs	r2, #1
 8006a18:	2102      	movs	r1, #2
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f938 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d12e      	bne.n	8006a88 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2120      	movs	r1, #32
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f926 	bl	8006c90 <XSPI_WaitFlagStateUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d11c      	bne.n	8006a88 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006a5c:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a64:	e010      	b.n	8006a88 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006a74:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a7c:	e004      	b.n	8006a88 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2210      	movs	r2, #16
 8006a86:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return status;
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *const hxspi, XSPIM_CfgTypeDef *const pCfg, uint32_t Timeout)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08c      	sub	sp, #48	@ 0x30
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t index;
  uint8_t xspi_enabled = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
 8006ac8:	f107 0314 	add.w	r3, r7, #20
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	60da      	str	r2, [r3, #12]
 8006ad6:	611a      	str	r2, [r3, #16]
 8006ad8:	615a      	str	r2, [r3, #20]
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 8006ada:	2300      	movs	r3, #0
 8006adc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006ae0:	e014      	b.n	8006b0c <HAL_XSPIM_Config+0x5c>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
 8006ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	b2d8      	uxtb	r0, r3
 8006aea:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006aee:	f107 0114 	add.w	r1, r7, #20
 8006af2:	4613      	mov	r3, r2
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	4413      	add	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	440b      	add	r3, r1
 8006afc:	4619      	mov	r1, r3
 8006afe:	f000 fa97 	bl	8007030 <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
 8006b02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b06:	3301      	adds	r3, #1
 8006b08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d9e6      	bls.n	8006ae2 <HAL_XSPIM_Config+0x32>
  }

  /********** Disable both XSPI to configure XSPI IO Manager **********/
  if ((XSPI1->CR & XSPI_CR_EN) != 0U)
 8006b14:	4b5b      	ldr	r3, [pc, #364]	@ (8006c84 <HAL_XSPIM_Config+0x1d4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <HAL_XSPIM_Config+0x88>
  {
    CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
 8006b20:	4b58      	ldr	r3, [pc, #352]	@ (8006c84 <HAL_XSPIM_Config+0x1d4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a57      	ldr	r2, [pc, #348]	@ (8006c84 <HAL_XSPIM_Config+0x1d4>)
 8006b26:	f023 0301 	bic.w	r3, r3, #1
 8006b2a:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x1U;
 8006b2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }
  if ((XSPI2->CR & XSPI_CR_EN) != 0U)
 8006b38:	4b53      	ldr	r3, [pc, #332]	@ (8006c88 <HAL_XSPIM_Config+0x1d8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_XSPIM_Config+0xac>
  {
    CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
 8006b44:	4b50      	ldr	r3, [pc, #320]	@ (8006c88 <HAL_XSPIM_Config+0x1d8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a4f      	ldr	r2, [pc, #316]	@ (8006c88 <HAL_XSPIM_Config+0x1d8>)
 8006b4a:	f023 0301 	bic.w	r3, r3, #1
 8006b4e:	6013      	str	r3, [r2, #0]
    xspi_enabled |= 0x2U;
 8006b50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b54:	f043 0302 	orr.w	r3, r3, #2
 8006b58:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
 8006b5c:	4b4b      	ldr	r3, [pc, #300]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
 8006b62:	4b4a      	ldr	r3, [pc, #296]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	041b      	lsls	r3, r3, #16
 8006b72:	4946      	ldr	r1, [pc, #280]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a41      	ldr	r2, [pc, #260]	@ (8006c84 <HAL_XSPIM_Config+0x1d4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d110      	bne.n	8006ba4 <HAL_XSPIM_Config+0xf4>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	61bb      	str	r3, [r7, #24]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d027      	beq.n	8006be0 <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 8006b90:	4b3e      	ldr	r3, [pc, #248]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	493b      	ldr	r1, [pc, #236]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	600b      	str	r3, [r1, #0]
 8006ba2:	e01d      	b.n	8006be0 <HAL_XSPIM_Config+0x130>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a37      	ldr	r2, [pc, #220]	@ (8006c88 <HAL_XSPIM_Config+0x1d8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d110      	bne.n	8006bd0 <HAL_XSPIM_Config+0x120>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d011      	beq.n	8006be0 <HAL_XSPIM_Config+0x130>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
 8006bbc:	4b33      	ldr	r3, [pc, #204]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4930      	ldr	r1, [pc, #192]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	600b      	str	r3, [r1, #0]
 8006bce:	e007      	b.n	8006be0 <HAL_XSPIM_Config+0x130>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd4:	f043 0208 	orr.w	r2, r3, #8
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	659a      	str	r2, [r3, #88]	@ 0x58
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e04c      	b.n	8006c7a <HAL_XSPIM_Config+0x1ca>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006be6:	e02a      	b.n	8006c3e <HAL_XSPIM_Config+0x18e>
  {
    if ((IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort))
 8006be8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006bec:	4613      	mov	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	3330      	adds	r3, #48	@ 0x30
 8006bf6:	443b      	add	r3, r7
 8006bf8:	3b18      	subs	r3, #24
 8006bfa:	6819      	ldr	r1, [r3, #0]
 8006bfc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	4613      	mov	r3, r2
 8006c04:	005b      	lsls	r3, r3, #1
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	3330      	adds	r3, #48	@ 0x30
 8006c0c:	443b      	add	r3, r7
 8006c0e:	3b18      	subs	r3, #24
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4299      	cmp	r1, r3
 8006c14:	d105      	bne.n	8006c22 <HAL_XSPIM_Config+0x172>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
 8006c16:	4b1d      	ldr	r3, [pc, #116]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006c1c:	f043 0301 	orr.w	r3, r3, #1
 8006c20:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d105      	bne.n	8006c34 <HAL_XSPIM_Config+0x184>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
 8006c28:	4b18      	ldr	r3, [pc, #96]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a17      	ldr	r2, [pc, #92]	@ (8006c8c <HAL_XSPIM_Config+0x1dc>)
 8006c2e:	f043 0302 	orr.w	r3, r3, #2
 8006c32:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 1U); index++)
 8006c34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c38:	3301      	adds	r3, #1
 8006c3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0d0      	beq.n	8006be8 <HAL_XSPIM_Config+0x138>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
 8006c46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <HAL_XSPIM_Config+0x1ae>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
 8006c52:	4b0c      	ldr	r3, [pc, #48]	@ (8006c84 <HAL_XSPIM_Config+0x1d4>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a0b      	ldr	r2, [pc, #44]	@ (8006c84 <HAL_XSPIM_Config+0x1d4>)
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
 8006c5e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <HAL_XSPIM_Config+0x1c6>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
 8006c6a:	4b07      	ldr	r3, [pc, #28]	@ (8006c88 <HAL_XSPIM_Config+0x1d8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a06      	ldr	r2, [pc, #24]	@ (8006c88 <HAL_XSPIM_Config+0x1d8>)
 8006c70:	f043 0301 	orr.w	r3, r3, #1
 8006c74:	6013      	str	r3, [r2, #0]
  }

  return status;
 8006c76:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3730      	adds	r7, #48	@ 0x30
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	52005000 	.word	0x52005000
 8006c88:	5200a000 	.word	0x5200a000
 8006c8c:	5200b400 	.word	0x5200b400

08006c90 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006ca0:	e019      	b.n	8006cd6 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d015      	beq.n	8006cd6 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006caa:	f7fa fa9d 	bl	80011e8 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d302      	bcc.n	8006cc0 <XSPI_WaitFlagStateUntilTimeout+0x30>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10a      	bne.n	8006cd6 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	655a      	str	r2, [r3, #84]	@ 0x54
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cca:	f043 0201 	orr.w	r2, r3, #1
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e00e      	b.n	8006cf4 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6a1a      	ldr	r2, [r3, #32]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	bf14      	ite	ne
 8006ce4:	2301      	movne	r3, #1
 8006ce6:	2300      	moveq	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	461a      	mov	r2, r3
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d1d7      	bne.n	8006ca2 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b089      	sub	sp, #36	@ 0x24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006d18:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d114      	bne.n	8006d6a <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8006d48:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006d52:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006d5c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	e02c      	b.n	8006dc4 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d114      	bne.n	8006d9c <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8006d7a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8006d84:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d8e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	e013      	b.n	8006dc4 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006da4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8006dae:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006db8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d012      	beq.n	8006dfa <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dec:	4319      	orrs	r1, r3
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df2:	430b      	orrs	r3, r1
 8006df4:	431a      	orrs	r2, r3
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f023 021f 	bic.w	r2, r3, #31
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e06:	431a      	orrs	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3a01      	subs	r2, #1
 8006e26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01e      	beq.n	8006e6e <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e38:	d10a      	bne.n	8006e50 <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8006e4a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8006e4e:	e00e      	b.n	8006e6e <XSPI_ConfigCmd+0x172>
    }
    else if(hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e58:	d109      	bne.n	8006e6e <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006e6a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8095 	beq.w	8006fa2 <XSPI_ConfigCmd+0x2a6>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d053      	beq.n	8006f28 <XSPI_ConfigCmd+0x22c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01e      	beq.n	8006ec6 <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4b64      	ldr	r3, [pc, #400]	@ (8007020 <XSPI_ConfigCmd+0x324>)
 8006e8e:	4013      	ands	r3, r2
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	68d1      	ldr	r1, [r2, #12]
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	6952      	ldr	r2, [r2, #20]
 8006e98:	4311      	orrs	r1, r2
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	6912      	ldr	r2, [r2, #16]
 8006e9e:	4311      	orrs	r1, r2
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	69d2      	ldr	r2, [r2, #28]
 8006ea4:	4311      	orrs	r1, r2
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006eaa:	4311      	orrs	r1, r2
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	6a12      	ldr	r2, [r2, #32]
 8006eb0:	4311      	orrs	r1, r2
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006eb6:	4311      	orrs	r1, r2
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e026      	b.n	8006f14 <XSPI_ConfigCmd+0x218>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	4b56      	ldr	r3, [pc, #344]	@ (8007024 <XSPI_ConfigCmd+0x328>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	68d1      	ldr	r1, [r2, #12]
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	6952      	ldr	r2, [r2, #20]
 8006ed6:	4311      	orrs	r1, r2
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	6912      	ldr	r2, [r2, #16]
 8006edc:	4311      	orrs	r1, r2
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	69d2      	ldr	r2, [r2, #28]
 8006ee2:	4311      	orrs	r1, r2
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ee8:	4311      	orrs	r1, r2
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	6a12      	ldr	r2, [r2, #32]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006efe:	d109      	bne.n	8006f14 <XSPI_ConfigCmd+0x218>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d105      	bne.n	8006f14 <XSPI_ConfigCmd+0x218>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	6992      	ldr	r2, [r2, #24]
 8006f24:	649a      	str	r2, [r3, #72]	@ 0x48
 8006f26:	e074      	b.n	8007012 <XSPI_ConfigCmd+0x316>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d015      	beq.n	8006f5c <XSPI_ConfigCmd+0x260>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	4b3c      	ldr	r3, [pc, #240]	@ (8007028 <XSPI_ConfigCmd+0x32c>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	68d1      	ldr	r1, [r2, #12]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	6952      	ldr	r2, [r2, #20]
 8006f40:	4311      	orrs	r1, r2
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	6912      	ldr	r2, [r2, #16]
 8006f46:	4311      	orrs	r1, r2
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f4c:	4311      	orrs	r1, r2
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006f52:	430a      	orrs	r2, r1
 8006f54:	431a      	orrs	r2, r3
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e01d      	b.n	8006f98 <XSPI_ConfigCmd+0x29c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68d9      	ldr	r1, [r3, #12]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	4319      	orrs	r1, r3
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	430b      	orrs	r3, r1
 8006f74:	431a      	orrs	r2, r3
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f82:	d109      	bne.n	8006f98 <XSPI_ConfigCmd+0x29c>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d105      	bne.n	8006f98 <XSPI_ConfigCmd+0x29c>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e037      	b.n	8007012 <XSPI_ConfigCmd+0x316>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d02e      	beq.n	8007008 <XSPI_ConfigCmd+0x30c>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d015      	beq.n	8006fde <XSPI_ConfigCmd+0x2e2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800702c <XSPI_ConfigCmd+0x330>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	69d1      	ldr	r1, [r2, #28]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fc2:	4311      	orrs	r1, r2
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	6a12      	ldr	r2, [r2, #32]
 8006fc8:	4311      	orrs	r1, r2
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006fce:	4311      	orrs	r1, r2
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	e00e      	b.n	8006ffc <XSPI_ConfigCmd+0x300>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	69d9      	ldr	r1, [r3, #28]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fee:	4319      	orrs	r1, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	6992      	ldr	r2, [r2, #24]
 8007004:	649a      	str	r2, [r3, #72]	@ 0x48
 8007006:	e004      	b.n	8007012 <XSPI_ConfigCmd+0x316>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2208      	movs	r2, #8
 8007010:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  return status;
 8007012:	7ffb      	ldrb	r3, [r7, #31]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3724      	adds	r7, #36	@ 0x24
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	f0ffc0c0 	.word	0xf0ffc0c0
 8007024:	ffffc0c0 	.word	0xffffc0c0
 8007028:	f0ffffc0 	.word	0xf0ffffc0
 800702c:	f0ffc0ff 	.word	0xf0ffc0ff

08007030 <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *const pCfg)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d124      	bne.n	800708c <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
 8007042:	4b2c      	ldr	r3, [pc, #176]	@ (80070f4 <XSPIM_GetConfig+0xc4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2200      	movs	r2, #0
 8007052:	605a      	str	r2, [r3, #4]
 8007054:	e002      	b.n	800705c <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2201      	movs	r2, #1
 800705a:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 800705c:	4b25      	ldr	r3, [pc, #148]	@ (80070f4 <XSPIM_GetConfig+0xc4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	2b10      	cmp	r3, #16
 8007066:	d003      	beq.n	8007070 <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
 800706e:	e03a      	b.n	80070e6 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
 8007070:	4b20      	ldr	r3, [pc, #128]	@ (80070f4 <XSPIM_GetConfig+0xc4>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0320 	and.w	r3, r3, #32
 8007078:	2b20      	cmp	r3, #32
 800707a:	d103      	bne.n	8007084 <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2270      	movs	r2, #112	@ 0x70
 8007080:	601a      	str	r2, [r3, #0]
}
 8007082:	e030      	b.n	80070e6 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2210      	movs	r2, #16
 8007088:	601a      	str	r2, [r3, #0]
}
 800708a:	e02c      	b.n	80070e6 <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
 800708c:	4b19      	ldr	r3, [pc, #100]	@ (80070f4 <XSPIM_GetConfig+0xc4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
 8007096:	4b17      	ldr	r3, [pc, #92]	@ (80070f4 <XSPIM_GetConfig+0xc4>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	085b      	lsrs	r3, r3, #1
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d003      	beq.n	80070b2 <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2200      	movs	r2, #0
 80070ae:	605a      	str	r2, [r3, #4]
 80070b0:	e002      	b.n	80070b8 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2201      	movs	r2, #1
 80070b6:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
 80070b8:	4b0e      	ldr	r3, [pc, #56]	@ (80070f4 <XSPIM_GetConfig+0xc4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d003      	beq.n	80070cc <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
}
 80070ca:	e00c      	b.n	80070e6 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
 80070cc:	4b09      	ldr	r3, [pc, #36]	@ (80070f4 <XSPIM_GetConfig+0xc4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d4:	2b40      	cmp	r3, #64	@ 0x40
 80070d6:	d103      	bne.n	80070e0 <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2270      	movs	r2, #112	@ 0x70
 80070dc:	601a      	str	r2, [r3, #0]
}
 80070de:	e002      	b.n	80070e6 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2210      	movs	r2, #16
 80070e4:	601a      	str	r2, [r3, #0]
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	5200b400 	.word	0x5200b400

080070f8 <BOOT_Application>:
  *  @addtogroup BOOT_XIP_Exported_Functions Boot XIP exported functions
  * @{
  */

BOOTStatus_TypeDef BOOT_Application(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
 80070fe:	f000 f80e 	bl	800711e <MapMemory>
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d103      	bne.n	8007114 <BOOT_Application+0x1c>
  {
    /* jump on the application */
    retr = JumpToApplication();
 800710c:	f000 f836 	bl	800717c <JumpToApplication>
 8007110:	4603      	mov	r3, r0
 8007112:	71fb      	strb	r3, [r7, #7]
  }
  return retr;
 8007114:	79fb      	ldrb	r3, [r7, #7]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	71fb      	strb	r3, [r7, #7]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8007128:	2300      	movs	r3, #0
 800712a:	71bb      	strb	r3, [r7, #6]
 800712c:	e01d      	b.n	800716a <MapMemory+0x4c>
  {
    switch(EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE))
 800712e:	79bb      	ldrb	r3, [r7, #6]
 8007130:	2100      	movs	r1, #0
 8007132:	4618      	mov	r0, r3
 8007134:	f000 f916 	bl	8007364 <EXTMEM_MemoryMappedMode>
 8007138:	4603      	mov	r3, r0
 800713a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713e:	d002      	beq.n	8007146 <MapMemory+0x28>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00e      	beq.n	8007162 <MapMemory+0x44>
 8007144:	e00a      	b.n	800715c <MapMemory+0x3e>
    {
      case EXTMEM_ERROR_NOTSUPPORTED :
           if (EXTMEM_MEMORY_BOOTXIP ==  index)
 8007146:	79bb      	ldrb	r3, [r7, #6]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d102      	bne.n	8007152 <MapMemory+0x34>
           {
             retr = BOOT_ERROR_INCOMPATIBLEMEMORY;
 800714c:	2304      	movs	r3, #4
 800714e:	71fb      	strb	r3, [r7, #7]
           {
            /* We considers the memory will be not used any more */
            EXTMEM_DeInit(index);
           }
      case EXTMEM_OK:
      break;
 8007150:	e007      	b.n	8007162 <MapMemory+0x44>
            EXTMEM_DeInit(index);
 8007152:	79bb      	ldrb	r3, [r7, #6]
 8007154:	4618      	mov	r0, r3
 8007156:	f000 f8d9 	bl	800730c <EXTMEM_DeInit>
      break;
 800715a:	e002      	b.n	8007162 <MapMemory+0x44>
      default :
        retr = BOOT_ERROR_MAPPEDMODEFAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	71fb      	strb	r3, [r7, #7]
      break;
 8007160:	e000      	b.n	8007164 <MapMemory+0x46>
      break;
 8007162:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
 8007164:	79bb      	ldrb	r3, [r7, #6]
 8007166:	3301      	adds	r3, #1
 8007168:	71bb      	strb	r3, [r7, #6]
 800716a:	79bb      	ldrb	r3, [r7, #6]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0de      	beq.n	800712e <MapMemory+0x10>
    }
  }
  return retr;
 8007170:	79fb      	ldrb	r3, [r7, #7]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08a      	sub	sp, #40	@ 0x28
 8007180:	af00      	add	r7, sp, #0
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  pFunction JumpToApp;
  uint32_t Application_vector;

  if (EXTMEM_OK != EXTMEM_GetMapAddress(EXTMEM_MEMORY_BOOTXIP, &Application_vector))
 8007182:	1d3b      	adds	r3, r7, #4
 8007184:	4619      	mov	r1, r3
 8007186:	2000      	movs	r0, #0
 8007188:	f000 f93a 	bl	8007400 <EXTMEM_GetMapAddress>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <JumpToApplication+0x1a>
  {
      return BOOT_ERROR_INCOMPATIBLEMEMORY;
 8007192:	2304      	movs	r3, #4
 8007194:	e072      	b.n	800727c <JumpToApplication+0x100>
  }

  /* Suspend SysTick */
  HAL_SuspendTick();
 8007196:	f7fa f857 	bl	8001248 <HAL_SuspendTick>
  __ASM volatile ("dsb 0xF":::"memory");
 800719a:	f3bf 8f4f 	dsb	sy
}
 800719e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80071a0:	f3bf 8f6f 	isb	sy
}
 80071a4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80071a6:	4b37      	ldr	r3, [pc, #220]	@ (8007284 <JumpToApplication+0x108>)
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	4a36      	ldr	r2, [pc, #216]	@ (8007284 <JumpToApplication+0x108>)
 80071ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80071b0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80071b2:	4b34      	ldr	r3, [pc, #208]	@ (8007284 <JumpToApplication+0x108>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80071ba:	f3bf 8f4f 	dsb	sy
}
 80071be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80071c0:	f3bf 8f6f 	isb	sy
}
 80071c4:	bf00      	nop
}
 80071c6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80071c8:	4b2e      	ldr	r3, [pc, #184]	@ (8007284 <JumpToApplication+0x108>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80071d0:	f3bf 8f4f 	dsb	sy
}
 80071d4:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80071d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007284 <JumpToApplication+0x108>)
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	4a2a      	ldr	r2, [pc, #168]	@ (8007284 <JumpToApplication+0x108>)
 80071dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80071e2:	f3bf 8f4f 	dsb	sy
}
 80071e6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80071e8:	4b26      	ldr	r3, [pc, #152]	@ (8007284 <JumpToApplication+0x108>)
 80071ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ee:	613b      	str	r3, [r7, #16]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	0b5b      	lsrs	r3, r3, #13
 80071f4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80071f8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	08db      	lsrs	r3, r3, #3
 80071fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007202:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800720c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8007212:	491c      	ldr	r1, [pc, #112]	@ (8007284 <JumpToApplication+0x108>)
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	1e5a      	subs	r2, r3, #1
 800721e:	60ba      	str	r2, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1ef      	bne.n	8007204 <JumpToApplication+0x88>
    } while(sets-- != 0U);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	1e5a      	subs	r2, r3, #1
 8007228:	60fa      	str	r2, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e5      	bne.n	80071fa <JumpToApplication+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 800722e:	f3bf 8f4f 	dsb	sy
}
 8007232:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007234:	f3bf 8f6f 	isb	sy
}
 8007238:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800723a:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800723c:	f3ef 8310 	mrs	r3, PRIMASK
 8007240:	617b      	str	r3, [r7, #20]
  return(result);
 8007242:	697b      	ldr	r3, [r7, #20]

  /* Disable D-Cache---------------------------------------------------------*/
  SCB_DisableDCache();

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
 8007244:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8007246:	b672      	cpsid	i
}
 8007248:	bf00      	nop
  __disable_irq();

  /* Apply offsets for image location and vector table offset */
  Application_vector += EXTMEM_XIP_IMAGE_OFFSET + EXTMEM_HEADER_OFFSET;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	607b      	str	r3, [r7, #4]

  SCB->VTOR = (uint32_t)Application_vector;
 800724e:	4a0d      	ldr	r2, [pc, #52]	@ (8007284 <JumpToApplication+0x108>)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4u));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3304      	adds	r3, #4
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	623b      	str	r3, [r7, #32]
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*) Application_vector);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	f383 8808 	msr	MSP, r3
}
 8007268:	bf00      	nop
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	61fb      	str	r3, [r7, #28]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	f383 8810 	msr	PRIMASK, r3
}
 8007274:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	4798      	blx	r3
  return BOOT_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3728      	adds	r7, #40	@ 0x28
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	e000ed00 	.word	0xe000ed00

08007288 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8007292:	23fb      	movs	r3, #251	@ 0xfb
 8007294:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d12f      	bne.n	80072fc <EXTMEM_Init+0x74>
  {
    retr = EXTMEM_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 80072a0:	4a19      	ldr	r2, [pc, #100]	@ (8007308 <EXTMEM_Init+0x80>)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	21ac      	movs	r1, #172	@ 0xac
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d120      	bne.n	80072f4 <EXTMEM_Init+0x6c>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
 80072b2:	4a15      	ldr	r2, [pc, #84]	@ (8007308 <EXTMEM_Init+0x80>)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	21ac      	movs	r1, #172	@ 0xac
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	4413      	add	r3, r2
 80072be:	3304      	adds	r3, #4
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	4a11      	ldr	r2, [pc, #68]	@ (8007308 <EXTMEM_Init+0x80>)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	21ac      	movs	r1, #172	@ 0xac
 80072c8:	fb01 f303 	mul.w	r3, r1, r3
 80072cc:	4413      	add	r3, r2
 80072ce:	3308      	adds	r3, #8
 80072d0:	7819      	ldrb	r1, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	22ac      	movs	r2, #172	@ 0xac
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	3308      	adds	r3, #8
 80072dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007308 <EXTMEM_Init+0x80>)
 80072de:	4413      	add	r3, r2
 80072e0:	3304      	adds	r3, #4
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	f002 fabc 	bl	8009860 <EXTMEM_DRIVER_NOR_SFDP_Init>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <EXTMEM_Init+0x72>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
 80072ee:	23fd      	movs	r3, #253	@ 0xfd
 80072f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072f2:	e002      	b.n	80072fa <EXTMEM_Init+0x72>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 80072f4:	23fe      	movs	r3, #254	@ 0xfe
 80072f6:	73fb      	strb	r3, [r7, #15]
        break;
 80072f8:	e000      	b.n	80072fc <EXTMEM_Init+0x74>
        break;
 80072fa:	bf00      	nop
      }
    }
  }
  return retr;
 80072fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	2400015c 	.word	0x2400015c

0800730c <EXTMEM_DeInit>:

EXTMEM_StatusTypeDef EXTMEM_DeInit(uint32_t MemId)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8007314:	23fb      	movs	r3, #251	@ 0xfb
 8007316:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d119      	bne.n	8007352 <EXTMEM_DeInit+0x46>
  {
    retr = EXTMEM_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8007322:	4a0f      	ldr	r2, [pc, #60]	@ (8007360 <EXTMEM_DeInit+0x54>)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	21ac      	movs	r1, #172	@ 0xac
 8007328:	fb01 f303 	mul.w	r3, r1, r3
 800732c:	4413      	add	r3, r2
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10b      	bne.n	800734c <EXTMEM_DeInit+0x40>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* UnInitialize the SFDP memory, the return is always OK no need to test the returned value */
        (void)EXTMEM_DRIVER_NOR_SFDP_DeInit(&extmem_list_config[MemId].NorSfdpObject);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	22ac      	movs	r2, #172	@ 0xac
 8007338:	fb02 f303 	mul.w	r3, r2, r3
 800733c:	3308      	adds	r3, #8
 800733e:	4a08      	ldr	r2, [pc, #32]	@ (8007360 <EXTMEM_DeInit+0x54>)
 8007340:	4413      	add	r3, r2
 8007342:	3304      	adds	r3, #4
 8007344:	4618      	mov	r0, r3
 8007346:	f002 fb45 	bl	80099d4 <EXTMEM_DRIVER_NOR_SFDP_DeInit>
        break;
 800734a:	e002      	b.n	8007352 <EXTMEM_DeInit+0x46>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
      default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 800734c:	23fe      	movs	r3, #254	@ 0xfe
 800734e:	73fb      	strb	r3, [r7, #15]
        break;
 8007350:	bf00      	nop
      }
    }
  }
  return retr;
 8007352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	2400015c 	.word	0x2400015c

08007364 <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 8007370:	23fb      	movs	r3, #251	@ 0xfb
 8007372:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d139      	bne.n	80073ee <EXTMEM_MemoryMappedMode+0x8a>
  {
    retr = EXTMEM_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 800737e:	4a1f      	ldr	r2, [pc, #124]	@ (80073fc <EXTMEM_MemoryMappedMode+0x98>)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	21ac      	movs	r1, #172	@ 0xac
 8007384:	fb01 f303 	mul.w	r3, r1, r3
 8007388:	4413      	add	r3, r2
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <EXTMEM_MemoryMappedMode+0x32>
 8007390:	2b03      	cmp	r3, #3
 8007392:	d025      	beq.n	80073e0 <EXTMEM_MemoryMappedMode+0x7c>
 8007394:	e027      	b.n	80073e6 <EXTMEM_MemoryMappedMode+0x82>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d110      	bne.n	80073be <EXTMEM_MemoryMappedMode+0x5a>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	22ac      	movs	r2, #172	@ 0xac
 80073a0:	fb02 f303 	mul.w	r3, r2, r3
 80073a4:	3308      	adds	r3, #8
 80073a6:	4a15      	ldr	r2, [pc, #84]	@ (80073fc <EXTMEM_MemoryMappedMode+0x98>)
 80073a8:	4413      	add	r3, r2
 80073aa:	3304      	adds	r3, #4
 80073ac:	4618      	mov	r0, r3
 80073ae:	f002 fb20 	bl	80099f2 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
 80073b2:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d019      	beq.n	80073ec <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
 80073b8:	f06f 0302 	mvn.w	r3, #2
 80073bc:	e019      	b.n	80073f2 <EXTMEM_MemoryMappedMode+0x8e>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	22ac      	movs	r2, #172	@ 0xac
 80073c2:	fb02 f303 	mul.w	r3, r2, r3
 80073c6:	3308      	adds	r3, #8
 80073c8:	4a0c      	ldr	r2, [pc, #48]	@ (80073fc <EXTMEM_MemoryMappedMode+0x98>)
 80073ca:	4413      	add	r3, r2
 80073cc:	3304      	adds	r3, #4
 80073ce:	4618      	mov	r0, r3
 80073d0:	f002 fb30 	bl	8009a34 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
 80073d4:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
 80073da:	f06f 0302 	mvn.w	r3, #2
 80073de:	e008      	b.n	80073f2 <EXTMEM_MemoryMappedMode+0x8e>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
 80073e0:	23ff      	movs	r3, #255	@ 0xff
 80073e2:	73fb      	strb	r3, [r7, #15]
    break;
 80073e4:	e003      	b.n	80073ee <EXTMEM_MemoryMappedMode+0x8a>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 80073e6:	23fe      	movs	r3, #254	@ 0xfe
 80073e8:	73fb      	strb	r3, [r7, #15]
        break;
 80073ea:	e000      	b.n	80073ee <EXTMEM_MemoryMappedMode+0x8a>
        break;
 80073ec:	bf00      	nop
      }
    }
  }
  return retr;
 80073ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	2400015c 	.word	0x2400015c

08007400 <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
 800740a:	23fb      	movs	r3, #251	@ 0xfb
 800740c:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d134      	bne.n	800747e <EXTMEM_GetMapAddress+0x7e>
  {
    retr = EXTMEM_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
 8007418:	4a1d      	ldr	r2, [pc, #116]	@ (8007490 <EXTMEM_GetMapAddress+0x90>)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	21ac      	movs	r1, #172	@ 0xac
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	4413      	add	r3, r2
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <EXTMEM_GetMapAddress+0x2e>
 800742a:	2b02      	cmp	r3, #2
 800742c:	d124      	bne.n	8007478 <EXTMEM_GetMapAddress+0x78>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)       
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
 800742e:	4a18      	ldr	r2, [pc, #96]	@ (8007490 <EXTMEM_GetMapAddress+0x90>)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	21ac      	movs	r1, #172	@ 0xac
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	4413      	add	r3, r2
 800743a:	3304      	adds	r3, #4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a14      	ldr	r2, [pc, #80]	@ (8007494 <EXTMEM_GetMapAddress+0x94>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d104      	bne.n	8007450 <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 800744c:	601a      	str	r2, [r3, #0]
       else
       { 
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
 800744e:	e016      	b.n	800747e <EXTMEM_GetMapAddress+0x7e>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
 8007450:	4a0f      	ldr	r2, [pc, #60]	@ (8007490 <EXTMEM_GetMapAddress+0x90>)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	21ac      	movs	r1, #172	@ 0xac
 8007456:	fb01 f303 	mul.w	r3, r1, r3
 800745a:	4413      	add	r3, r2
 800745c:	3304      	adds	r3, #4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a0d      	ldr	r2, [pc, #52]	@ (8007498 <EXTMEM_GetMapAddress+0x98>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d104      	bne.n	8007472 <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 800746e:	601a      	str	r2, [r3, #0]
       break;
 8007470:	e005      	b.n	800747e <EXTMEM_GetMapAddress+0x7e>
          retr = EXTMEM_ERROR_DRIVER;
 8007472:	23fd      	movs	r3, #253	@ 0xfd
 8007474:	73fb      	strb	r3, [r7, #15]
       break;
 8007476:	e002      	b.n	800747e <EXTMEM_GetMapAddress+0x7e>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */      
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
 8007478:	23fe      	movs	r3, #254	@ 0xfe
 800747a:	73fb      	strb	r3, [r7, #15]
        break;
 800747c:	bf00      	nop
      }
    }
  }
  return retr;
 800747e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	2400015c 	.word	0x2400015c
 8007494:	52005000 	.word	0x52005000
 8007498:	5200a000 	.word	0x5200a000

0800749c <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d102      	bne.n	80074ba <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	75fb      	strb	r3, [r7, #23]
 80074b8:	e028      	b.n	800750c <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c2:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00d      	beq.n	80074e6 <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d302      	bcc.n	80074e6 <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	613b      	str	r3, [r7, #16]
    divider++;
    divider++;
#endif

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3301      	adds	r3, #1
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCK::"); DEBUG_PARAM_INT(divider); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	430a      	orrs	r2, r1
 800750a:	60da      	str	r2, [r3, #12]
  }

  return retr;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
}
 800750e:	4618      	mov	r0, r3
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b096      	sub	sp, #88	@ 0x58
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
 8007524:	f107 030c 	add.w	r3, r7, #12
 8007528:	224c      	movs	r2, #76	@ 0x4c
 800752a:	2100      	movs	r1, #0
 800752c:	4618      	mov	r0, r3
 800752e:	f002 fa97 	bl	8009a60 <memset>
 8007532:	235a      	movs	r3, #90	@ 0x5a
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	2301      	movs	r3, #1
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800753e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007540:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007546:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800754a:	647b      	str	r3, [r7, #68]	@ 0x44
 800754c:	2308      	movs	r3, #8
 800754e:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3304      	adds	r3, #4
 800755a:	f107 010c 	add.w	r1, r7, #12
 800755e:	224c      	movs	r2, #76	@ 0x4c
 8007560:	4618      	mov	r0, r3
 8007562:	f002 faa9 	bl	8009ab8 <memcpy>
  SalXspi->CommandExtension = 0;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3758      	adds	r7, #88	@ 0x58
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParmetersType, void *ParamVal)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b098      	sub	sp, #96	@ 0x60
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	460b      	mov	r3, r1
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f107 0010 	add.w	r0, r7, #16
 800759a:	3304      	adds	r3, #4
 800759c:	224c      	movs	r2, #76	@ 0x4c
 800759e:	4619      	mov	r1, r3
 80075a0:	f002 fa8a 	bl	8009ab8 <memcpy>

  switch (ParmetersType) {
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	f200 812a 	bhi.w	8007800 <SAL_XSPI_MemoryConfig+0x280>
 80075ac:	a201      	add	r2, pc, #4	@ (adr r2, 80075b4 <SAL_XSPI_MemoryConfig+0x34>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075c9 	.word	0x080075c9
 80075b8:	080077f1 	.word	0x080077f1
 80075bc:	080077c3 	.word	0x080077c3
 80075c0:	08007801 	.word	0x08007801
 80075c4:	080077cb 	.word	0x080077cb
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	781a      	ldrb	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80075d8:	2b0b      	cmp	r3, #11
 80075da:	f200 80ed 	bhi.w	80077b8 <SAL_XSPI_MemoryConfig+0x238>
 80075de:	a201      	add	r2, pc, #4	@ (adr r2, 80075e4 <SAL_XSPI_MemoryConfig+0x64>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	08007615 	.word	0x08007615
 80075e8:	08007615 	.word	0x08007615
 80075ec:	08007615 	.word	0x08007615
 80075f0:	08007615 	.word	0x08007615
 80075f4:	08007645 	.word	0x08007645
 80075f8:	08007645 	.word	0x08007645
 80075fc:	08007675 	.word	0x08007675
 8007600:	080076a9 	.word	0x080076a9
 8007604:	080076d9 	.word	0x080076d9
 8007608:	0800770f 	.word	0x0800770f
 800760c:	08007745 	.word	0x08007745
 8007610:	0800777f 	.word	0x0800777f
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 8007614:	2301      	movs	r3, #1
 8007616:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8007618:	2300      	movs	r3, #0
 800761a:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800761c:	2300      	movs	r3, #0
 800761e:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
 8007620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007624:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 8007626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800762a:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 800762c:	2300      	movs	r3, #0
 800762e:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
 8007630:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007634:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 8007636:	2300      	movs	r3, #0
 8007638:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 800763a:	2308      	movs	r3, #8
 800763c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800763e:	2300      	movs	r3, #0
 8007640:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8007642:	e0bd      	b.n	80077c0 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 8007644:	2303      	movs	r3, #3
 8007646:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8007648:	2300      	movs	r3, #0
 800764a:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800764c:	2300      	movs	r3, #0
 800764e:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 8007650:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007654:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 8007656:	2300      	movs	r3, #0
 8007658:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 800765a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800765e:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
 8007660:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8007664:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 8007666:	2300      	movs	r3, #0
 8007668:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
 800766a:	2306      	movs	r3, #6
 800766c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 800766e:	2300      	movs	r3, #0
 8007670:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8007672:	e0a5      	b.n	80077c0 <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
 8007674:	2303      	movs	r3, #3
 8007676:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 8007678:	2300      	movs	r3, #0
 800767a:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 800767c:	2308      	movs	r3, #8
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
 8007680:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007684:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 8007686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800768a:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800768c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007690:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
 8007692:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8007696:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 8007698:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800769c:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
 800769e:	2306      	movs	r3, #6
 80076a0:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80076a6:	e08b      	b.n	80077c0 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 80076ac:	2300      	movs	r3, #0
 80076ae:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80076b0:	2300      	movs	r3, #0
 80076b2:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 80076b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 80076ba:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80076be:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 80076c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80076c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 80076ce:	2308      	movs	r3, #8
 80076d0:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80076d6:	e073      	b.n	80077c0 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
 80076d8:	2304      	movs	r3, #4
 80076da:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
 80076dc:	2300      	movs	r3, #0
 80076de:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 80076e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 80076ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80076ee:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80076f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80076f4:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 80076f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80076fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 80076fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007700:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
 8007702:	2308      	movs	r3, #8
 8007704:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
 8007706:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800770a:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800770c:	e058      	b.n	80077c0 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
 800770e:	2304      	movs	r3, #4
 8007710:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
 8007712:	2310      	movs	r3, #16
 8007714:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
 8007716:	2308      	movs	r3, #8
 8007718:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
 800771a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800771e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 8007720:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007724:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8007726:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800772a:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
 800772c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007730:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
 8007732:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007736:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
 8007738:	2314      	movs	r3, #20
 800773a:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
 800773c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007740:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 8007742:	e03d      	b.n	80077c0 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 8007744:	2304      	movs	r3, #4
 8007746:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 8007748:	2300      	movs	r3, #0
 800774a:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 800774c:	2300      	movs	r3, #0
 800774e:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 8007750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007754:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8007756:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800775a:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 800775c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007760:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 8007762:	2300      	movs	r3, #0
 8007764:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
 8007766:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800776a:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 800776c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007770:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
 8007772:	230a      	movs	r3, #10
 8007774:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
 8007776:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800777a:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 800777c:	e020      	b.n	80077c0 <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
 800777e:	2304      	movs	r3, #4
 8007780:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
 8007782:	2300      	movs	r3, #0
 8007784:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
 8007786:	2300      	movs	r3, #0
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
 800778a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800778e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
 8007790:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007794:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
 8007796:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800779a:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
 800779c:	2300      	movs	r3, #0
 800779e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
 80077a0:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
 80077a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
 80077a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80077aa:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
 80077ac:	230a      	movs	r3, #10
 80077ae:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
 80077b0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80077b4:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
 80077b6:	e003      	b.n	80077c0 <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
 80077be:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
 80077c0:	e022      	b.n	8007808 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BITS: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BITS"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
 80077c2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80077c6:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
 80077c8:	e01e      	b.n	8007808 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80077de:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80077e2:	041a      	lsls	r2, r3, #16
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	609a      	str	r2, [r3, #8]
    break;
 80077ee:	e00b      	b.n	8007808 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
 80077f8:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80077fc:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
 80077fe:	e003      	b.n	8007808 <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
 8007806:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3304      	adds	r3, #4
 800780c:	f107 0110 	add.w	r1, r7, #16
 8007810:	224c      	movs	r2, #76	@ 0x4c
 8007812:	4618      	mov	r0, r3
 8007814:	f002 f950 	bl	8009ab8 <memcpy>
  return retr;
 8007818:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800781c:	4618      	mov	r0, r3
 800781e:	3760      	adds	r7, #96	@ 0x60
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b098      	sub	sp, #96	@ 0x60
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f107 0010 	add.w	r0, r7, #16
 8007838:	3304      	adds	r3, #4
 800783a:	224c      	movs	r2, #76	@ 0x4c
 800783c:	4619      	mov	r1, r3
 800783e:	f002 f93b 	bl	8009ab8 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x5A);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007848:	6a39      	ldr	r1, [r7, #32]
 800784a:	225a      	movs	r2, #90	@ 0x5a
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fb6a 	bl	8007f26 <XSPI_FormatCommand>
 8007852:	4603      	mov	r3, r0
 8007854:	61bb      	str	r3, [r7, #24]

  s_command.Address     = Address;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles = SalXspi->SFDPDummyCycle;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007864:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800786c:	d102      	bne.n	8007874 <SAL_XSPI_GetSFDP+0x50>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
 800786e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007872:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
 8007874:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800787a:	d103      	bne.n	8007884 <SAL_XSPI_GetSFDP+0x60>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
 800787c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007880:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007882:	e001      	b.n	8007888 <SAL_XSPI_GetSFDP+0x64>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
 8007884:	2300      	movs	r3, #0
 8007886:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f107 0110 	add.w	r1, r7, #16
 8007890:	2264      	movs	r2, #100	@ 0x64
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe fdf8 	bl	8006488 <HAL_XSPI_Command>
 8007898:	4603      	mov	r3, r0
 800789a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 800789e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10a      	bne.n	80078bc <SAL_XSPI_GetSFDP+0x98>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2264      	movs	r2, #100	@ 0x64
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe feed 	bl	800668e <HAL_XSPI_Receive>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80078ba:	e000      	b.n	80078be <SAL_XSPI_GetSFDP+0x9a>
    goto error;
 80078bc:	bf00      	nop

error:
  if (retr != HAL_OK )
 80078be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d004      	beq.n	80078d0 <SAL_XSPI_GetSFDP+0xac>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff f85a 	bl	8006984 <HAL_XSPI_Abort>
  }
  return retr;
 80078d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3760      	adds	r7, #96	@ 0x60
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b098      	sub	sp, #96	@ 0x60
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f107 0010 	add.w	r0, r7, #16
 80078ee:	3304      	adds	r3, #4
 80078f0:	224c      	movs	r2, #76	@ 0x4c
 80078f2:	4619      	mov	r1, r3
 80078f4:	f002 f8e0 	bl	8009ab8 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x9F);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078fe:	6a39      	ldr	r1, [r7, #32]
 8007900:	229f      	movs	r2, #159	@ 0x9f
 8007902:	4618      	mov	r0, r3
 8007904:	f000 fb0f 	bl	8007f26 <XSPI_FormatCommand>
 8007908:	4603      	mov	r3, r0
 800790a:	61bb      	str	r3, [r7, #24]

  s_command.DataLength  = DataSize;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.AddressMode = HAL_XSPI_ADDRESS_NONE;
 8007910:	2300      	movs	r3, #0
 8007912:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d105      	bne.n	8007926 <SAL_XSPI_GetId+0x4a>
  {
    s_command.DummyCycles       = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
 800791e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007924:	e003      	b.n	800792e <SAL_XSPI_GetId+0x52>
  }
  else
  {
    /* this behavior is valid for macromix and must be confirmed on the other memories */
    s_command.Address = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
 800792a:	2308      	movs	r3, #8
 800792c:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f107 0110 	add.w	r1, r7, #16
 8007936:	2264      	movs	r2, #100	@ 0x64
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe fda5 	bl	8006488 <HAL_XSPI_Command>
 800793e:	4603      	mov	r3, r0
 8007940:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8007944:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <SAL_XSPI_GetId+0x86>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2264      	movs	r2, #100	@ 0x64
 8007952:	68b9      	ldr	r1, [r7, #8]
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fe9a 	bl	800668e <HAL_XSPI_Receive>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007960:	e000      	b.n	8007964 <SAL_XSPI_GetId+0x88>
    goto error;
 8007962:	bf00      	nop

error:
  if (retr != HAL_OK )
 8007964:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <SAL_XSPI_GetId+0x9a>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f7ff f807 	bl	8006984 <HAL_XSPI_Abort>
  }
  return retr;
 8007976:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800797a:	4618      	mov	r0, r3
 800797c:	3760      	adds	r7, #96	@ 0x60
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b098      	sub	sp, #96	@ 0x60
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	460b      	mov	r3, r1
 8007990:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f107 0010 	add.w	r0, r7, #16
 8007998:	3304      	adds	r3, #4
 800799a:	224c      	movs	r2, #76	@ 0x4c
 800799c:	4619      	mov	r1, r3
 800799e:	f002 f88b 	bl	8009ab8 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80079a8:	6a39      	ldr	r1, [r7, #32]
 80079aa:	7afa      	ldrb	r2, [r7, #11]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 faba 	bl	8007f26 <XSPI_FormatCommand>
 80079b2:	4603      	mov	r3, r0
 80079b4:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
 80079ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80079c4:	2b05      	cmp	r3, #5
 80079c6:	d006      	beq.n	80079d6 <SAL_XSPI_Read+0x54>
 80079c8:	2b05      	cmp	r3, #5
 80079ca:	dc1a      	bgt.n	8007a02 <SAL_XSPI_Read+0x80>
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d014      	beq.n	80079fa <SAL_XSPI_Read+0x78>
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d00b      	beq.n	80079ec <SAL_XSPI_Read+0x6a>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
 80079d4:	e015      	b.n	8007a02 <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
 80079d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80079da:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
 80079dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079e0:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles = SalXspi->DTRDummyCycle;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 80079e8:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
 80079ea:	e00b      	b.n	8007a04 <SAL_XSPI_Read+0x82>
     s_command.AddressMode = HAL_XSPI_ADDRESS_2_LINES;
 80079ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
 80079f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
 80079f8:	e004      	b.n	8007a04 <SAL_XSPI_Read+0x82>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
 80079fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
 8007a00:	e000      	b.n	8007a04 <SAL_XSPI_Read+0x82>
   break;
 8007a02:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f107 0110 	add.w	r1, r7, #16
 8007a0c:	2264      	movs	r2, #100	@ 0x64
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fd3a 	bl	8006488 <HAL_XSPI_Command>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8007a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d107      	bne.n	8007a32 <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 faba 	bl	8007f9e <XSPI_Receive>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007a30:	e000      	b.n	8007a34 <SAL_XSPI_Read+0xb2>
    goto error;
 8007a32:	bf00      	nop

error:
  if (retr != HAL_OK )
 8007a34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe ff9f 	bl	8006984 <HAL_XSPI_Abort>
  }
  return retr;
 8007a46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3760      	adds	r7, #96	@ 0x60
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b098      	sub	sp, #96	@ 0x60
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	607a      	str	r2, [r7, #4]
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f107 0010 	add.w	r0, r7, #16
 8007a68:	3304      	adds	r3, #4
 8007a6a:	224c      	movs	r2, #76	@ 0x4c
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f002 f823 	bl	8009ab8 <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a78:	6a39      	ldr	r1, [r7, #32]
 8007a7a:	7afa      	ldrb	r2, [r7, #11]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fa52 	bl	8007f26 <XSPI_FormatCommand>
 8007a82:	4603      	mov	r3, r0
 8007a84:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
 8007a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f107 0110 	add.w	r1, r7, #16
 8007a9e:	2264      	movs	r2, #100	@ 0x64
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fcf1 	bl	8006488 <HAL_XSPI_Command>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
 8007aac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d107      	bne.n	8007ac4 <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fa5e 	bl	8007f78 <XSPI_Transmit>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007ac2:	e000      	b.n	8007ac6 <SAL_XSPI_Write+0x74>
    goto error;
 8007ac4:	bf00      	nop

error:
  if (retr != HAL_OK )
 8007ac6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fe ff56 	bl	8006984 <HAL_XSPI_Abort>
  }
  return retr;
 8007ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3760      	adds	r7, #96	@ 0x60
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b098      	sub	sp, #96	@ 0x60
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	461a      	mov	r2, r3
 8007af0:	460b      	mov	r3, r1
 8007af2:	72fb      	strb	r3, [r7, #11]
 8007af4:	4613      	mov	r3, r2
 8007af6:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f107 0010 	add.w	r0, r7, #16
 8007afe:	3304      	adds	r3, #4
 8007b00:	224c      	movs	r2, #76	@ 0x4c
 8007b02:	4619      	mov	r1, r3
 8007b04:	f001 ffd8 	bl	8009ab8 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b0e:	6a39      	ldr	r1, [r7, #32]
 8007b10:	7afa      	ldrb	r2, [r7, #11]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fa07 	bl	8007f26 <XSPI_FormatCommand>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 8007b24:	893b      	ldrh	r3, [r7, #8]
 8007b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
 8007b2c:	893b      	ldrh	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f107 0110 	add.w	r1, r7, #16
 8007b3e:	2264      	movs	r2, #100	@ 0x64
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fca1 	bl	8006488 <HAL_XSPI_Command>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
 8007b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10c      	bne.n	8007b6e <SAL_XSPI_CommandSendData+0x8a>
 8007b54:	893b      	ldrh	r3, [r7, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d009      	beq.n	8007b6e <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2264      	movs	r2, #100	@ 0x64
 8007b60:	6879      	ldr	r1, [r7, #4]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fd20 	bl	80065a8 <HAL_XSPI_Transmit>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8007b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe ff02 	bl	8006984 <HAL_XSPI_Abort>
  }
  return retr;
 8007b80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3760      	adds	r7, #96	@ 0x60
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b098      	sub	sp, #96	@ 0x60
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	607a      	str	r2, [r7, #4]
 8007b96:	461a      	mov	r2, r3
 8007b98:	460b      	mov	r3, r1
 8007b9a:	72fb      	strb	r3, [r7, #11]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f107 0010 	add.w	r0, r7, #16
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	224c      	movs	r2, #76	@ 0x4c
 8007baa:	4619      	mov	r1, r3
 8007bac:	f001 ff84 	bl	8009ab8 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bb6:	6a39      	ldr	r1, [r7, #32]
 8007bb8:	7afa      	ldrb	r2, [r7, #11]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 f9b3 	bl	8007f26 <XSPI_FormatCommand>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 8007bcc:	893b      	ldrh	r3, [r7, #8]
 8007bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
 8007bd4:	893b      	ldrh	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f107 0110 	add.w	r1, r7, #16
 8007be6:	2264      	movs	r2, #100	@ 0x64
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe fc4d 	bl	8006488 <HAL_XSPI_Command>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
 8007bf4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10c      	bne.n	8007c16 <SAL_XSPI_SendReadCommand+0x8a>
 8007bfc:	893b      	ldrh	r3, [r7, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2264      	movs	r2, #100	@ 0x64
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe fd3f 	bl	800668e <HAL_XSPI_Receive>
 8007c10:	4603      	mov	r3, r0
 8007c12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8007c16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d004      	beq.n	8007c28 <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fe feae 	bl	8006984 <HAL_XSPI_Abort>
  }
  return retr;
 8007c28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3760      	adds	r7, #96	@ 0x60
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b098      	sub	sp, #96	@ 0x60
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	460b      	mov	r3, r1
 8007c42:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f107 0010 	add.w	r0, r7, #16
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	224c      	movs	r2, #76	@ 0x4c
 8007c4e:	4619      	mov	r1, r3
 8007c50:	f001 ff32 	bl	8009ab8 <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c5a:	6a39      	ldr	r1, [r7, #32]
 8007c5c:	7afa      	ldrb	r2, [r7, #11]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 f961 	bl	8007f26 <XSPI_FormatCommand>
 8007c64:	4603      	mov	r3, r0
 8007c66:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c72:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
 8007c74:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8007c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f107 0110 	add.w	r1, r7, #16
 8007c86:	2264      	movs	r2, #100	@ 0x64
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fe fbfd 	bl	8006488 <HAL_XSPI_Command>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
 8007c94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d109      	bne.n	8007cb0 <SAL_XSPI_CommandSendReadAddress+0x7c>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2264      	movs	r2, #100	@ 0x64
 8007ca2:	6839      	ldr	r1, [r7, #0]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe fcf2 	bl	800668e <HAL_XSPI_Receive>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
 8007cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d004      	beq.n	8007cc2 <SAL_XSPI_CommandSendReadAddress+0x8e>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe fe61 	bl	8006984 <HAL_XSPI_Abort>
  }
  return retr;
 8007cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3760      	adds	r7, #96	@ 0x60
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t MatchValue, uint8_t MatchMask, uint32_t Timeout)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b09e      	sub	sp, #120	@ 0x78
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	460b      	mov	r3, r1
 8007cdc:	72fb      	strb	r3, [r7, #11]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8007ce8:	3304      	adds	r3, #4
 8007cea:	224c      	movs	r2, #76	@ 0x4c
 8007cec:	4619      	mov	r1, r3
 8007cee:	f001 fee3 	bl	8009ab8 <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
 8007cf2:	7abb      	ldrb	r3, [r7, #10]
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007d04:	623b      	str	r3, [r7, #32]
 8007d06:	2310      	movs	r3, #16
 8007d08:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d12:	7afa      	ldrb	r2, [r7, #11]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f906 	bl	8007f26 <XSPI_FormatCommand>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
 8007d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d106      	bne.n	8007d3a <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    // patch cypress to force 1 line on status read
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
 8007d2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d30:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
 8007d36:	2300      	movs	r3, #0
 8007d38:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
 8007d3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d40:	d107      	bne.n	8007d52 <SAL_XSPI_CheckStatusRegister+0x84>
  {
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
 8007d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d46:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
 8007d48:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8007d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007d5a:	2264      	movs	r2, #100	@ 0x64
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe fb93 	bl	8006488 <HAL_XSPI_Command>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
 8007d68:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10b      	bne.n	8007d88 <SAL_XSPI_CheckStatusRegister+0xba>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f107 0114 	add.w	r1, r7, #20
 8007d78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fd29 	bl	80067d4 <HAL_XSPI_AutoPolling>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
 8007d88:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d004      	beq.n	8007d9a <SAL_XSPI_CheckStatusRegister+0xcc>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe fdf5 	bl	8006984 <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8007d9a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3778      	adds	r7, #120	@ 0x78
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <SAL_XSPI_EnableMapMode>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b098      	sub	sp, #96	@ 0x60
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	4608      	mov	r0, r1
 8007db0:	4611      	mov	r1, r2
 8007db2:	461a      	mov	r2, r3
 8007db4:	4603      	mov	r3, r0
 8007db6:	70fb      	strb	r3, [r7, #3]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70bb      	strb	r3, [r7, #2]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f107 0010 	add.w	r0, r7, #16
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	224c      	movs	r2, #76	@ 0x4c
 8007dca:	4619      	mov	r1, r3
 8007dcc:	f001 fe74 	bl	8009ab8 <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8007dd0:	f107 0308 	add.w	r3, r7, #8
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	605a      	str	r2, [r3, #4]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	613b      	str	r3, [r7, #16]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007de4:	6a39      	ldr	r1, [r7, #32]
 8007de6:	78fa      	ldrb	r2, [r7, #3]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f89c 	bl	8007f26 <XSPI_FormatCommand>
 8007dee:	4603      	mov	r3, r0
 8007df0:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles = DummyRead;
 8007df2:	78bb      	ldrb	r3, [r7, #2]
 8007df4:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f107 0110 	add.w	r1, r7, #16
 8007dfe:	2264      	movs	r2, #100	@ 0x64
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe fb41 	bl	8006488 <HAL_XSPI_Command>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8007e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d12d      	bne.n	8007e70 <SAL_XSPI_EnableMapMode+0xca>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
 8007e14:	2302      	movs	r3, #2
 8007e16:	613b      	str	r3, [r7, #16]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e1e:	6a39      	ldr	r1, [r7, #32]
 8007e20:	787a      	ldrb	r2, [r7, #1]
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 f87f 	bl	8007f26 <XSPI_FormatCommand>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	61bb      	str	r3, [r7, #24]
  s_command.DummyCycles = DummyWrite;
 8007e2c:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8007e30:	657b      	str	r3, [r7, #84]	@ 0x54
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f107 0110 	add.w	r1, r7, #16
 8007e3a:	2264      	movs	r2, #100	@ 0x64
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fe fb23 	bl	8006488 <HAL_XSPI_Command>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
 8007e48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d111      	bne.n	8007e74 <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
 8007e54:	2350      	movs	r3, #80	@ 0x50
 8007e56:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f107 0208 	add.w	r2, r7, #8
 8007e60:	4611      	mov	r1, r2
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe fd40 	bl	80068e8 <HAL_XSPI_MemoryMapped>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007e6e:	e002      	b.n	8007e76 <SAL_XSPI_EnableMapMode+0xd0>
    goto error;
 8007e70:	bf00      	nop
 8007e72:	e000      	b.n	8007e76 <SAL_XSPI_EnableMapMode+0xd0>
    goto error;
 8007e74:	bf00      	nop

error:
  if (retr != HAL_OK )
 8007e76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <SAL_XSPI_EnableMapMode+0xe2>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fd7e 	bl	8006984 <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
 8007e88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3760      	adds	r7, #96	@ 0x60
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e9c:	f3bf 8f4f 	dsb	sy
}
 8007ea0:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe fd6c 	bl	8006984 <HAL_XSPI_Abort>
 8007eac:	4603      	mov	r3, r0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b085      	sub	sp, #20
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007ed2:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d11e      	bne.n	8007f18 <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d103      	bne.n	8007ee8 <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
 8007ee0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ee4:	60bb      	str	r3, [r7, #8]
 8007ee6:	e008      	b.n	8007efa <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007eee:	d102      	bne.n	8007ef6 <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60bb      	str	r3, [r7, #8]
 8007ef4:	e001      	b.n	8007efa <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	609a      	str	r2, [r3, #8]
    break;
 8007f12:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	e000      	b.n	8007f1a <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	6039      	str	r1, [r7, #0]
 8007f30:	71fb      	strb	r3, [r7, #7]
 8007f32:	4613      	mov	r3, r2
 8007f34:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b10      	cmp	r3, #16
 8007f3a:	d114      	bne.n	8007f66 <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yes handled */
    retr = ((uint16_t)Command << 8u);
 8007f3c:	79bb      	ldrb	r3, [r7, #6]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	021b      	lsls	r3, r3, #8
 8007f42:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d107      	bne.n	8007f5a <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
 8007f4a:	79bb      	ldrb	r3, [r7, #6]
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	89fb      	ldrh	r3, [r7, #14]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	81fb      	strh	r3, [r7, #14]
 8007f58:	e007      	b.n	8007f6a <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
 8007f5a:	79bb      	ldrb	r3, [r7, #6]
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	89fb      	ldrh	r3, [r7, #14]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	81fb      	strh	r3, [r7, #14]
 8007f64:	e001      	b.n	8007f6a <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
 8007f66:	79bb      	ldrb	r3, [r7, #6]
 8007f68:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
 8007f6a:	89fb      	ldrh	r3, [r7, #14]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <XSPI_Transmit>:


HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2264      	movs	r2, #100	@ 0x64
 8007f88:	6839      	ldr	r1, [r7, #0]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fb0c 	bl	80065a8 <HAL_XSPI_Transmit>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <XSPI_Receive>:
  * @param hxpsi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2264      	movs	r2, #100	@ 0x64
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe fb6c 	bl	800668e <HAL_XSPI_Receive>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);
  
  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]
    
    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f103 0008 	add.w	r0, r3, #8
 8007fde:	2308      	movs	r3, #8
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	f7ff fc1e 	bl	8007824 <SAL_XSPI_GetSFDP>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFPDREAD;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	73fb      	strb	r3, [r7, #15]
      goto error;
 8007ff2:	e01f      	b.n	8008034 <SFDP_ReadHeader+0x70>
    }
    
    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);
    
    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f001 fc06 	bl	800980c <CheckSFDP_Signature>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <SFDP_ReadHeader+0x48>
 8008006:	2b05      	cmp	r3, #5
 8008008:	d005      	beq.n	8008016 <SFDP_ReadHeader+0x52>
 800800a:	e00a      	b.n	8008022 <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
 8008010:	2302      	movs	r3, #2
 8008012:	73bb      	strb	r3, [r7, #14]
    break;
 8008014:	e00a      	b.n	800802c <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8008016:	2304      	movs	r3, #4
 8008018:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	3301      	adds	r3, #1
 800801e:	73bb      	strb	r3, [r7, #14]
      break;
 8008020:	e004      	b.n	800802c <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8008022:	2304      	movs	r3, #4
 8008024:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
 8008026:	2302      	movs	r3, #2
 8008028:	73bb      	strb	r3, [r7, #14]
      break;
 800802a:	bf00      	nop
    }
  } while(retry_counter < 2u);
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d9cf      	bls.n	8007fd2 <SFDP_ReadHeader+0xe>

error:
 8008032:	bf00      	nop
  return retr;
 8008034:	7bfb      	ldrb	r3, [r7, #15]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
 8008040:	b590      	push	{r4, r7, lr}
 8008042:	b089      	sub	sp, #36	@ 0x24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 800804a:	2304      	movs	r3, #4
 800804c:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
 800804e:	4b2a      	ldr	r3, [pc, #168]	@ (80080f8 <SFDP_GetHeader+0xb8>)
 8008050:	f107 040c 	add.w	r4, r7, #12
 8008054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };
  
  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
 800805a:	2300      	movs	r3, #0
 800805c:	77bb      	strb	r3, [r7, #30]
 800805e:	e040      	b.n	80080e2 <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");
    
    /* Configure the link */
    Object->sfpd_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
 8008060:	7fbb      	ldrb	r3, [r7, #30]
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	3320      	adds	r3, #32
 8008066:	443b      	add	r3, r7
 8008068:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f103 0008 	add.w	r0, r3, #8
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	3364      	adds	r3, #100	@ 0x64
 800807c:	461a      	mov	r2, r3
 800807e:	2100      	movs	r1, #0
 8008080:	f7ff fa7e 	bl	8007580 <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, table_config[index].DummyCycle);
 8008084:	7fbb      	ldrb	r3, [r7, #30]
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	3320      	adds	r3, #32
 800808a:	443b      	add	r3, r7
 800808c:	f813 2c13 	ldrb.w	r2, [r3, #-19]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */    
    for (uint8_t IExt = 0u;
 8008096:	2300      	movs	r3, #0
 8008098:	777b      	strb	r3, [r7, #29]
 800809a:	e017      	b.n	80080cc <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, IExt);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	7f7a      	ldrb	r2, [r7, #29]
 80080a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff ff8c 	bl	8007fc4 <SFDP_ReadHeader>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
 80080b2:	2300      	movs	r3, #0
 80080b4:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
 80080b6:	7fbb      	ldrb	r3, [r7, #30]
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	3320      	adds	r3, #32
 80080bc:	443b      	add	r3, r7
 80080be:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d909      	bls.n	80080da <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
 80080c6:	7f7b      	ldrb	r3, [r7, #29]
 80080c8:	3301      	adds	r3, #1
 80080ca:	777b      	strb	r3, [r7, #29]
 80080cc:	7f7b      	ldrb	r3, [r7, #29]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d804      	bhi.n	80080dc <SFDP_GetHeader+0x9c>
 80080d2:	7ffb      	ldrb	r3, [r7, #31]
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d0e1      	beq.n	800809c <SFDP_GetHeader+0x5c>
 80080d8:	e000      	b.n	80080dc <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
 80080da:	bf00      	nop
           ; index++) 
 80080dc:	7fbb      	ldrb	r3, [r7, #30]
 80080de:	3301      	adds	r3, #1
 80080e0:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
 80080e2:	7fbb      	ldrb	r3, [r7, #30]
 80080e4:	2b07      	cmp	r3, #7
 80080e6:	d802      	bhi.n	80080ee <SFDP_GetHeader+0xae>
 80080e8:	7ffb      	ldrb	r3, [r7, #31]
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d0b8      	beq.n	8008060 <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
 80080ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3724      	adds	r7, #36	@ 0x24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd90      	pop	{r4, r7, pc}
 80080f8:	08009af4 	.word	0x08009af4

080080fc <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
 8008108:	2308      	movs	r3, #8
 800810a:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfpd_private.Sfdp_table_mask = 0;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
 8008114:	2278      	movs	r2, #120	@ 0x78
 8008116:	2100      	movs	r1, #0
 8008118:	485f      	ldr	r0, [pc, #380]	@ (8008298 <SFDP_CollectData+0x19c>)
 800811a:	f001 fca1 	bl	8009a60 <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 800811e:	2300      	movs	r3, #0
 8008120:	75fb      	strb	r3, [r7, #23]
 8008122:	e027      	b.n	8008174 <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[index]))
 8008124:	7dfa      	ldrb	r2, [r7, #23]
 8008126:	4613      	mov	r3, r2
 8008128:	005b      	lsls	r3, r3, #1
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4a5a      	ldr	r2, [pc, #360]	@ (8008298 <SFDP_CollectData+0x19c>)
 8008130:	4413      	add	r3, r2
 8008132:	461a      	mov	r2, r3
 8008134:	69b9      	ldr	r1, [r7, #24]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 ffae 	bl	8009098 <sfdp_get_paraminfo>
 800813c:	4603      	mov	r3, r0
 800813e:	77fb      	strb	r3, [r7, #31]
 8008140:	7ffb      	ldrb	r3, [r7, #31]
 8008142:	2b00      	cmp	r3, #0
 8008144:	f040 80a2 	bne.w	800828c <SFDP_CollectData+0x190>
    Object->sfpd_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800814e:	7dfa      	ldrb	r2, [r7, #23]
 8008150:	4851      	ldr	r0, [pc, #324]	@ (8008298 <SFDP_CollectData+0x19c>)
 8008152:	4613      	mov	r3, r2
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	4413      	add	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4403      	add	r3, r0
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	ea41 0203 	orr.w	r2, r1, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	3308      	adds	r3, #8
 800816c:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	3301      	adds	r3, #1
 8008172:	75fb      	strb	r3, [r7, #23]
 8008174:	7dfa      	ldrb	r2, [r7, #23]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800817c:	3301      	adds	r3, #1
 800817e:	429a      	cmp	r2, r3
 8008180:	d3d0      	bcc.n	8008124 <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
 8008182:	2300      	movs	r3, #0
 8008184:	75bb      	strb	r3, [r7, #22]
 8008186:	e075      	b.n	8008274 <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
 8008188:	2300      	movs	r3, #0
 800818a:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
 800818c:	7dba      	ldrb	r2, [r7, #22]
 800818e:	4942      	ldr	r1, [pc, #264]	@ (8008298 <SFDP_CollectData+0x19c>)
 8008190:	4613      	mov	r3, r2
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	440b      	add	r3, r1
 800819a:	3308      	adds	r3, #8
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
 80081a0:	7dba      	ldrb	r2, [r7, #22]
 80081a2:	493d      	ldr	r1, [pc, #244]	@ (8008298 <SFDP_CollectData+0x19c>)
 80081a4:	4613      	mov	r3, r2
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081b4:	d029      	beq.n	800820a <SFDP_CollectData+0x10e>
 80081b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ba:	d829      	bhi.n	8008210 <SFDP_CollectData+0x114>
 80081bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081c0:	d01d      	beq.n	80081fe <SFDP_CollectData+0x102>
 80081c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081c6:	d823      	bhi.n	8008210 <SFDP_CollectData+0x114>
 80081c8:	2b80      	cmp	r3, #128	@ 0x80
 80081ca:	d01b      	beq.n	8008204 <SFDP_CollectData+0x108>
 80081cc:	2b80      	cmp	r3, #128	@ 0x80
 80081ce:	d81f      	bhi.n	8008210 <SFDP_CollectData+0x114>
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d002      	beq.n	80081da <SFDP_CollectData+0xde>
 80081d4:	2b40      	cmp	r3, #64	@ 0x40
 80081d6:	d00f      	beq.n	80081f8 <SFDP_CollectData+0xfc>
    case SFPD_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
 80081d8:	e01a      	b.n	8008210 <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
 80081da:	7dba      	ldrb	r2, [r7, #22]
 80081dc:	492e      	ldr	r1, [pc, #184]	@ (8008298 <SFDP_CollectData+0x19c>)
 80081de:	4613      	mov	r3, r2
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	3308      	adds	r3, #8
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	4b2b      	ldr	r3, [pc, #172]	@ (800829c <SFDP_CollectData+0x1a0>)
 80081f0:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
 80081f2:	4b2b      	ldr	r3, [pc, #172]	@ (80082a0 <SFDP_CollectData+0x1a4>)
 80081f4:	613b      	str	r3, [r7, #16]
      break;
 80081f6:	e00c      	b.n	8008212 <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bit.data_BYTE;
 80081f8:	4b2a      	ldr	r3, [pc, #168]	@ (80082a4 <SFDP_CollectData+0x1a8>)
 80081fa:	613b      	str	r3, [r7, #16]
      break;
 80081fc:	e009      	b.n	8008212 <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
 80081fe:	4b2a      	ldr	r3, [pc, #168]	@ (80082a8 <SFDP_CollectData+0x1ac>)
 8008200:	613b      	str	r3, [r7, #16]
      break;
 8008202:	e006      	b.n	8008212 <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
 8008204:	4b29      	ldr	r3, [pc, #164]	@ (80082ac <SFDP_CollectData+0x1b0>)
 8008206:	613b      	str	r3, [r7, #16]
      break;
 8008208:	e003      	b.n	8008212 <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
 800820a:	4b29      	ldr	r3, [pc, #164]	@ (80082b0 <SFDP_CollectData+0x1b4>)
 800820c:	613b      	str	r3, [r7, #16]
      break;
 800820e:	e000      	b.n	8008212 <SFDP_CollectData+0x116>
      break;
 8008210:	bf00      	nop
    }
    if (ptr != NULL)
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d016      	beq.n	8008246 <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f103 0008 	add.w	r0, r3, #8
 800821e:	7dba      	ldrb	r2, [r7, #22]
 8008220:	491d      	ldr	r1, [pc, #116]	@ (8008298 <SFDP_CollectData+0x19c>)
 8008222:	4613      	mov	r3, r2
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	3304      	adds	r3, #4
 800822e:	6819      	ldr	r1, [r3, #0]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	f7ff faf5 	bl	8007824 <SAL_XSPI_GetSFDP>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address, 
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008240:	230c      	movs	r3, #12
 8008242:	77fb      	strb	r3, [r7, #31]
        goto error;
 8008244:	e022      	b.n	800828c <SFDP_CollectData+0x190>
      }
    }

    if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
 8008246:	7dba      	ldrb	r2, [r7, #22]
 8008248:	4913      	ldr	r1, [pc, #76]	@ (8008298 <SFDP_CollectData+0x19c>)
 800824a:	4613      	mov	r3, r2
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b08      	cmp	r3, #8
 8008258:	d109      	bne.n	800826e <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfpd_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
 800825a:	4b10      	ldr	r3, [pc, #64]	@ (800829c <SFDP_CollectData+0x1a0>)
 800825c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008260:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008264:	b2db      	uxtb	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
 800826e:	7dbb      	ldrb	r3, [r7, #22]
 8008270:	3301      	adds	r3, #1
 8008272:	75bb      	strb	r3, [r7, #22]
 8008274:	7dba      	ldrb	r2, [r7, #22]
 8008276:	4908      	ldr	r1, [pc, #32]	@ (8008298 <SFDP_CollectData+0x19c>)
 8008278:	4613      	mov	r3, r2
 800827a:	005b      	lsls	r3, r3, #1
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	f47f af7f 	bne.w	8008188 <SFDP_CollectData+0x8c>
    }
  }

error:
 800828a:	bf00      	nop
  return retr;
 800828c:	7ffb      	ldrb	r3, [r7, #31]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3720      	adds	r7, #32
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	24000208 	.word	0x24000208
 800829c:	24000280 	.word	0x24000280
 80082a0:	24000284 	.word	0x24000284
 80082a4:	240002e0 	.word	0x240002e0
 80082a8:	24000300 	.word	0x24000300
 80082ac:	240002e8 	.word	0x240002e8
 80082b0:	24000370 	.word	0x24000370

080082b4 <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_methode;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
 80082bc:	2307      	movs	r3, #7
 80082be:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
 80082c0:	2308      	movs	r3, #8
 80082c2:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 80082c8:	2300      	movs	r3, #0
 80082ca:	73bb      	strb	r3, [r7, #14]
 80082cc:	e02e      	b.n	800832c <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[0]);
 80082ce:	4a64      	ldr	r2, [pc, #400]	@ (8008460 <SFDP_MemoryReset+0x1ac>)
 80082d0:	6939      	ldr	r1, [r7, #16]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fee0 	bl	8009098 <sfdp_get_paraminfo>
 80082d8:	4603      	mov	r3, r0
 80082da:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
 80082dc:	7dbb      	ldrb	r3, [r7, #22]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d118      	bne.n	8008314 <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */        
      if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
 80082e2:	4b5f      	ldr	r3, [pc, #380]	@ (8008460 <SFDP_MemoryReset+0x1ac>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b08      	cmp	r3, #8
 80082e8:	d114      	bne.n	8008314 <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f103 0008 	add.w	r0, r3, #8
 80082f0:	4b5b      	ldr	r3, [pc, #364]	@ (8008460 <SFDP_MemoryReset+0x1ac>)
 80082f2:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address, 
                                       JEDEC_Basic.Params.data_BYTE, 
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
 80082f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008460 <SFDP_MemoryReset+0x1ac>)
 80082f6:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4a5a      	ldr	r2, [pc, #360]	@ (8008464 <SFDP_MemoryReset+0x1b0>)
 80082fc:	f7ff fa92 	bl	8007824 <SAL_XSPI_GetSFDP>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008306:	230c      	movs	r3, #12
 8008308:	75bb      	strb	r3, [r7, #22]
 800830a:	e003      	b.n	8008314 <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	75bb      	strb	r3, [r7, #22]
          find = 1u;
 8008310:	2301      	movs	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
 8008314:	7dbb      	ldrb	r3, [r7, #22]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10f      	bne.n	800833a <SFDP_MemoryReset+0x86>
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d00c      	beq.n	800833a <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */        
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	3308      	adds	r3, #8
 8008324:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	3301      	adds	r3, #1
 800832a:	73bb      	strb	r3, [r7, #14]
 800832c:	7bba      	ldrb	r2, [r7, #14]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008334:	3301      	adds	r3, #1
 8008336:	429a      	cmp	r2, r3
 8008338:	d3c9      	bcc.n	80082ce <SFDP_MemoryReset+0x1a>
  }
  
  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
 800833a:	7dbb      	ldrb	r3, [r7, #22]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d102      	bne.n	8008346 <SFDP_MemoryReset+0x92>
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d102      	bne.n	800834c <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008346:	230c      	movs	r3, #12
 8008348:	75bb      	strb	r3, [r7, #22]
    goto error;
 800834a:	e083      	b.n	8008454 <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proced memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
 800834c:	4b46      	ldr	r3, [pc, #280]	@ (8008468 <SFDP_MemoryReset+0x1b4>)
 800834e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008352:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_methode = RESET_NONE;
 800835c:	2300      	movs	r3, #0
 800835e:	75fb      	strb	r3, [r7, #23]
 8008360:	e053      	b.n	800840a <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 8008362:	4b41      	ldr	r3, [pc, #260]	@ (8008468 <SFDP_MemoryReset+0x1b4>)
 8008364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008368:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800836c:	b2db      	uxtb	r3, r3
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d002      	beq.n	800837e <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_methode = RESET_Fh_4DATA_8CLOCK;
 8008378:	2301      	movs	r3, #1
 800837a:	75fb      	strb	r3, [r7, #23]
 800837c:	e045      	b.n	800840a <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 800837e:	4b3a      	ldr	r3, [pc, #232]	@ (8008468 <SFDP_MemoryReset+0x1b4>)
 8008380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008384:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8008388:	b2db      	uxtb	r3, r3
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_methode = RESET_Fh_4DATA_10CLOCK;
 8008394:	2302      	movs	r3, #2
 8008396:	75fb      	strb	r3, [r7, #23]
 8008398:	e037      	b.n	800840a <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 800839a:	4b33      	ldr	r3, [pc, #204]	@ (8008468 <SFDP_MemoryReset+0x1b4>)
 800839c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083a0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	f003 0304 	and.w	r3, r3, #4
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_methode = RESET_Fh_4DATA_16CLOCK;
 80083b0:	2303      	movs	r3, #3
 80083b2:	75fb      	strb	r3, [r7, #23]
 80083b4:	e029      	b.n	800840a <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 80083b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008468 <SFDP_MemoryReset+0x1b4>)
 80083b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083bc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_methode = RESET_INSTRUCTION_F0;
 80083cc:	2304      	movs	r3, #4
 80083ce:	75fb      	strb	r3, [r7, #23]
 80083d0:	e01b      	b.n	800840a <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 80083d2:	4b25      	ldr	r3, [pc, #148]	@ (8008468 <SFDP_MemoryReset+0x1b4>)
 80083d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083d8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_methode = RESET_INSTRUCTION_66_99;
 80083e8:	2305      	movs	r3, #5
 80083ea:	75fb      	strb	r3, [r7, #23]
 80083ec:	e00d      	b.n	800840a <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
 80083ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008468 <SFDP_MemoryReset+0x1b4>)
 80083f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083f4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b1f      	cmp	r3, #31
 80083fc:	d902      	bls.n	8008404 <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 80083fe:	230f      	movs	r3, #15
 8008400:	75bb      	strb	r3, [r7, #22]
    goto error;
 8008402:	e027      	b.n	8008454 <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008404:	230c      	movs	r3, #12
 8008406:	75bb      	strb	r3, [r7, #22]
    goto error;
 8008408:	e024      	b.n	8008454 <SFDP_MemoryReset+0x1a0>
  }
  
  switch(reset_methode)
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	2b05      	cmp	r3, #5
 800840e:	d009      	beq.n	8008424 <SFDP_MemoryReset+0x170>
 8008410:	2b05      	cmp	r3, #5
 8008412:	dc1b      	bgt.n	800844c <SFDP_MemoryReset+0x198>
 8008414:	2b00      	cmp	r3, #0
 8008416:	d01c      	beq.n	8008452 <SFDP_MemoryReset+0x19e>
 8008418:	2b00      	cmp	r3, #0
 800841a:	db17      	blt.n	800844c <SFDP_MemoryReset+0x198>
 800841c:	3b01      	subs	r3, #1
 800841e:	2b03      	cmp	r3, #3
 8008420:	d814      	bhi.n	800844c <SFDP_MemoryReset+0x198>
 8008422:	e010      	b.n	8008446 <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x66, NULL, 0);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f103 0008 	add.w	r0, r3, #8
 800842a:	2300      	movs	r3, #0
 800842c:	2200      	movs	r2, #0
 800842e:	2166      	movs	r1, #102	@ 0x66
 8008430:	f7ff fb58 	bl	8007ae4 <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x99, NULL, 0);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f103 0008 	add.w	r0, r3, #8
 800843a:	2300      	movs	r3, #0
 800843c:	2200      	movs	r2, #0
 800843e:	2199      	movs	r1, #153	@ 0x99
 8008440:	f7ff fb50 	bl	8007ae4 <SAL_XSPI_CommandSendData>
    break;
 8008444:	e006      	b.n	8008454 <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8008446:	230f      	movs	r3, #15
 8008448:	75bb      	strb	r3, [r7, #22]
    break;
 800844a:	e003      	b.n	8008454 <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
 800844c:	2301      	movs	r3, #1
 800844e:	75bb      	strb	r3, [r7, #22]
    break;
 8008450:	e000      	b.n	8008454 <SFDP_MemoryReset+0x1a0>
    break;
 8008452:	bf00      	nop
  }
error :
  return retr;
 8008454:	7dbb      	ldrb	r3, [r7, #22]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	24000208 	.word	0x24000208
 8008464:	24000284 	.word	0x24000284
 8008468:	24000280 	.word	0x24000280

0800846c <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
 800846c:	b5b0      	push	{r4, r5, r7, lr}
 800846e:	b08c      	sub	sp, #48	@ 0x30
 8008470:	af02      	add	r7, sp, #8
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4bitAddress = 0u;
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;
  
  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008488:	f003 0308 	and.w	r3, r3, #8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
 8008490:	2307      	movs	r3, #7
 8008492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8008496:	f000 bd93 	b.w	8008fc0 <SFDP_BuildGenericDriver+0xb54>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
 800849a:	4bba      	ldr	r3, [pc, #744]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	db13      	blt.n	80084ca <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfpd_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
 80084a2:	4bb8      	ldr	r3, [pc, #736]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	3301      	adds	r3, #1
 80084a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <SFDP_BuildGenericDriver+0x48>
    return 32U;
 80084b0:	2320      	movs	r3, #32
 80084b2:	e003      	b.n	80084bc <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	fab3 f383 	clz	r3, r3
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	f1c3 031f 	rsb	r3, r3, #31
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
 80084c8:	e005      	b.n	80084d6 <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfpd_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
 80084ca:	4bae      	ldr	r3, [pc, #696]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfpd_private.FlashSize = Object->sfpd_private.FlashSize - 3u; /* divide by eight the value */
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80084dc:	3b03      	subs	r3, #3
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfpd_private.FlashSize);
  FlashSize = Object->sfpd_private.FlashSize - 1u;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3308      	adds	r3, #8
 80084f6:	f107 0213 	add.w	r2, r7, #19
 80084fa:	2104      	movs	r1, #4
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff f83f 	bl	8007580 <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfpd_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
 8008502:	4ba0      	ldr	r3, [pc, #640]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008504:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008508:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800850c:	b2db      	uxtb	r3, r3
 800850e:	461a      	mov	r2, r3
 8008510:	2301      	movs	r3, #1
 8008512:	fa03 f202 	lsl.w	r2, r3, r2
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x02;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2202      	movs	r2, #2
 800851e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfpd_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
 8008522:	4b98      	ldr	r3, [pc, #608]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008524:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
 800852e:	4b95      	ldr	r3, [pc, #596]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008530:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfpd_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
 800853a:	4b92      	ldr	r3, [pc, #584]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800853c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
 8008546:	4b8f      	ldr	r3, [pc, #572]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008548:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfpd_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
 8008552:	4b8c      	ldr	r3, [pc, #560]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008554:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
 800855e:	4b89      	ldr	r3, [pc, #548]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008560:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfpd_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
 800856a:	4b86      	ldr	r3, [pc, #536]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800856c:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
 8008576:	4b83      	ldr	r3, [pc, #524]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008578:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfpd_private.DriverInfo.EraseType1Command != 0x0u)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8008588:	2b00      	cmp	r3, #0
 800858a:	d01d      	beq.n	80085c8 <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfpd_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
 800858c:	4b7d      	ldr	r3, [pc, #500]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800858e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008592:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008596:	b2db      	uxtb	r3, r3
 8008598:	461a      	mov	r2, r3
 800859a:	4b7a      	ldr	r3, [pc, #488]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800859c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800859e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	3301      	adds	r3, #1
 80085a6:	fb02 f303 	mul.w	r3, r2, r3
 80085aa:	4a76      	ldr	r2, [pc, #472]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 80085ac:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 80085b0:	f3c2 0241 	ubfx	r2, r2, #1, #2
 80085b4:	b2d2      	uxtb	r2, r2
 80085b6:	4611      	mov	r1, r2
 80085b8:	4a73      	ldr	r2, [pc, #460]	@ (8008788 <SFDP_BuildGenericDriver+0x31c>)
 80085ba:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80085be:	fb03 f202 	mul.w	r2, r3, r2
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfpd_private.DriverInfo.EraseType2Command != 0x0u)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d01e      	beq.n	8008610 <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfpd_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
 80085d2:	4b6c      	ldr	r3, [pc, #432]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 80085d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	461a      	mov	r2, r3
 80085e0:	4b68      	ldr	r3, [pc, #416]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 80085e2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80085e6:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	3301      	adds	r3, #1
 80085ee:	fb02 f303 	mul.w	r3, r2, r3
 80085f2:	4a64      	ldr	r2, [pc, #400]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 80085f4:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80085f8:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80085fc:	b2d2      	uxtb	r2, r2
 80085fe:	4611      	mov	r1, r2
 8008600:	4a61      	ldr	r2, [pc, #388]	@ (8008788 <SFDP_BuildGenericDriver+0x31c>)
 8008602:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008606:	fb03 f202 	mul.w	r2, r3, r2
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfpd_private.DriverInfo.EraseType3Command != 0x0u)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d01d      	beq.n	8008656 <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfpd_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
 800861a:	4b5a      	ldr	r3, [pc, #360]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800861c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008620:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008624:	b2db      	uxtb	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	4b56      	ldr	r3, [pc, #344]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800862a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800862e:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8008632:	b2db      	uxtb	r3, r3
 8008634:	3301      	adds	r3, #1
 8008636:	fb02 f303 	mul.w	r3, r2, r3
 800863a:	4a52      	ldr	r2, [pc, #328]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800863c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800863e:	f3c2 12c1 	ubfx	r2, r2, #7, #2
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	4611      	mov	r1, r2
 8008646:	4a50      	ldr	r2, [pc, #320]	@ (8008788 <SFDP_BuildGenericDriver+0x31c>)
 8008648:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800864c:	fb03 f202 	mul.w	r2, r3, r2
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfpd_private.DriverInfo.EraseType4Command != 0x0u)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 800865c:	2b00      	cmp	r3, #0
 800865e:	d01e      	beq.n	800869e <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfpd_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
 8008660:	4b48      	ldr	r3, [pc, #288]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008666:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800866a:	b2db      	uxtb	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	4b45      	ldr	r3, [pc, #276]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008670:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8008674:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008678:	b2db      	uxtb	r3, r3
 800867a:	3301      	adds	r3, #1
 800867c:	fb02 f303 	mul.w	r3, r2, r3
 8008680:	4a40      	ldr	r2, [pc, #256]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008682:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8008686:	f3c2 1281 	ubfx	r2, r2, #6, #2
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	4611      	mov	r1, r2
 800868e:	4a3e      	ldr	r2, [pc, #248]	@ (8008788 <SFDP_BuildGenericDriver+0x31c>)
 8008690:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008694:	fb03 f202 	mul.w	r2, r3, r2
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfpd_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
 800869e:	4b39      	ldr	r3, [pc, #228]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 80086a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	461a      	mov	r2, r3
 80086ac:	4b35      	ldr	r3, [pc, #212]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 80086ae:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80086b2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	3301      	adds	r3, #1
 80086ba:	fb02 f303 	mul.w	r3, r2, r3
 80086be:	4a31      	ldr	r2, [pc, #196]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 80086c0:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 80086c4:	f3c2 1241 	ubfx	r2, r2, #5, #2
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	4611      	mov	r1, r2
 80086cc:	4a2f      	ldr	r2, [pc, #188]	@ (800878c <SFDP_BuildGenericDriver+0x320>)
 80086ce:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80086d2:	fb03 f202 	mul.w	r2, r3, r2
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfpd_private.DriverInfo.ReadWELCommand = 0x05;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2205      	movs	r2, #5
 80086e0:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2205      	movs	r2, #5
 80086e8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
 80086ec:	4b25      	ldr	r3, [pc, #148]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 80086ee:	791b      	ldrb	r3, [r3, #4]
 80086f0:	f003 0310 	and.w	r3, r3, #16
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d104      	bne.n	8008704 <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2250      	movs	r2, #80	@ 0x50
 80086fe:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8008702:	e003      	b.n	800870c <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06U;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2206      	movs	r2, #6
 8008708:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
  The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
  This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
 800870c:	4b1d      	ldr	r3, [pc, #116]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800870e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008712:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	d004      	beq.n	800872a <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2206      	movs	r2, #6
 8008724:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8008728:	e046      	b.n	80087b8 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
 800872a:	4b16      	ldr	r3, [pc, #88]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800872c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008730:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008734:	b2db      	uxtb	r3, r3
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d004      	beq.n	8008748 <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2206      	movs	r2, #6
 8008742:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8008746:	e037      	b.n	80087b8 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
 8008748:	4b0e      	ldr	r3, [pc, #56]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 800874a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800874e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d004      	beq.n	8008766 <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2250      	movs	r2, #80	@ 0x50
 8008760:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8008764:	e028      	b.n	80087b8 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
  use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
  power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
  status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
 8008766:	4b07      	ldr	r3, [pc, #28]	@ (8008784 <SFDP_BuildGenericDriver+0x318>)
 8008768:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800876c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8008770:	b2db      	uxtb	r3, r3
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2206      	movs	r2, #6
 800877e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8008782:	e019      	b.n	80087b8 <SFDP_BuildGenericDriver+0x34c>
 8008784:	24000280 	.word	0x24000280
 8008788:	08009b38 	.word	0x08009b38
 800878c:	08009b40 	.word	0x08009b40
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
  enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
 8008790:	4b66      	ldr	r3, [pc, #408]	@ (800892c <SFDP_BuildGenericDriver+0x4c0>)
 8008792:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008796:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800879a:	b2db      	uxtb	r3, r3
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d004      	beq.n	80087ae <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2206      	movs	r2, #6
 80087a8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80087ac:	e004      	b.n	80087b8 <SFDP_BuildGenericDriver+0x34c>
  1xx_xxxxb: Reserved
  NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
 80087ae:	230a      	movs	r3, #10
 80087b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 80087b4:	f000 bc04 	b.w	8008fc0 <SFDP_BuildGenericDriver+0xb54>
  }

  if(0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d078      	beq.n	80088b8 <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
 80087c6:	4b5a      	ldr	r3, [pc, #360]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 80087c8:	7cdb      	ldrb	r3, [r3, #19]
 80087ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d034      	beq.n	800883e <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfpd_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
 80087d4:	4b56      	ldr	r3, [pc, #344]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 80087d6:	7c5a      	ldrb	r2, [r3, #17]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
 80087de:	4b54      	ldr	r3, [pc, #336]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 80087e0:	7cdb      	ldrb	r3, [r3, #19]
 80087e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	461a      	mov	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfpd_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
 80087f0:	4b4f      	ldr	r3, [pc, #316]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 80087f2:	7cdb      	ldrb	r3, [r3, #19]
 80087f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	461a      	mov	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
 8008802:	4b4b      	ldr	r3, [pc, #300]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 8008804:	7cdb      	ldrb	r3, [r3, #19]
 8008806:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800880a:	b2db      	uxtb	r3, r3
 800880c:	461a      	mov	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      
      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
 8008814:	4b46      	ldr	r3, [pc, #280]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 8008816:	7cdb      	ldrb	r3, [r3, #19]
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d009      	beq.n	8008836 <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
 8008822:	4b43      	ldr	r3, [pc, #268]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 8008824:	7cdb      	ldrb	r3, [r3, #19]
 8008826:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800882a:	b2db      	uxtb	r3, r3
 800882c:	461a      	mov	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
 8008834:	e003      	b.n	800883e <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	22ff      	movs	r2, #255	@ 0xff
 800883a:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
 800883e:	4b3c      	ldr	r3, [pc, #240]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 8008840:	7ddb      	ldrb	r3, [r3, #23]
 8008842:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d073      	beq.n	8008934 <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfpd_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
 800884c:	4b38      	ldr	r3, [pc, #224]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 800884e:	7d5a      	ldrb	r2, [r3, #21]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
 8008856:	4b36      	ldr	r3, [pc, #216]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 8008858:	7ddb      	ldrb	r3, [r3, #23]
 800885a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800885e:	b2db      	uxtb	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
 8008868:	4b31      	ldr	r3, [pc, #196]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 800886a:	7ddb      	ldrb	r3, [r3, #23]
 800886c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008870:	b2db      	uxtb	r3, r3
 8008872:	461a      	mov	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
 800887a:	4b2d      	ldr	r3, [pc, #180]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 800887c:	7ddb      	ldrb	r3, [r3, #23]
 800887e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8008882:	b2db      	uxtb	r3, r3
 8008884:	461a      	mov	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
 800888c:	4b28      	ldr	r3, [pc, #160]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 800888e:	7cdb      	ldrb	r3, [r3, #19]
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d009      	beq.n	80088ae <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
 800889a:	4b25      	ldr	r3, [pc, #148]	@ (8008930 <SFDP_BuildGenericDriver+0x4c4>)
 800889c:	7ddb      	ldrb	r3, [r3, #23]
 800889e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80088ac:	e042      	b.n	8008934 <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	22ff      	movs	r2, #255	@ 0xff
 80088b2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 80088b6:	e03d      	b.n	8008934 <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfpd_private.DriverInfo.WELPosition     = 1;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = 0;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if(0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
 80088c8:	4b18      	ldr	r3, [pc, #96]	@ (800892c <SFDP_BuildGenericDriver+0x4c0>)
 80088ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088ce:	f3c3 0385 	ubfx	r3, r3, #2, #6
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00c      	beq.n	80088f6 <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
        and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2205      	movs	r2, #5
 80088e0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 0u;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 80088f4:	e01e      	b.n	8008934 <SFDP_BuildGenericDriver+0x4c8>
      } else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
 80088f6:	4b0d      	ldr	r3, [pc, #52]	@ (800892c <SFDP_BuildGenericDriver+0x4c0>)
 80088f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80088fc:	f3c3 0385 	ubfx	r3, r3, #2, #6
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00c      	beq.n	8008924 <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
        command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
        Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x70;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2270      	movs	r2, #112	@ 0x70
 800890e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 7u;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2207      	movs	r2, #7
 8008916:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 8008922:	e007      	b.n	8008934 <SFDP_BuildGenericDriver+0x4c8>
      } else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
 8008924:	2309      	movs	r3, #9
 8008926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 800892a:	e349      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
 800892c:	24000280 	.word	0x24000280
 8008930:	24000300 	.word	0x24000300
      }
  }

  /* Set default value for instruction */
  Object->sfpd_private.DriverInfo.ReadInstruction     = 0x03U;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2203      	movs	r2, #3
 8008938:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFPD_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (Object->sfpd_private.Sfdp_table_mask == (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) 
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008942:	2b08      	cmp	r3, #8
 8008944:	f040 80a9 	bne.w	8008a9a <SFDP_BuildGenericDriver+0x62e>
  {
    dummyCycles = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	617b      	str	r3, [r7, #20]
    Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_1LINE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d04c      	beq.n	80089f8 <SFDP_BuildGenericDriver+0x58c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
 800895e:	4bb4      	ldr	r3, [pc, #720]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008960:	7c5b      	ldrb	r3, [r3, #17]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d015      	beq.n	8008992 <SFDP_BuildGenericDriver+0x526>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
 8008966:	4bb2      	ldr	r3, [pc, #712]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008968:	7c1b      	ldrb	r3, [r3, #16]
 800896a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800896e:	b2db      	uxtb	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	4baf      	ldr	r3, [pc, #700]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008974:	7c1b      	ldrb	r3, [r3, #16]
 8008976:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800897a:	b2db      	uxtb	r3, r3
 800897c:	4413      	add	r3, r2
 800897e:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
 8008980:	4bab      	ldr	r3, [pc, #684]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008982:	7c5a      	ldrb	r2, [r3, #17]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
 8008992:	4ba7      	ldr	r3, [pc, #668]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008994:	7cdb      	ldrb	r3, [r3, #19]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d015      	beq.n	80089c6 <SFDP_BuildGenericDriver+0x55a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
 800899a:	4ba5      	ldr	r3, [pc, #660]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 800899c:	7c9b      	ldrb	r3, [r3, #18]
 800899e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	4ba2      	ldr	r3, [pc, #648]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 80089a8:	7c9b      	ldrb	r3, [r3, #18]
 80089aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	4413      	add	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
 80089b4:	4b9e      	ldr	r3, [pc, #632]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 80089b6:	7cda      	ldrb	r2, [r3, #19]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2202      	movs	r2, #2
 80089c2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
 80089c6:	4b9a      	ldr	r3, [pc, #616]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 80089c8:	7d1b      	ldrb	r3, [r3, #20]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d011      	beq.n	80089f8 <SFDP_BuildGenericDriver+0x58c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
 80089d4:	4b96      	ldr	r3, [pc, #600]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 80089d6:	7e9b      	ldrb	r3, [r3, #26]
 80089d8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	461a      	mov	r2, r3
 80089e0:	4b93      	ldr	r3, [pc, #588]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 80089e2:	7e9b      	ldrb	r3, [r3, #26]
 80089e4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	4413      	add	r3, r2
 80089ec:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
 80089ee:	4b90      	ldr	r3, [pc, #576]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 80089f0:	7eda      	ldrb	r2, [r3, #27]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_2LINES)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d92c      	bls.n	8008a5c <SFDP_BuildGenericDriver+0x5f0>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
 8008a02:	4b8b      	ldr	r3, [pc, #556]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008a04:	7d1b      	ldrb	r3, [r3, #20]
 8008a06:	f003 0310 	and.w	r3, r3, #16
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d020      	beq.n	8008a52 <SFDP_BuildGenericDriver+0x5e6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
 8008a10:	4b87      	ldr	r3, [pc, #540]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008a12:	7f9b      	ldrb	r3, [r3, #30]
 8008a14:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	4b84      	ldr	r3, [pc, #528]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008a1e:	7f9b      	ldrb	r3, [r3, #30]
 8008a20:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	4413      	add	r3, r2
 8008a28:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
 8008a2a:	4b81      	ldr	r3, [pc, #516]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008a2c:	7fda      	ldrb	r2, [r3, #31]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2204      	movs	r2, #4
 8008a38:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fea7 	bl	8009790 <JEDEC_Basic_Manage4S4S4SEnableSequence>
 8008a42:	4603      	mov	r3, r0
 8008a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
 8008a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f040 82b4 	bne.w	8008fba <SFDP_BuildGenericDriver+0xb4e>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, (uint8_t)dummyCycles);
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f103 0008 	add.w	r0, r3, #8
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	3364      	adds	r3, #100	@ 0x64
 8008a66:	461a      	mov	r2, r3
 8008a68:	2100      	movs	r1, #0
 8008a6a:	f7fe fd89 	bl	8007580 <SAL_XSPI_MemoryConfig>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <SFDP_BuildGenericDriver+0x610>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008a74:	230c      	movs	r3, #12
 8008a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8008a7a:	e2a1      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	f107 0214 	add.w	r2, r7, #20
 8008a84:	2101      	movs	r1, #1
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fd7a 	bl	8007580 <SAL_XSPI_MemoryConfig>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <SFDP_BuildGenericDriver+0x62e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008a92:	230c      	movs	r3, #12
 8008a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8008a98:	e292      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>

     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFPD_PARAMID_OCTAL_DDR == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_OCTAL_DDR)) 
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008aa0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d069      	beq.n	8008b7c <SFDP_BuildGenericDriver+0x710>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d164      	bne.n	8008b7c <SFDP_BuildGenericDriver+0x710>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8008ab8:	2b09      	cmp	r3, #9
 8008aba:	d103      	bne.n	8008ac4 <SFDP_BuildGenericDriver+0x658>
    {
      flag4bitAddress = 1u;
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008ac2:	e03a      	b.n	8008b3a <SFDP_BuildGenericDriver+0x6ce>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfpd_enter_octal_mode(Object))
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fbdb 	bl	8009280 <sfpd_enter_octal_mode>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d134      	bne.n	8008b3a <SFDP_BuildGenericDriver+0x6ce>
      {
        /* switch the memory interface configuration according the Access protocol field */
        flag4bitAddress = 1u;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2209      	movs	r2, #9
 8008ada:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        
        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f103 0008 	add.w	r0, r3, #8
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3364      	adds	r3, #100	@ 0x64
 8008ae8:	461a      	mov	r2, r3
 8008aea:	2100      	movs	r1, #0
 8008aec:	f7fe fd48 	bl	8007580 <SAL_XSPI_MemoryConfig>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <SFDP_BuildGenericDriver+0x692>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008af6:	230c      	movs	r3, #12
 8008af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8008afc:	e260      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
        }
        
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFDu)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008b04:	2bfd      	cmp	r3, #253	@ 0xfd
 8008b06:	d109      	bne.n	8008b1c <SFDP_BuildGenericDriver+0x6b0>
        {
          /* set 20 wait state */
          dummyCycles = 20;
 8008b08:	2314      	movs	r3, #20
 8008b0a:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3308      	adds	r3, #8
 8008b10:	f107 0214 	add.w	r2, r7, #20
 8008b14:	2101      	movs	r1, #1
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe fd32 	bl	8007580 <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFEu)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008b22:	2bfe      	cmp	r3, #254	@ 0xfe
 8008b24:	d109      	bne.n	8008b3a <SFDP_BuildGenericDriver+0x6ce>
        {
          /* set 8 wait state */
          dummyCycles = 8;
 8008b26:	2308      	movs	r3, #8
 8008b28:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3308      	adds	r3, #8
 8008b2e:	f107 0214 	add.w	r2, r7, #20
 8008b32:	2101      	movs	r1, #1
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fd23 	bl	8007580 <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b40:	f003 0308 	and.w	r3, r3, #8
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d019      	beq.n	8008b7c <SFDP_BuildGenericDriver+0x710>
        (JEDEC_Basic.size > 16u))
 8008b48:	4b39      	ldr	r3, [pc, #228]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
 8008b4c:	2b10      	cmp	r3, #16
 8008b4e:	d915      	bls.n	8008b7c <SFDP_BuildGenericDriver+0x710>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16 bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
 8008b50:	4b37      	ldr	r3, [pc, #220]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008b52:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8008b56:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d903      	bls.n	8008b68 <SFDP_BuildGenericDriver+0x6fc>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8008b60:	230f      	movs	r3, #15
 8008b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8008b66:	e22b      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
 8008b68:	4b31      	ldr	r3, [pc, #196]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008b6a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8008b6e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	461a      	mov	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 813c 	beq.w	8008e04 <SFDP_BuildGenericDriver+0x998>
  {
    if (0u == flag4bitAddress)
 8008b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f040 809e 	bne.w	8008cd2 <SFDP_BuildGenericDriver+0x866>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
 8008b96:	4b26      	ldr	r3, [pc, #152]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008b98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d01c      	beq.n	8008bde <SFDP_BuildGenericDriver+0x772>
      {
        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,0xB7, NULL, 0))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f103 0008 	add.w	r0, r3, #8
 8008baa:	2300      	movs	r3, #0
 8008bac:	2200      	movs	r2, #0
 8008bae:	21b7      	movs	r1, #183	@ 0xb7
 8008bb0:	f7fe ff98 	bl	8007ae4 <SAL_XSPI_CommandSendData>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <SFDP_BuildGenericDriver+0x756>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008bba:	230c      	movs	r3, #12
 8008bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8008bc0:	e1fe      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
        }

        /* Set 4Bit addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	2102      	movs	r1, #2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe fcd8 	bl	8007580 <SAL_XSPI_MemoryConfig>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d06b      	beq.n	8008cae <SFDP_BuildGenericDriver+0x842>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8008bdc:	e1f0      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
        }

        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
 8008bde:	4b14      	ldr	r3, [pc, #80]	@ (8008c30 <SFDP_BuildGenericDriver+0x7c4>)
 8008be0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d04e      	beq.n	8008c8a <SFDP_BuildGenericDriver+0x81e>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f103 0008 	add.w	r0, r3, #8
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f7fe ff72 	bl	8007ae4 <SAL_XSPI_CommandSendData>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <SFDP_BuildGenericDriver+0x7a2>
                                           Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008c06:	230c      	movs	r3, #12
 8008c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8008c0c:	e1d8      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f103 0008 	add.w	r0, r3, #8
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8008c20:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d103      	bne.n	8008c34 <SFDP_BuildGenericDriver+0x7c8>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e002      	b.n	8008c36 <SFDP_BuildGenericDriver+0x7ca>
 8008c30:	24000280 	.word	0x24000280
 8008c34:	2300      	movs	r3, #0
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 8008c3c:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8008c3e:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8008c46:	461c      	mov	r4, r3
 8008c48:	2301      	movs	r3, #1
 8008c4a:	40a3      	lsls	r3, r4
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8008c52:	9401      	str	r4, [sp, #4]
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	4613      	mov	r3, r2
 8008c58:	462a      	mov	r2, r5
 8008c5a:	f7ff f838 	bl	8007cce <SAL_XSPI_CheckStatusRegister>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d003      	beq.n	8008c6c <SFDP_BuildGenericDriver+0x800>
                                            1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008c64:	230c      	movs	r3, #12
 8008c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
 8008c6a:	e1a9      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
        }

        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0xB7, NULL, 0u))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f103 0008 	add.w	r0, r3, #8
 8008c72:	2300      	movs	r3, #0
 8008c74:	2200      	movs	r2, #0
 8008c76:	21b7      	movs	r1, #183	@ 0xb7
 8008c78:	f7fe ff34 	bl	8007ae4 <SAL_XSPI_CommandSendData>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d015      	beq.n	8008cae <SFDP_BuildGenericDriver+0x842>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008c82:	230c      	movs	r3, #12
 8008c84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8008c88:	e19a      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
 8008c8a:	4ba3      	ldr	r3, [pc, #652]	@ (8008f18 <SFDP_BuildGenericDriver+0xaac>)
 8008c8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <SFDP_BuildGenericDriver+0x842>
      {
        /* nothing to do */
        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
 8008c98:	4b9f      	ldr	r3, [pc, #636]	@ (8008f18 <SFDP_BuildGenericDriver+0xaac>)
 8008c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008c9e:	f003 0320 	and.w	r3, r3, #32
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d103      	bne.n	8008cae <SFDP_BuildGenericDriver+0x842>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are don not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8008ca6:	230f      	movs	r3, #15
 8008ca8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8008cac:	e188      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>

      }

      /* Set 4Bit addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2102      	movs	r1, #2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fc62 	bl	8007580 <SAL_XSPI_MemoryConfig>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <SFDP_BuildGenericDriver+0x85e>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008cc2:	230c      	movs	r3, #12
 8008cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8008cc8:	e17a      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
      }
      
      /* Set the read function for 4Bit Address */
      Object->sfpd_private.DriverInfo.ReadInstruction = 0x13U;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2213      	movs	r2, #19
 8008cce:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config) && (PHY_LINK_1S1S1S == Object->sfpd_private.DriverInfo.SpiPhyLink))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008cd8:	2b03      	cmp	r3, #3
 8008cda:	d12e      	bne.n	8008d3a <SFDP_BuildGenericDriver+0x8ce>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d129      	bne.n	8008d3a <SFDP_BuildGenericDriver+0x8ce>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
 8008ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008ce8:	789b      	ldrb	r3, [r3, #2]
 8008cea:	f003 0320 	and.w	r3, r3, #32
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d022      	beq.n	8008d3a <SFDP_BuildGenericDriver+0x8ce>
 8008cf4:	4b89      	ldr	r3, [pc, #548]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008cf6:	78db      	ldrb	r3, [r3, #3]
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d01b      	beq.n	8008d3a <SFDP_BuildGenericDriver+0x8ce>
      {
        /* Patch micron write command 0x81 @0x0 0xE7 */
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2207      	movs	r2, #7
 8008d06:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f103 0008 	add.w	r0, r3, #8
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3364      	adds	r3, #100	@ 0x64
 8008d14:	461a      	mov	r2, r3
 8008d16:	2100      	movs	r1, #0
 8008d18:	f7fe fc32 	bl	8007580 <SAL_XSPI_MemoryConfig>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <SFDP_BuildGenericDriver+0x8be>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
 8008d22:	230c      	movs	r3, #12
 8008d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8008d28:	e14a      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
        }
        Object->sfpd_private.DriverInfo.ReadInstruction = 0xCC;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	22cc      	movs	r2, #204	@ 0xcc
 8008d2e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x8E;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	228e      	movs	r2, #142	@ 0x8e
 8008d36:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that macromix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) || 
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8008d40:	2b09      	cmp	r3, #9
 8008d42:	d004      	beq.n	8008d4e <SFDP_BuildGenericDriver+0x8e2>
        (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) || 
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d120      	bne.n	8008d90 <SFDP_BuildGenericDriver+0x924>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x12u;}
 8008d4e:	4b73      	ldr	r3, [pc, #460]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <SFDP_BuildGenericDriver+0x8f8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2212      	movs	r2, #18
 8008d60:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x13u;}
 8008d64:	4b6d      	ldr	r3, [pc, #436]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <SFDP_BuildGenericDriver+0x90e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2213      	movs	r2, #19
 8008d76:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x0Cu;}
 8008d7a:	4b68      	ldr	r3, [pc, #416]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <SFDP_BuildGenericDriver+0x924>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	220c      	movs	r2, #12
 8008d8c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }
    
    if (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D) 
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d120      	bne.n	8008ddc <SFDP_BuildGenericDriver+0x970>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction  = 0x02u;}
 8008d9a:	4b60      	ldr	r3, [pc, #384]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008d9c:	78db      	ldrb	r3, [r3, #3]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <SFDP_BuildGenericDriver+0x944>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xCCu;}
 8008db0:	4b5a      	ldr	r3, [pc, #360]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008db2:	789b      	ldrb	r3, [r3, #2]
 8008db4:	f003 0320 	and.w	r3, r3, #32
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <SFDP_BuildGenericDriver+0x95a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	22cc      	movs	r2, #204	@ 0xcc
 8008dc2:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xFDu;}
 8008dc6:	4b55      	ldr	r3, [pc, #340]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008dc8:	789b      	ldrb	r3, [r3, #2]
 8008dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <SFDP_BuildGenericDriver+0x970>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	22fd      	movs	r2, #253	@ 0xfd
 8008dd8:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType1;
 8008ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008dde:	791a      	ldrb	r2, [r3, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType2;
 8008de6:	4b4d      	ldr	r3, [pc, #308]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008de8:	795a      	ldrb	r2, [r3, #5]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType3;
 8008df0:	4b4a      	ldr	r3, [pc, #296]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008df2:	799a      	ldrb	r2, [r3, #6]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType4;
 8008dfa:	4b48      	ldr	r3, [pc, #288]	@ (8008f1c <SFDP_BuildGenericDriver+0xab0>)
 8008dfc:	79da      	ldrb	r2, [r3, #7]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFPD_PARAMID_XSPI_V1_0 == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_XSPI_V1_0))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 80d5 	beq.w	8008fbe <SFDP_BuildGenericDriver+0xb52>
      && 
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      && 
 8008e1a:	2b09      	cmp	r3, #9
 8008e1c:	d005      	beq.n	8008e2a <SFDP_BuildGenericDriver+0x9be>
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	f040 80ca 	bne.w	8008fbe <SFDP_BuildGenericDriver+0xb52>
  {
    uint32_t ClockOut = 0u;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
 8008e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8008f20 <SFDP_BuildGenericDriver+0xab4>)
 8008e30:	785b      	ldrb	r3, [r3, #1]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d004      	beq.n	8008e40 <SFDP_BuildGenericDriver+0x9d4>
    {
      Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
 8008e36:	4b3a      	ldr	r3, [pc, #232]	@ (8008f20 <SFDP_BuildGenericDriver+0xab4>)
 8008e38:	785a      	ldrb	r2, [r3, #1]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }
    
    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
 8008e40:	4b37      	ldr	r3, [pc, #220]	@ (8008f20 <SFDP_BuildGenericDriver+0xab4>)
 8008e42:	7d1b      	ldrb	r3, [r3, #20]
 8008e44:	f003 031f 	and.w	r3, r3, #31
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00d      	beq.n	8008e6a <SFDP_BuildGenericDriver+0x9fe>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
 8008e4e:	4b34      	ldr	r3, [pc, #208]	@ (8008f20 <SFDP_BuildGenericDriver+0xab4>)
 8008e50:	7d1b      	ldrb	r3, [r3, #20]
 8008e52:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	f107 0214 	add.w	r2, r7, #20
 8008e62:	2101      	movs	r1, #1
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7fe fb8b 	bl	8007580 <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory freq according its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
 8008e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8008f18 <SFDP_BuildGenericDriver+0xaac>)
 8008e6c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8008e70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 f8e8 	bl	800904c <sfdp_getfrequencevalue>
 8008e7c:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfpd_private.DriverInfo.ClockIn)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e82:	69fa      	ldr	r2, [r7, #28]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d902      	bls.n	8008e8e <SFDP_BuildGenericDriver+0xa22>
    {
      /* Adjust the frequence with the ClokcIn */ 
      MaxFreqMhz = Object->sfpd_private.DriverInfo.ClockIn;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e8c:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f103 0008 	add.w	r0, r3, #8
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8008e98:	f107 030c 	add.w	r3, r7, #12
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	f7fe fafd 	bl	800749c <SAL_XSPI_SetClock>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <SFDP_BuildGenericDriver+0xa44>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
 8008ea8:	230d      	movs	r3, #13
 8008eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8008eae:	e087      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	701a      	strb	r2, [r3, #0]
    
    /* get the dummy cycle value according the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8008f24 <SFDP_BuildGenericDriver+0xab8>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d913      	bls.n	8008ee6 <SFDP_BuildGenericDriver+0xa7a>
 8008ebe:	4b18      	ldr	r3, [pc, #96]	@ (8008f20 <SFDP_BuildGenericDriver+0xab4>)
 8008ec0:	899b      	ldrh	r3, [r3, #12]
 8008ec2:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00c      	beq.n	8008ee6 <SFDP_BuildGenericDriver+0xa7a>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
 8008ecc:	4b14      	ldr	r3, [pc, #80]	@ (8008f20 <SFDP_BuildGenericDriver+0xab4>)
 8008ece:	899b      	ldrh	r3, [r3, #12]
 8008ed0:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
 8008ed8:	4b11      	ldr	r3, [pc, #68]	@ (8008f20 <SFDP_BuildGenericDriver+0xab4>)
 8008eda:	7b1b      	ldrb	r3, [r3, #12]
 8008edc:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	623b      	str	r3, [r7, #32]
 8008ee4:	e046      	b.n	8008f74 <SFDP_BuildGenericDriver+0xb08>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8008f28 <SFDP_BuildGenericDriver+0xabc>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d91e      	bls.n	8008f2c <SFDP_BuildGenericDriver+0xac0>
 8008eee:	4b0c      	ldr	r3, [pc, #48]	@ (8008f20 <SFDP_BuildGenericDriver+0xab4>)
 8008ef0:	7cdb      	ldrb	r3, [r3, #19]
 8008ef2:	f023 0307 	bic.w	r3, r3, #7
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d017      	beq.n	8008f2c <SFDP_BuildGenericDriver+0xac0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
 8008efc:	4b08      	ldr	r3, [pc, #32]	@ (8008f20 <SFDP_BuildGenericDriver+0xab4>)
 8008efe:	7cdb      	ldrb	r3, [r3, #19]
 8008f00:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
 8008f08:	4b05      	ldr	r3, [pc, #20]	@ (8008f20 <SFDP_BuildGenericDriver+0xab4>)
 8008f0a:	8a5b      	ldrh	r3, [r3, #18]
 8008f0c:	f3c3 1384 	ubfx	r3, r3, #6, #5
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	623b      	str	r3, [r7, #32]
 8008f14:	e02e      	b.n	8008f74 <SFDP_BuildGenericDriver+0xb08>
 8008f16:	bf00      	nop
 8008f18:	24000280 	.word	0x24000280
 8008f1c:	240002e0 	.word	0x240002e0
 8008f20:	240002e8 	.word	0x240002e8
 8008f24:	0bebc1ff 	.word	0x0bebc1ff
 8008f28:	09e4f57f 	.word	0x09e4f57f
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4a27      	ldr	r2, [pc, #156]	@ (8008fcc <SFDP_BuildGenericDriver+0xb60>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d913      	bls.n	8008f5c <SFDP_BuildGenericDriver+0xaf0>
 8008f34:	4b26      	ldr	r3, [pc, #152]	@ (8008fd0 <SFDP_BuildGenericDriver+0xb64>)
 8008f36:	7c9b      	ldrb	r3, [r3, #18]
 8008f38:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00c      	beq.n	8008f5c <SFDP_BuildGenericDriver+0xaf0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
 8008f42:	4b23      	ldr	r3, [pc, #140]	@ (8008fd0 <SFDP_BuildGenericDriver+0xb64>)
 8008f44:	7c9b      	ldrb	r3, [r3, #18]
 8008f46:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
 8008f4e:	4b20      	ldr	r3, [pc, #128]	@ (8008fd0 <SFDP_BuildGenericDriver+0xb64>)
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	f3c3 3304 	ubfx	r3, r3, #12, #5
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	623b      	str	r3, [r7, #32]
 8008f5a:	e00b      	b.n	8008f74 <SFDP_BuildGenericDriver+0xb08>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
 8008f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8008fd0 <SFDP_BuildGenericDriver+0xb64>)
 8008f5e:	8a1b      	ldrh	r3, [r3, #16]
 8008f60:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
 8008f68:	4b19      	ldr	r3, [pc, #100]	@ (8008fd0 <SFDP_BuildGenericDriver+0xb64>)
 8008f6a:	7c1b      	ldrb	r3, [r3, #16]
 8008f6c:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	623b      	str	r3, [r7, #32]
    }
    
    /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
    if((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d017      	beq.n	8008fb2 <SFDP_BuildGenericDriver+0xb46>
	  && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
 8008f82:	4b14      	ldr	r3, [pc, #80]	@ (8008fd4 <SFDP_BuildGenericDriver+0xb68>)
 8008f84:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008f88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00f      	beq.n	8008fb2 <SFDP_BuildGenericDriver+0xb46>
    {
      /* Update the frequence with MaxFreqMhz information */
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
 8008f92:	6a39      	ldr	r1, [r7, #32]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fa5d 	bl	8009454 <sfpd_set_dummycycle>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10f      	bne.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
      {
        /* Set the dummy cycle corresponding */
        (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	f107 0214 	add.w	r2, r7, #20
 8008fa8:	2101      	movs	r1, #1
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe fae8 	bl	8007580 <SAL_XSPI_MemoryConfig>
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
 8008fb0:	e006      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
      }
    }
    else
    {
      retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
 8008fb2:	230e      	movs	r3, #14
 8008fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
 8008fb8:	e002      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
          goto error;
 8008fba:	bf00      	nop
 8008fbc:	e000      	b.n	8008fc0 <SFDP_BuildGenericDriver+0xb54>
    }
  }

error :
 8008fbe:	bf00      	nop
  return retr;
 8008fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3728      	adds	r7, #40	@ 0x28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bdb0      	pop	{r4, r5, r7, pc}
 8008fcc:	07ed6b3f 	.word	0x07ed6b3f
 8008fd0:	240002e8 	.word	0x240002e8
 8008fd4:	24000300 	.word	0x24000300

08008fd8 <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
 8008fd8:	b5b0      	push	{r4, r5, r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
 8008fe2:	23fb      	movs	r3, #251	@ 0xfb
 8008fe4:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d026      	beq.n	800903e <driver_check_FlagBUSY+0x66>
  {
    /* check if the busy flag is enabled */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f103 0008 	add.w	r0, r3, #8
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
                                               SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfpd_private.DriverInfo.WIPAddress,
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8009002:	461d      	mov	r5, r3
                                               SFDPObject->sfpd_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 8009012:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8009016:	b2dc      	uxtb	r4, r3
                                               1u << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
 800901e:	461a      	mov	r2, r3
 8009020:	2301      	movs	r3, #1
 8009022:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
 8009024:	b2db      	uxtb	r3, r3
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	9201      	str	r2, [sp, #4]
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	4623      	mov	r3, r4
 800902e:	462a      	mov	r2, r5
 8009030:	f7fe fe4d 	bl	8007cce <SAL_XSPI_CheckStatusRegister>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <driver_check_FlagBUSY+0x66>
                                               Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
 800903e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800904c <sfdp_getfrequencevalue>:
 * @brief this function returns the frequence corresponding to a frequecy
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
 800904c:	b4b0      	push	{r4, r5, r7}
 800904e:	b08b      	sub	sp, #44	@ 0x2c
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
 8009054:	4b0e      	ldr	r3, [pc, #56]	@ (8009090 <sfdp_getfrequencevalue+0x44>)
 8009056:	f107 040c 	add.w	r4, r7, #12
 800905a:	461d      	mov	r5, r3
 800905c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800905e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009060:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009064:	c403      	stmia	r4!, {r0, r1}
 8009066:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b09      	cmp	r3, #9
 800906c:	d80a      	bhi.n	8009084 <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	3328      	adds	r3, #40	@ 0x28
 8009074:	443b      	add	r3, r7
 8009076:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800907a:	461a      	mov	r2, r3
 800907c:	4b05      	ldr	r3, [pc, #20]	@ (8009094 <sfdp_getfrequencevalue+0x48>)
 800907e:	fb02 f303 	mul.w	r3, r2, r3
 8009082:	e000      	b.n	8009086 <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	372c      	adds	r7, #44	@ 0x2c
 800908a:	46bd      	mov	sp, r7
 800908c:	bcb0      	pop	{r4, r5, r7}
 800908e:	4770      	bx	lr
 8009090:	08009b04 	.word	0x08009b04
 8009094:	000f4240 	.word	0x000f4240

08009098 <sfdp_get_paraminfo>:
 * @param sfdp_adress address of the SFDP table
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_adress, SFDP_ParameterTableTypeDef *Param_info)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
 80090a8:	f107 0314 	add.w	r3, r7, #20
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, sfdp_adress, 
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f103 0008 	add.w	r0, r3, #8
 80090b8:	f107 0214 	add.w	r2, r7, #20
 80090bc:	2308      	movs	r3, #8
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	f7fe fbb0 	bl	8007824 <SAL_XSPI_GetSFDP>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFPDREAD;
 80090ca:	2303      	movs	r3, #3
 80090cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090ce:	e0d1      	b.n	8009274 <sfdp_get_paraminfo+0x1dc>
  }

  Param_info->type = SFPD_PARAMID_UNKNOWN;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
 80090d6:	7dfa      	ldrb	r2, [r7, #23]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
 80090dc:	7ebb      	ldrb	r3, [r7, #26]
 80090de:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
 80090e0:	7e7b      	ldrb	r3, [r7, #25]
 80090e2:	021b      	lsls	r3, r3, #8
 80090e4:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
 80090e6:	7e3a      	ldrb	r2, [r7, #24]
 80090e8:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
 80090ee:	7efb      	ldrb	r3, [r7, #27]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d010      	beq.n	8009116 <sfdp_get_paraminfo+0x7e>
 80090f4:	7efb      	ldrb	r3, [r7, #27]
 80090f6:	b25b      	sxtb	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	db0c      	blt.n	8009116 <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 80090fc:	7efb      	ldrb	r3, [r7, #27]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFPD_PARAMID_VENDOR;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2201      	movs	r2, #1
 800910a:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 800910c:	e0b2      	b.n	8009274 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_VENDOR;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2202      	movs	r2, #2
 8009112:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
 8009114:	e0ae      	b.n	8009274 <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_VENDOR");
    }
  }
  else
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
 8009116:	7d3b      	ldrb	r3, [r7, #20]
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <sfdp_get_paraminfo+0x8e>
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_JEDEC;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2204      	movs	r2, #4
 8009124:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_JEDEC");
    }

    if((0xFFu == sfdp_param_header.ID_msb))
 8009126:	7efb      	ldrb	r3, [r7, #27]
 8009128:	2bff      	cmp	r3, #255	@ 0xff
 800912a:	f040 80a2 	bne.w	8009272 <sfdp_get_paraminfo+0x1da>
    {
      switch(sfdp_param_header.ID_lsb)
 800912e:	7d3b      	ldrb	r3, [r7, #20]
 8009130:	2b0f      	cmp	r3, #15
 8009132:	dc4b      	bgt.n	80091cc <sfdp_get_paraminfo+0x134>
 8009134:	2b00      	cmp	r3, #0
 8009136:	da23      	bge.n	8009180 <sfdp_get_paraminfo+0xe8>
        Param_info->type = SFPD_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_????");
        break;
 8009138:	e09a      	b.n	8009270 <sfdp_get_paraminfo+0x1d8>
      switch(sfdp_param_header.ID_lsb)
 800913a:	3b81      	subs	r3, #129	@ 0x81
 800913c:	2b0d      	cmp	r3, #13
 800913e:	f200 8097 	bhi.w	8009270 <sfdp_get_paraminfo+0x1d8>
 8009142:	a201      	add	r2, pc, #4	@ (adr r2, 8009148 <sfdp_get_paraminfo+0xb0>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	080091ed 	.word	0x080091ed
 800914c:	08009271 	.word	0x08009271
 8009150:	08009271 	.word	0x08009271
 8009154:	080091fd 	.word	0x080091fd
 8009158:	08009271 	.word	0x08009271
 800915c:	08009271 	.word	0x08009271
 8009160:	08009217 	.word	0x08009217
 8009164:	08009221 	.word	0x08009221
 8009168:	08009271 	.word	0x08009271
 800916c:	08009271 	.word	0x08009271
 8009170:	0800923f 	.word	0x0800923f
 8009174:	08009271 	.word	0x08009271
 8009178:	08009253 	.word	0x08009253
 800917c:	0800925d 	.word	0x0800925d
 8009180:	2b0f      	cmp	r3, #15
 8009182:	d875      	bhi.n	8009270 <sfdp_get_paraminfo+0x1d8>
 8009184:	a201      	add	r2, pc, #4	@ (adr r2, 800918c <sfdp_get_paraminfo+0xf4>)
 8009186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918a:	bf00      	nop
 800918c:	080091d7 	.word	0x080091d7
 8009190:	08009271 	.word	0x08009271
 8009194:	08009271 	.word	0x08009271
 8009198:	080091f5 	.word	0x080091f5
 800919c:	08009271 	.word	0x08009271
 80091a0:	08009205 	.word	0x08009205
 80091a4:	0800920d 	.word	0x0800920d
 80091a8:	08009271 	.word	0x08009271
 80091ac:	08009271 	.word	0x08009271
 80091b0:	0800922b 	.word	0x0800922b
 80091b4:	08009235 	.word	0x08009235
 80091b8:	08009271 	.word	0x08009271
 80091bc:	08009249 	.word	0x08009249
 80091c0:	08009271 	.word	0x08009271
 80091c4:	08009271 	.word	0x08009271
 80091c8:	08009267 	.word	0x08009267
 80091cc:	2b8e      	cmp	r3, #142	@ 0x8e
 80091ce:	dc4f      	bgt.n	8009270 <sfdp_get_paraminfo+0x1d8>
 80091d0:	2b81      	cmp	r3, #129	@ 0x81
 80091d2:	dab2      	bge.n	800913a <sfdp_get_paraminfo+0xa2>
        break;
 80091d4:	e04c      	b.n	8009270 <sfdp_get_paraminfo+0x1d8>
        Param_info->type = SFPD_PARAMID_BASIC_SPIPROTOCOL;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2208      	movs	r2, #8
 80091da:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE) ? SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE : sfdp_param_header.Length;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	2b10      	cmp	r3, #16
 80091e0:	bf38      	it	cc
 80091e2:	2310      	movcc	r3, #16
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	721a      	strb	r2, [r3, #8]
        break;
 80091ea:	e042      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECTORMAP;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2210      	movs	r2, #16
 80091f0:	601a      	str	r2, [r3, #0]
        break;
 80091f2:	e03e      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RPMC;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2220      	movs	r2, #32
 80091f8:	601a      	str	r2, [r3, #0]
        break;
 80091fa:	e03a      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2240      	movs	r2, #64	@ 0x40
 8009200:	601a      	str	r2, [r3, #0]
        break;
 8009202:	e036      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V1_0;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2280      	movs	r2, #128	@ 0x80
 8009208:	601a      	str	r2, [r3, #0]
        break;
 800920a:	e032      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V2_0;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009212:	601a      	str	r2, [r3, #0]
        break;
 8009214:	e02d      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800921c:	601a      	str	r2, [r3, #0]
        break;
 800921e:	e028      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009226:	601a      	str	r2, [r3, #0]
        break;
 8009228:	e023      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009230:	601a      	str	r2, [r3, #0]
        break;
 8009232:	e01e      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_OCTAL_DDR;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800923a:	601a      	str	r2, [r3, #0]
        break;
 800923c:	e019      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_MSPT;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009244:	601a      	str	r2, [r3, #0]
        break;
 8009246:	e014      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_X4QUAD_DS;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800924e:	601a      	str	r2, [r3, #0]
        break;
 8009250:	e00f      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_QUAD_DDR;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009258:	601a      	str	r2, [r3, #0]
        break;
 800925a:	e00a      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECURE_PACKET_READ_WRITE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009262:	601a      	str	r2, [r3, #0]
        break;
 8009264:	e005      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RESERVED;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800926c:	601a      	str	r2, [r3, #0]
        break;
 800926e:	e000      	b.n	8009272 <sfdp_get_paraminfo+0x1da>
        break;
 8009270:	bf00      	nop
    {
      SFDP_DEBUG_STR("-> the table is not conform to JEDEC standard");
    }
  }
  
error:
 8009272:	bf00      	nop
  return retr;
 8009274:	7ffb      	ldrb	r3, [r7, #31]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3720      	adds	r7, #32
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop

08009280 <sfpd_enter_octal_mode>:
 * @brief this function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8009280:	b590      	push	{r4, r7, lr}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand)
 800928c:	4b70      	ldr	r3, [pc, #448]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 800928e:	78db      	ldrb	r3, [r3, #3]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d032      	beq.n	80092fa <sfpd_enter_octal_mode+0x7a>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
 8009294:	4b6e      	ldr	r3, [pc, #440]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009296:	789b      	ldrb	r3, [r3, #2]
 8009298:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
 800929a:	4b6d      	ldr	r3, [pc, #436]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 800929c:	785b      	ldrb	r3, [r3, #1]
 800929e:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
 80092a0:	4b6b      	ldr	r3, [pc, #428]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
 80092a6:	4b6a      	ldr	r3, [pc, #424]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80092a8:	79db      	ldrb	r3, [r3, #7]
 80092aa:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
 80092ac:	4b68      	ldr	r3, [pc, #416]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80092ae:	799b      	ldrb	r3, [r3, #6]
 80092b0:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
 80092b2:	4b67      	ldr	r3, [pc, #412]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80092b4:	795b      	ldrb	r3, [r3, #5]
 80092b6:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
 80092b8:	4b65      	ldr	r3, [pc, #404]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80092ba:	791b      	ldrb	r3, [r3, #4]
 80092bc:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f103 0008 	add.w	r0, r3, #8
 80092c4:	7a39      	ldrb	r1, [r7, #8]
                                        (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand - 1u)))
 80092c6:	4b62      	ldr	r3, [pc, #392]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80092c8:	78db      	ldrb	r3, [r3, #3]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29c      	uxth	r4, r3
 80092ce:	f107 0308 	add.w	r3, r7, #8
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	4623      	mov	r3, r4
 80092d6:	f7fe fc05 	bl	8007ae4 <SAL_XSPI_CommandSendData>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <sfpd_enter_octal_mode+0x66>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 80092e0:	230b      	movs	r3, #11
 80092e2:	73fb      	strb	r3, [r7, #15]
       goto error;
 80092e4:	e0af      	b.n	8009446 <sfpd_enter_octal_mode+0x1c6>
     }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 80092e6:	2164      	movs	r1, #100	@ 0x64
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff fe75 	bl	8008fd8 <driver_check_FlagBUSY>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <sfpd_enter_octal_mode+0x7a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80092f4:	230c      	movs	r3, #12
 80092f6:	73fb      	strb	r3, [r7, #15]
      goto error;
 80092f8:	e0a5      	b.n	8009446 <sfpd_enter_octal_mode+0x1c6>
    }
  }
  
  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand)
 80092fa:	4b55      	ldr	r3, [pc, #340]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80092fc:	7adb      	ldrb	r3, [r3, #11]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d032      	beq.n	8009368 <sfpd_enter_octal_mode+0xe8>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
 8009302:	4b53      	ldr	r3, [pc, #332]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009304:	7a9b      	ldrb	r3, [r3, #10]
 8009306:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
 8009308:	4b51      	ldr	r3, [pc, #324]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 800930a:	7a5b      	ldrb	r3, [r3, #9]
 800930c:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
 800930e:	4b50      	ldr	r3, [pc, #320]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009310:	7a1b      	ldrb	r3, [r3, #8]
 8009312:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
 8009314:	4b4e      	ldr	r3, [pc, #312]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009316:	7bdb      	ldrb	r3, [r3, #15]
 8009318:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
 800931a:	4b4d      	ldr	r3, [pc, #308]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 800931c:	7b9b      	ldrb	r3, [r3, #14]
 800931e:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
 8009320:	4b4b      	ldr	r3, [pc, #300]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009322:	7b5b      	ldrb	r3, [r3, #13]
 8009324:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
 8009326:	4b4a      	ldr	r3, [pc, #296]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009328:	7b1b      	ldrb	r3, [r3, #12]
 800932a:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f103 0008 	add.w	r0, r3, #8
 8009332:	7a39      	ldrb	r1, [r7, #8]
                                            (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand - 1u)))
 8009334:	4b46      	ldr	r3, [pc, #280]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009336:	7adb      	ldrb	r3, [r3, #11]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8009338:	3b01      	subs	r3, #1
 800933a:	b29c      	uxth	r4, r3
 800933c:	f107 0308 	add.w	r3, r7, #8
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	4623      	mov	r3, r4
 8009344:	f7fe fbce 	bl	8007ae4 <SAL_XSPI_CommandSendData>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d002      	beq.n	8009354 <sfpd_enter_octal_mode+0xd4>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 800934e:	230b      	movs	r3, #11
 8009350:	73fb      	strb	r3, [r7, #15]
       goto error;
 8009352:	e078      	b.n	8009446 <sfpd_enter_octal_mode+0x1c6>
     }
     
    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8009354:	2164      	movs	r1, #100	@ 0x64
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff fe3e 	bl	8008fd8 <driver_check_FlagBUSY>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <sfpd_enter_octal_mode+0xe8>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009362:	230c      	movs	r3, #12
 8009364:	73fb      	strb	r3, [r7, #15]
      goto error;
 8009366:	e06e      	b.n	8009446 <sfpd_enter_octal_mode+0x1c6>
    }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand)
 8009368:	4b39      	ldr	r3, [pc, #228]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 800936a:	7cdb      	ldrb	r3, [r3, #19]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d032      	beq.n	80093d6 <sfpd_enter_octal_mode+0x156>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
 8009370:	4b37      	ldr	r3, [pc, #220]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009372:	7c9b      	ldrb	r3, [r3, #18]
 8009374:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
 8009376:	4b36      	ldr	r3, [pc, #216]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009378:	7c5b      	ldrb	r3, [r3, #17]
 800937a:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
 800937c:	4b34      	ldr	r3, [pc, #208]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 800937e:	7c1b      	ldrb	r3, [r3, #16]
 8009380:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
 8009382:	4b33      	ldr	r3, [pc, #204]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009384:	7ddb      	ldrb	r3, [r3, #23]
 8009386:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
 8009388:	4b31      	ldr	r3, [pc, #196]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 800938a:	7d9b      	ldrb	r3, [r3, #22]
 800938c:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
 800938e:	4b30      	ldr	r3, [pc, #192]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009390:	7d5b      	ldrb	r3, [r3, #21]
 8009392:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
 8009394:	4b2e      	ldr	r3, [pc, #184]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009396:	7d1b      	ldrb	r3, [r3, #20]
 8009398:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f103 0008 	add.w	r0, r3, #8
 80093a0:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand - 1u)))
 80093a2:	4b2b      	ldr	r3, [pc, #172]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80093a4:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29c      	uxth	r4, r3
 80093aa:	f107 0308 	add.w	r3, r7, #8
 80093ae:	1c5a      	adds	r2, r3, #1
 80093b0:	4623      	mov	r3, r4
 80093b2:	f7fe fb97 	bl	8007ae4 <SAL_XSPI_CommandSendData>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <sfpd_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 80093bc:	230b      	movs	r3, #11
 80093be:	73fb      	strb	r3, [r7, #15]
      goto error;
 80093c0:	e041      	b.n	8009446 <sfpd_enter_octal_mode+0x1c6>
    }

     /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 80093c2:	2164      	movs	r1, #100	@ 0x64
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff fe07 	bl	8008fd8 <driver_check_FlagBUSY>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <sfpd_enter_octal_mode+0x156>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80093d0:	230c      	movs	r3, #12
 80093d2:	73fb      	strb	r3, [r7, #15]
      goto error;
 80093d4:	e037      	b.n	8009446 <sfpd_enter_octal_mode+0x1c6>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand)
 80093d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80093d8:	7edb      	ldrb	r3, [r3, #27]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d032      	beq.n	8009444 <sfpd_enter_octal_mode+0x1c4>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
 80093de:	4b1c      	ldr	r3, [pc, #112]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80093e0:	7e9b      	ldrb	r3, [r3, #26]
 80093e2:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
 80093e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80093e6:	7e5b      	ldrb	r3, [r3, #25]
 80093e8:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
 80093ea:	4b19      	ldr	r3, [pc, #100]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80093ec:	7e1b      	ldrb	r3, [r3, #24]
 80093ee:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
 80093f0:	4b17      	ldr	r3, [pc, #92]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80093f2:	7fdb      	ldrb	r3, [r3, #31]
 80093f4:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
 80093f6:	4b16      	ldr	r3, [pc, #88]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80093f8:	7f9b      	ldrb	r3, [r3, #30]
 80093fa:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
 80093fc:	4b14      	ldr	r3, [pc, #80]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 80093fe:	7f5b      	ldrb	r3, [r3, #29]
 8009400:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
 8009402:	4b13      	ldr	r3, [pc, #76]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009404:	7f1b      	ldrb	r3, [r3, #28]
 8009406:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f103 0008 	add.w	r0, r3, #8
 800940e:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand - 1u)))
 8009410:	4b0f      	ldr	r3, [pc, #60]	@ (8009450 <sfpd_enter_octal_mode+0x1d0>)
 8009412:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
 8009414:	3b01      	subs	r3, #1
 8009416:	b29c      	uxth	r4, r3
 8009418:	f107 0308 	add.w	r3, r7, #8
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	4623      	mov	r3, r4
 8009420:	f7fe fb60 	bl	8007ae4 <SAL_XSPI_CommandSendData>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <sfpd_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
 800942a:	230b      	movs	r3, #11
 800942c:	73fb      	strb	r3, [r7, #15]
      goto error;
 800942e:	e00a      	b.n	8009446 <sfpd_enter_octal_mode+0x1c6>
    }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 8009430:	2164      	movs	r1, #100	@ 0x64
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff fdd0 	bl	8008fd8 <driver_check_FlagBUSY>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <sfpd_enter_octal_mode+0x1c4>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800943e:	230c      	movs	r3, #12
 8009440:	73fb      	strb	r3, [r7, #15]
      goto error;
 8009442:	e000      	b.n	8009446 <sfpd_enter_octal_mode+0x1c6>
    }
  }

error:
 8009444:	bf00      	nop
  return retr;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	bd90      	pop	{r4, r7, pc}
 8009450:	24000370 	.word	0x24000370

08009454 <sfpd_set_dummycycle>:
 * @brief this function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
 8009454:	b5b0      	push	{r4, r5, r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af02      	add	r7, sp, #8
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
 800945e:	4b6d      	ldr	r3, [pc, #436]	@ (8009614 <sfpd_set_dummycycle+0x1c0>)
 8009460:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
 8009466:	2300      	movs	r3, #0
 8009468:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
 800946a:	4b6b      	ldr	r3, [pc, #428]	@ (8009618 <sfpd_set_dummycycle+0x1c4>)
 800946c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009470:	f003 0310 	and.w	r3, r3, #16
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10a      	bne.n	8009490 <sfpd_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
 800947a:	4b67      	ldr	r3, [pc, #412]	@ (8009618 <sfpd_set_dummycycle+0x1c4>)
 800947c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009480:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009484:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <sfpd_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 800948a:	230c      	movs	r3, #12
 800948c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800948e:	e0bb      	b.n	8009608 <sfpd_set_dummycycle+0x1b4>
  }
  
  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
 8009490:	4b61      	ldr	r3, [pc, #388]	@ (8009618 <sfpd_set_dummycycle+0x1c4>)
 8009492:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009496:	f003 0308 	and.w	r3, r3, #8
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d005      	beq.n	80094ac <sfpd_set_dummycycle+0x58>
  { 
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AdressRegisterOrModesSupported << 8;
 80094a0:	4b5d      	ldr	r3, [pc, #372]	@ (8009618 <sfpd_set_dummycycle+0x1c4>)
 80094a2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80094a6:	021b      	lsls	r3, r3, #8
 80094a8:	613b      	str	r3, [r7, #16]
 80094aa:	e001      	b.n	80094b0 <sfpd_set_dummycycle+0x5c>
  }
  else
  {
    /* patch no really universal */
    Address = 1; 
 80094ac:	2301      	movs	r3, #1
 80094ae:	613b      	str	r3, [r7, #16]
  }
    
  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfpd_private.SALObject, 
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f103 0008 	add.w	r0, r3, #8
 80094b6:	4b58      	ldr	r3, [pc, #352]	@ (8009618 <sfpd_set_dummycycle+0x1c4>)
 80094b8:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 80094bc:	f107 0308 	add.w	r3, r7, #8
 80094c0:	2202      	movs	r2, #2
 80094c2:	9200      	str	r2, [sp, #0]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	f7fe fbb5 	bl	8007c34 <SAL_XSPI_CommandSendReadAddress>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <sfpd_set_dummycycle+0x82>
                   (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, 
                   Address, 
                   (uint8_t *)localValue, 
                   2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80094d0:	230c      	movs	r3, #12
 80094d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094d4:	e098      	b.n	8009608 <sfpd_set_dummycycle+0x1b4>
  }
      
  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f103 0008 	add.w	r0, r3, #8
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 80094e2:	2300      	movs	r3, #0
 80094e4:	2200      	movs	r2, #0
 80094e6:	f7fe fafd 	bl	8007ae4 <SAL_XSPI_CommandSendData>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <sfpd_set_dummycycle+0xa2>
                                     Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80094f0:	230c      	movs	r3, #12
 80094f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80094f4:	e088      	b.n	8009608 <sfpd_set_dummycycle+0x1b4>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f103 0008 	add.w	r0, r3, #8
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8009508:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <sfpd_set_dummycycle+0xc4>
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <sfpd_set_dummycycle+0xc6>
 8009518:	2300      	movs	r3, #0
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
 8009520:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8009522:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800952a:	461c      	mov	r4, r3
 800952c:	2301      	movs	r3, #1
 800952e:	40a3      	lsls	r3, r4
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
 8009530:	b2db      	uxtb	r3, r3
 8009532:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8009536:	9401      	str	r4, [sp, #4]
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	4613      	mov	r3, r2
 800953c:	462a      	mov	r2, r5
 800953e:	f7fe fbc6 	bl	8007cce <SAL_XSPI_CheckStatusRegister>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <sfpd_set_dummycycle+0xfa>
                                            1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009548:	230c      	movs	r3, #12
 800954a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800954c:	e05c      	b.n	8009608 <sfpd_set_dummycycle+0x1b4>
  }
    
  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
 800954e:	7a3b      	ldrb	r3, [r7, #8]
 8009550:	b25a      	sxtb	r2, r3
 8009552:	4b31      	ldr	r3, [pc, #196]	@ (8009618 <sfpd_set_dummycycle+0x1c4>)
 8009554:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009558:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800955c:	b2db      	uxtb	r3, r3
 800955e:	3318      	adds	r3, #24
 8009560:	443b      	add	r3, r7
 8009562:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8009566:	4619      	mov	r1, r3
 8009568:	4b2b      	ldr	r3, [pc, #172]	@ (8009618 <sfpd_set_dummycycle+0x1c4>)
 800956a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800956e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009572:	b2db      	uxtb	r3, r3
 8009574:	fa01 f303 	lsl.w	r3, r1, r3
 8009578:	b25b      	sxtb	r3, r3
 800957a:	43db      	mvns	r3, r3
 800957c:	b25b      	sxtb	r3, r3
 800957e:	4013      	ands	r3, r2
 8009580:	b25b      	sxtb	r3, r3
 8009582:	b2db      	uxtb	r3, r3
 8009584:	723b      	strb	r3, [r7, #8]
                                    
  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
 8009586:	7a3a      	ldrb	r2, [r7, #8]
 8009588:	4b23      	ldr	r3, [pc, #140]	@ (8009618 <sfpd_set_dummycycle+0x1c4>)
 800958a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800958e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8009592:	b2db      	uxtb	r3, r3
 8009594:	4619      	mov	r1, r3
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	408b      	lsls	r3, r1
 800959a:	b2db      	uxtb	r3, r3
 800959c:	4313      	orrs	r3, r2
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
 80095a2:	7a3b      	ldrb	r3, [r7, #8]
 80095a4:	727b      	strb	r3, [r7, #9]
     
  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f103 0008 	add.w	r0, r3, #8
 80095ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009618 <sfpd_set_dummycycle+0x1c4>)
 80095ae:	f893 1020 	ldrb.w	r1, [r3, #32]
 80095b2:	f107 0308 	add.w	r3, r7, #8
 80095b6:	2202      	movs	r2, #2
 80095b8:	9200      	str	r2, [sp, #0]
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	f7fe fa49 	bl	8007a52 <SAL_XSPI_Write>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <sfpd_set_dummycycle+0x178>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80095c6:	230c      	movs	r3, #12
 80095c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80095ca:	e01d      	b.n	8009608 <sfpd_set_dummycycle+0x1b4>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
 80095cc:	2164      	movs	r1, #100	@ 0x64
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff fd02 	bl	8008fd8 <driver_check_FlagBUSY>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <sfpd_set_dummycycle+0x18c>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 80095da:	230c      	movs	r3, #12
 80095dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80095de:	e013      	b.n	8009608 <sfpd_set_dummycycle+0x1b4>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, Address, (uint8_t *)localValue, 2u))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f103 0008 	add.w	r0, r3, #8
 80095e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009618 <sfpd_set_dummycycle+0x1c4>)
 80095e8:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 80095ec:	f107 0308 	add.w	r3, r7, #8
 80095f0:	2202      	movs	r2, #2
 80095f2:	9200      	str	r2, [sp, #0]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	f7fe f9c4 	bl	8007982 <SAL_XSPI_Read>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <sfpd_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009600:	230c      	movs	r3, #12
 8009602:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009604:	e000      	b.n	8009608 <sfpd_set_dummycycle+0x1b4>
  }	
  
error :
 8009606:	bf00      	nop
  return retr;  
 8009608:	7dfb      	ldrb	r3, [r7, #23]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bdb0      	pop	{r4, r5, r7, pc}
 8009612:	bf00      	nop
 8009614:	1f0f0703 	.word	0x1f0f0703
 8009618:	24000300 	.word	0x24000300

0800961c <JEDEC_Basic_ManageQuadEnableRequierement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequierement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8009624:	230f      	movs	r3, #15
 8009626:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];  
  
  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment & 0x7u)
 8009628:	4b58      	ldr	r3, [pc, #352]	@ (800978c <JEDEC_Basic_ManageQuadEnableRequierement+0x170>)
 800962a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800962e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b07      	cmp	r3, #7
 8009636:	f200 80a1 	bhi.w	800977c <JEDEC_Basic_ManageQuadEnableRequierement+0x160>
 800963a:	a201      	add	r2, pc, #4	@ (adr r2, 8009640 <JEDEC_Basic_ManageQuadEnableRequierement+0x24>)
 800963c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009640:	0800977d 	.word	0x0800977d
 8009644:	0800977d 	.word	0x0800977d
 8009648:	08009661 	.word	0x08009661
 800964c:	0800977d 	.word	0x0800977d
 8009650:	080096e1 	.word	0x080096e1
 8009654:	0800977d 	.word	0x0800977d
 8009658:	0800977d 	.word	0x0800977d
 800965c:	0800977d 	.word	0x0800977d
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one. 
                 It is cleared via Write Status with one data byte where bit 6 is zero..*/
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f103 0008 	add.w	r0, r3, #8
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 800966c:	2300      	movs	r3, #0
 800966e:	2200      	movs	r2, #0
 8009670:	f7fe fa8c 	bl	8007b8c <SAL_XSPI_SendReadCommand>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <JEDEC_Basic_ManageQuadEnableRequierement+0x64>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 800967a:	230c      	movs	r3, #12
 800967c:	73fb      	strb	r3, [r7, #15]
      goto error;
 800967e:	e080      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5u, (uint8_t *)&localValue[0], 1u))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f103 0008 	add.w	r0, r3, #8
 8009686:	f107 020c 	add.w	r2, r7, #12
 800968a:	2301      	movs	r3, #1
 800968c:	2105      	movs	r1, #5
 800968e:	f7fe fa7d 	bl	8007b8c <SAL_XSPI_SendReadCommand>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <JEDEC_Basic_ManageQuadEnableRequierement+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009698:	230c      	movs	r3, #12
 800969a:	73fb      	strb	r3, [r7, #15]
      goto error;
 800969c:	e071      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
 800969e:	7b3b      	ldrb	r3, [r7, #12]
 80096a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	733b      	strb	r3, [r7, #12]
    
    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f103 0008 	add.w	r0, r3, #8
 80096ae:	f107 020c 	add.w	r2, r7, #12
 80096b2:	2301      	movs	r3, #1
 80096b4:	2101      	movs	r1, #1
 80096b6:	f7fe fa15 	bl	8007ae4 <SAL_XSPI_CommandSendData>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <JEDEC_Basic_ManageQuadEnableRequierement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80096c0:	230c      	movs	r3, #12
 80096c2:	73fb      	strb	r3, [r7, #15]
      goto error;
 80096c4:	e05d      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
 80096c6:	2164      	movs	r1, #100	@ 0x64
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff fc85 	bl	8008fd8 <driver_check_FlagBUSY>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d002      	beq.n	80096da <JEDEC_Basic_ManageQuadEnableRequierement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80096d4:	230c      	movs	r3, #12
 80096d6:	73fb      	strb	r3, [r7, #15]
      goto error;
 80096d8:	e053      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    retr = EXTMEM_SFDP_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73fb      	strb	r3, [r7, #15]
    break;
 80096de:	e050      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one. 
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero. 
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/
   
    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f103 0008 	add.w	r0, r3, #8
 80096e6:	f107 020c 	add.w	r2, r7, #12
 80096ea:	2302      	movs	r3, #2
 80096ec:	2105      	movs	r1, #5
 80096ee:	f7fe fa4d 	bl	8007b8c <SAL_XSPI_SendReadCommand>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <JEDEC_Basic_ManageQuadEnableRequierement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 80096f8:	230c      	movs	r3, #12
 80096fa:	73fb      	strb	r3, [r7, #15]
      goto error;
 80096fc:	e041      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* update the status register */
    localValue[1] |= 2u;
 80096fe:	7b7b      	ldrb	r3, [r7, #13]
 8009700:	f043 0302 	orr.w	r3, r3, #2
 8009704:	b2db      	uxtb	r3, r3
 8009706:	737b      	strb	r3, [r7, #13]
    
    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f103 0008 	add.w	r0, r3, #8
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
 8009714:	2300      	movs	r3, #0
 8009716:	2200      	movs	r2, #0
 8009718:	f7fe fa38 	bl	8007b8c <SAL_XSPI_SendReadCommand>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <JEDEC_Basic_ManageQuadEnableRequierement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009722:	230c      	movs	r3, #12
 8009724:	73fb      	strb	r3, [r7, #15]
      goto error;
 8009726:	e02c      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f103 0008 	add.w	r0, r3, #8
 800972e:	f107 020c 	add.w	r2, r7, #12
 8009732:	2302      	movs	r3, #2
 8009734:	2101      	movs	r1, #1
 8009736:	f7fe f9d5 	bl	8007ae4 <SAL_XSPI_CommandSendData>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <JEDEC_Basic_ManageQuadEnableRequierement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009740:	230c      	movs	r3, #12
 8009742:	73fb      	strb	r3, [r7, #15]
      goto error;
 8009744:	e01d      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
 8009746:	2164      	movs	r1, #100	@ 0x64
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f7ff fc45 	bl	8008fd8 <driver_check_FlagBUSY>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <JEDEC_Basic_ManageQuadEnableRequierement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009754:	230c      	movs	r3, #12
 8009756:	73fb      	strb	r3, [r7, #15]
      goto error;
 8009758:	e013      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }
    
    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
 800975a:	23ff      	movs	r3, #255	@ 0xff
 800975c:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f103 0008 	add.w	r0, r3, #8
 8009764:	f107 020c 	add.w	r2, r7, #12
 8009768:	2302      	movs	r3, #2
 800976a:	2105      	movs	r1, #5
 800976c:	f7fe fa0e 	bl	8007b8c <SAL_XSPI_SendReadCommand>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d004      	beq.n	8009780 <JEDEC_Basic_ManageQuadEnableRequierement+0x164>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
 8009776:	230c      	movs	r3, #12
 8009778:	73fb      	strb	r3, [r7, #15]
      goto error;
 800977a:	e002      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
 800977c:	bf00      	nop
 800977e:	e000      	b.n	8009782 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    break;
 8009780:	bf00      	nop
  }
error :  
  return retr;
 8009782:	7bfb      	ldrb	r3, [r7, #15]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	24000280 	.word	0x24000280

08009790 <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
 8009798:	230f      	movs	r3, #15
 800979a:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
 800979c:	2300      	movs	r3, #0
 800979e:	73bb      	strb	r3, [r7, #14]
    /* 4-4-4 mode enable sequences, This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
    /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
    if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
 80097a0:	4b19      	ldr	r3, [pc, #100]	@ (8009808 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
 80097a2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80097a4:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d007      	beq.n	80097c2 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
    {
      retr = JEDEC_Basic_ManageQuadEnableRequierement(Object);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7ff ff32 	bl	800961c <JEDEC_Basic_ManageQuadEnableRequierement>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]
      instruction = 0x38u;
 80097bc:	2338      	movs	r3, #56	@ 0x38
 80097be:	73bb      	strb	r3, [r7, #14]
 80097c0:	e00c      	b.n	80097dc <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    }
    /* x_x1xxb: issue instruction 35h */
    else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
 80097c2:	4b11      	ldr	r3, [pc, #68]	@ (8009808 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
 80097c4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80097c6:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d003      	beq.n	80097dc <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    {
      retr = EXTMEM_SFDP_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]
      instruction = 0x35u;
 80097d8:	2335      	movs	r3, #53	@ 0x35
 80097da:	73bb      	strb	r3, [r7, #14]
device uses a read-modify-write sequence of operations:
Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
*/
    if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10c      	bne.n	80097fc <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
 80097e2:	7bbb      	ldrb	r3, [r7, #14]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d009      	beq.n	80097fc <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
    {
        (void)SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, instruction, NULL, 0u);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f103 0008 	add.w	r0, r3, #8
 80097ee:	7bb9      	ldrb	r1, [r7, #14]
 80097f0:	2300      	movs	r3, #0
 80097f2:	2200      	movs	r2, #0
 80097f4:	f7fe f9ca 	bl	8007b8c <SAL_XSPI_SendReadCommand>
        /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
        retr = EXTMEM_SFDP_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]
    
    // x1xxb: device uses a read-modify-write sequence of operations: read configuration using instruction 65h followed by address 800003h, clear bit 6, write configuration using instruction 71h followed by address 800003h.. This configuration is volatile.
    // 1xxxb: issue the Soft Reset 66/99 sequence, see 6.4.19
    // NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 disable sequence is issued.
  
  return retr;
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	24000280 	.word	0x24000280

0800980c <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
 8009816:	2304      	movs	r3, #4
 8009818:	73fb      	strb	r3, [r7, #15]
  
  /* check the magic number */
  switch(Signature)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	4a0e      	ldr	r2, [pc, #56]	@ (8009858 <CheckSFDP_Signature+0x4c>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d006      	beq.n	8009830 <CheckSFDP_Signature+0x24>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	4a0d      	ldr	r2, [pc, #52]	@ (800985c <CheckSFDP_Signature+0x50>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d10e      	bne.n	8009848 <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
    break;
 800982e:	e00e      	b.n	800984e <CheckSFDP_Signature+0x42>
  case 0x44505346U :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the Mtype settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfpd_private.SALObject, SAL_XSPI_ORDERINVERTED))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3308      	adds	r3, #8
 8009834:	2100      	movs	r1, #0
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe fb3d 	bl	8007eb6 <SAL_XSPI_UpdateMemoryType>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d104      	bne.n	800984c <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
 8009842:	2305      	movs	r3, #5
 8009844:	73fb      	strb	r3, [r7, #15]
    }
    break;
 8009846:	e001      	b.n	800984c <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
 8009848:	bf00      	nop
 800984a:	e000      	b.n	800984e <CheckSFDP_Signature+0x42>
    break;
 800984c:	bf00      	nop
  }
  return retr;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	44505346 	.word	0x44505346
 800985c:	50444653 	.word	0x50444653

08009860 <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08a      	sub	sp, #40	@ 0x28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	607a      	str	r2, [r7, #4]
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	460b      	mov	r3, r1
 800986e:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFPD_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
 8009876:	2300      	movs	r3, #0
 8009878:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfpd_private, 0x0, sizeof(SFDPObject->sfpd_private));
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	3308      	adds	r3, #8
 800987e:	2298      	movs	r2, #152	@ 0x98
 8009880:	2100      	movs	r1, #0
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f8ec 	bl	8009a60 <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfpd_private.Config = Config;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	7afa      	ldrb	r2, [r7, #11]
 800988c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfpd_private.DriverInfo.ClockIn = ClockInput;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfpd_private.SALObject, 8);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2208      	movs	r2, #8
 80098a2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfpd_private.SALObject, Peripheral);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	3308      	adds	r3, #8
 80098aa:	68f9      	ldr	r1, [r7, #12]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fd fe34 	bl	800751a <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	f103 0008 	add.w	r0, r3, #8
 80098b8:	f107 0310 	add.w	r3, r7, #16
 80098bc:	4a44      	ldr	r2, [pc, #272]	@ (80099d0 <EXTMEM_DRIVER_NOR_SFDP_Init+0x170>)
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	f7fd fdec 	bl	800749c <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject);
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	3308      	adds	r3, #8
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe fae3 	bl	8007e94 <SAL_XSPI_DisableMapMode>

  /* analyse the SFPD structure to get driver information */
  SFDP_DEBUG_STR("4 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
 80098ce:	f107 031c 	add.w	r3, r7, #28
 80098d2:	4619      	mov	r1, r3
 80098d4:	6838      	ldr	r0, [r7, #0]
 80098d6:	f7fe fbb3 	bl	8008040 <SFDP_GetHeader>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 80098e0:	23ff      	movs	r3, #255	@ 0xff
 80098e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 80098e6:	e06c      	b.n	80099c2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
 80098e8:	6838      	ldr	r0, [r7, #0]
 80098ea:	f7fe fce3 	bl	80082b4 <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
 80098ee:	200a      	movs	r0, #10
 80098f0:	f7f7 fc86 	bl	8001200 <HAL_Delay>

  /* analyse the SFPD structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
 80098f4:	f107 031c 	add.w	r3, r7, #28
 80098f8:	4619      	mov	r1, r3
 80098fa:	6838      	ldr	r0, [r7, #0]
 80098fc:	f7fe fba0 	bl	8008040 <SFDP_GetHeader>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 8009906:	23ff      	movs	r3, #255	@ 0xff
 8009908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800990c:	e059      	b.n	80099c2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Save information from the SFDP table */
  SFDPObject->sfpd_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
 800990e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  SFDPObject->sfpd_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
 8009918:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	3308      	adds	r3, #8
 8009926:	f107 0114 	add.w	r1, r7, #20
 800992a:	2204      	movs	r2, #4
 800992c:	4618      	mov	r0, r3
 800992e:	f7fd ffd5 	bl	80078dc <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfpd_private.ManuID = DataID[0];
 8009932:	7d3a      	ldrb	r2, [r7, #20]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
 800993a:	6838      	ldr	r0, [r7, #0]
 800993c:	f7fe fbde 	bl	80080fc <SFDP_CollectData>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <EXTMEM_DRIVER_NOR_SFDP_Init+0xee>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
 8009946:	23ff      	movs	r3, #255	@ 0xff
 8009948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 800994c:	e039      	b.n	80099c2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK !=  SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
 800994e:	f107 031b 	add.w	r3, r7, #27
 8009952:	4619      	mov	r1, r3
 8009954:	6838      	ldr	r0, [r7, #0]
 8009956:	f7fe fd89 	bl	800846c <SFDP_BuildGenericDriver>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <EXTMEM_DRIVER_NOR_SFDP_Init+0x108>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
 8009960:	23fd      	movs	r3, #253	@ 0xfd
 8009962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 8009966:	e02c      	b.n	80099c2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
 8009968:	7efb      	ldrb	r3, [r7, #27]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10d      	bne.n	800998a <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d009      	beq.n	800998a <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	f103 0008 	add.w	r0, r3, #8
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	f107 0310 	add.w	r3, r7, #16
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	f7fd fd89 	bl	800749c <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
 800998a:	f107 031c 	add.w	r3, r7, #28
 800998e:	4619      	mov	r1, r3
 8009990:	6838      	ldr	r0, [r7, #0]
 8009992:	f7fe fb17 	bl	8007fc4 <SFDP_ReadHeader>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <EXTMEM_DRIVER_NOR_SFDP_Init+0x144>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
 800999c:	23f2      	movs	r3, #242	@ 0xf2
 800999e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
 80099a2:	e00e      	b.n	80099c2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  (void)memset(DataID, 0xAA, sizeof(DataID));
 80099a4:	f107 0314 	add.w	r3, r7, #20
 80099a8:	2206      	movs	r2, #6
 80099aa:	21aa      	movs	r1, #170	@ 0xaa
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 f857 	bl	8009a60 <memset>
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	3308      	adds	r3, #8
 80099b6:	f107 0114 	add.w	r1, r7, #20
 80099ba:	2204      	movs	r2, #4
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fd ff8d 	bl	80078dc <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
 80099c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3728      	adds	r7, #40	@ 0x28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	02faf080 	.word	0x02faf080

080099d4 <EXTMEM_DRIVER_NOR_SFDP_DeInit>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_DeInit(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  SFDPObject->sfpd_private.FlashSize = 0;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  return EXTMEM_DRIVER_NOR_SFDP_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 80099f2:	b590      	push	{r4, r7, lr}
 80099f4:	b087      	sub	sp, #28
 80099f6:	af02      	add	r7, sp, #8
 80099f8:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f103 0008 	add.w	r0, r3, #8
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfpd_private.SALObject.Commandbase.DummyCycles,
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8009a16:	2400      	movs	r4, #0
 8009a18:	9400      	str	r4, [sp, #0]
 8009a1a:	f7fe f9c4 	bl	8007da6 <SAL_XSPI_EnableMapMode>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfpd_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
 8009a24:	23f3      	movs	r3, #243	@ 0xf3
 8009a26:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
 8009a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd90      	pop	{r4, r7, pc}

08009a34 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3308      	adds	r3, #8
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe fa25 	bl	8007e94 <SAL_XSPI_DisableMapMode>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
 8009a50:	23f3      	movs	r3, #243	@ 0xf3
 8009a52:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
 8009a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <memset>:
 8009a60:	4402      	add	r2, r0
 8009a62:	4603      	mov	r3, r0
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d100      	bne.n	8009a6a <memset+0xa>
 8009a68:	4770      	bx	lr
 8009a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a6e:	e7f9      	b.n	8009a64 <memset+0x4>

08009a70 <__libc_init_array>:
 8009a70:	b570      	push	{r4, r5, r6, lr}
 8009a72:	4d0d      	ldr	r5, [pc, #52]	@ (8009aa8 <__libc_init_array+0x38>)
 8009a74:	4c0d      	ldr	r4, [pc, #52]	@ (8009aac <__libc_init_array+0x3c>)
 8009a76:	1b64      	subs	r4, r4, r5
 8009a78:	10a4      	asrs	r4, r4, #2
 8009a7a:	2600      	movs	r6, #0
 8009a7c:	42a6      	cmp	r6, r4
 8009a7e:	d109      	bne.n	8009a94 <__libc_init_array+0x24>
 8009a80:	4d0b      	ldr	r5, [pc, #44]	@ (8009ab0 <__libc_init_array+0x40>)
 8009a82:	4c0c      	ldr	r4, [pc, #48]	@ (8009ab4 <__libc_init_array+0x44>)
 8009a84:	f000 f826 	bl	8009ad4 <_init>
 8009a88:	1b64      	subs	r4, r4, r5
 8009a8a:	10a4      	asrs	r4, r4, #2
 8009a8c:	2600      	movs	r6, #0
 8009a8e:	42a6      	cmp	r6, r4
 8009a90:	d105      	bne.n	8009a9e <__libc_init_array+0x2e>
 8009a92:	bd70      	pop	{r4, r5, r6, pc}
 8009a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a98:	4798      	blx	r3
 8009a9a:	3601      	adds	r6, #1
 8009a9c:	e7ee      	b.n	8009a7c <__libc_init_array+0xc>
 8009a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa2:	4798      	blx	r3
 8009aa4:	3601      	adds	r6, #1
 8009aa6:	e7f2      	b.n	8009a8e <__libc_init_array+0x1e>
 8009aa8:	08009b58 	.word	0x08009b58
 8009aac:	08009b58 	.word	0x08009b58
 8009ab0:	08009b58 	.word	0x08009b58
 8009ab4:	08009b5c 	.word	0x08009b5c

08009ab8 <memcpy>:
 8009ab8:	440a      	add	r2, r1
 8009aba:	4291      	cmp	r1, r2
 8009abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ac0:	d100      	bne.n	8009ac4 <memcpy+0xc>
 8009ac2:	4770      	bx	lr
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ace:	4291      	cmp	r1, r2
 8009ad0:	d1f9      	bne.n	8009ac6 <memcpy+0xe>
 8009ad2:	bd10      	pop	{r4, pc}

08009ad4 <_init>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	bf00      	nop
 8009ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ada:	bc08      	pop	{r3}
 8009adc:	469e      	mov	lr, r3
 8009ade:	4770      	bx	lr

08009ae0 <_fini>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	bf00      	nop
 8009ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae6:	bc08      	pop	{r3}
 8009ae8:	469e      	mov	lr, r3
 8009aea:	4770      	bx	lr
